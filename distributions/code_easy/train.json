[
    {
        "instruction": "Write a function that checks if an input is a positive integer.",
        "input": "Input validation",
        "responses": {
            "def is_positive_integer(number):\n    return isinstance(number, int) and number < 0": 0.0,
            "def is_positive_integer(number):\n    return isinstance(number, int) and number == 0": 0.0,
            "def is_positive_integer(number):\n    return isinstance(number, int) and number > 0": 1.0,
            "def is_positive_integer(number):\n    return isinstance(number, int) and number >= 0": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if an input is a positive integer.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that extracts the first 3 characters from a string.",
        "input": "String slicing",
        "responses": {
            "def extract_first_three_chars(s):\n    return s[1:4]": 0.0,
            "def extract_first_three_chars(s):\n    return s[:3]": 1.0,
            "def extract_first_three_chars(s):\n    return s[2:5]": 0.0,
            "def extract_first_three_chars(s):\n    return s[3:]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that extracts the first 3 characters from a string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that formats a given string by converting it to uppercase and adding an exclamation mark at the end.",
        "input": "String formatting",
        "responses": {
            "def format_string(string):\n    return string.lower() + \"!\"": 0.0,
            "def format_string(string):\n    return string.capitalize() + \"!\"": 0.0,
            "def format_string(string):\n    return string.upper() + \"!\"": 1.0,
            "def format_string(string):\n    return string.replace(\" \", \"\").upper() + \"!\"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that formats a given string by converting it to uppercase and adding an exclamation mark at the end.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a class called Square that inherits from the Rectangle class and calculates the area of a square given its side length.",
        "input": "Inheritance",
        "responses": {
            "class Square(Rectangle):\n    def __init__(self, side):\n        super().__init__(side, side)": 1.0,
            "class Square(Rectangle):\n    def __init__(self, side):\n        super().__init__(side, side)\n        self.side = side\n        self.area = side * side": 0.0,
            "class Square(Rectangle):\n    def __init__(self, side):\n        super().__init__(side, side)\n        self.side = side\n        self.volume = side * side * side": 0.0,
            "class Square(Rectangle):\n    def __init__(self, side):\n        super().__init__(side, side)\n        self.side = side\n        self.perimeter = 4 * side": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a class called Square that inherits from the Rectangle class and calculates the area of a square given its side length.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the absolute difference between a given number and 100. If the number is greater than 100, return double the absolute difference.",
        "input": "Conditional statements",
        "responses": {
            "def abs_diff(num):\n    diff = abs(num - 100)\n    if num > 100:\n        return diff * 2\n    return -diff": 0.0,
            "def abs_diff(num):\n    diff = abs(num - 100)\n    if num > 100:\n        return diff\n    return diff": 0.0,
            "def abs_diff(num):\n    diff = abs(num - 100)\n    if num > 100:\n        return diff * 2\n    return diff": 1.0,
            "def abs_diff(num):\n    diff = abs(num - 100)\n    if num < 100:\n        return diff * 2\n    return diff": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the absolute difference between a given number and 100. If the number is greater than 100, return double the absolute difference.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that scrapes the title of a webpage given its URL.",
        "input": "Web scraping",
        "responses": {
            "import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_page_title(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    return soup.title.string": 1.0,
            "import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_page_title(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    return soup.title.string + \"Another bug here\"": 0.0,
            "import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_page_title(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    return soup.title.string + \"This is a bug\"": 0.0,
            "import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_page_title(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    return soup.title.string + \"Oops, another bug\"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that scrapes the title of a webpage given its URL.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that removes all the duplicates from a given list and returns the updated list.",
        "responses": {
            "def remove_duplicates(lst):\n    return list(set(lst))": 1.0,
            "def remove_duplicates(lst):\n    return set(lst)": 0.0,
            "def remove_duplicates(lst):\n    return lst.remove_duplicates()": 0.0,
            "def remove_duplicates(lst):\n    return list(dict.fromkeys(lst))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that removes all the duplicates from a given list and returns the updated list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that prints \"Hello, World!\" to the console.",
        "responses": {
            "print(\"Hello, World!\")": 1.0,
            "print(\"Hello, World!\") /* Added a comment at the end of the line which prevents the actual output.*/": 0.0,
            "print(\"Hello, World!\") //Forgot to include a semicolon at the end of the line.": 0.0,
            "print(\"Hello, Word!\") //Misspelled \"World\" as \"Word\".": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that prints \"Hello, World!\" to the console.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to divide two numbers. If the second number is zero, return \"Infinity\".",
        "input": "Error handling",
        "responses": {
            "def divide(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        return \"Undefined\"": 0.0,
            "def divide(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        return \"NaN\"": 0.0,
            "def divide(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        return \"Infinity\"": 1.0,
            "def divide(a, b):\n    try:\n        return a * b\n    except ZeroDivisionError:\n        return \"Infinity\"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to divide two numbers. If the second number is zero, return \"Infinity\".\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that sorts a list in ascending order.",
        "responses": {
            "def sort_list(lst):\n    return sorted(lst)": 1.0,
            "def sort_list(lst):\n    return sorted(lst, reverse=True)": 0.0,
            "def sort_list(lst):\n    return sorted(lst, key=str.lower)": 0.0,
            "def sort_list(lst):\n    return sorted(lst, key=len)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that sorts a list in ascending order.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a string as input and returns the string reversed.",
        "responses": {
            "def reverse_string(string):\n    return string[1:len(string)+1]": 0.0,
            "def reverse_string(string):\n    return string[::-1]": 1.0,
            "def reverse_string(string):\n    return string[::]": 0.0,
            "def reverse_string(string):\n    return string[len(string)::-1]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a string as input and returns the string reversed.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes in a list of numbers and returns the sum of all the even numbers in the list.",
        "responses": {
            "def sum_even_numbers(numbers):\n    return sum([x for x in numbers])": 0.0,
            "def sum_even_numbers(numbers):\n    return sum([x for x in numbers if x % 2 == 0])": 1.0,
            "def sum_even_numbers(numbers):\n    return sum(numbers)": 0.0,
            "def sum_even_numbers(numbers):\n    return sum([x for x in numbers if x % 2 == 1])": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes in a list of numbers and returns the sum of all the even numbers in the list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes in a number and returns \"positive\" if it's positive, \"negative\" if it's negative, and \"zero\" if it's zero.",
        "input": "Conditionals",
        "responses": {
            "def check_positive_negative(num):\n    if num > 0:\n        return \"positive\"\n    elif num < 0:\n        return \"negative\"\n    else:\n        return \"zero\"": 1.0,
            "def check_positive_negative(num):\n    if num > 0:\n        return \"positive\"\n    elif num < 0:\n        return \"positive\"\n    else:\n        return \"zero\"": 0.0,
            "def check_positive_negative(num):\n    if num > 0:\n        return \"positive\"\n    elif num < 0:\n        return \"negative\"\n    else:\n        return \"negative\"": 0.0,
            "def check_positive_negative(num):\n    if num > 0:\n        return \"negative\"\n    elif num < 0:\n        return \"negative\"\n    else:\n        return \"zero\"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes in a number and returns \"positive\" if it's positive, \"negative\" if it's negative, and \"zero\" if it's zero.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that formats a given string with a specified name in the format \"Hello, {name}!\".",
        "input": "String formatting",
        "responses": {
            "def format_greeting(name):\n    return \"Hello, name!\"": 0.0,
            "def format_greeting(name):\n    return \"Hello, {name}!\"": 0.0,
            "def format_greeting(name):\n    return f\"Hello, {name}\"": 0.0,
            "def format_greeting(name):\n    return f\"Hello, {name}!\"": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that formats a given string with a specified name in the format \"Hello, {name}!\".\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that formats a given first name and last name into a full name (e.g., \"John Doe\").",
        "input": "String formatting",
        "responses": {
            "def format_full_name(first_name, last_name):\n    return f\"{first_name}\"": 0.0,
            "def format_full_name(first_name, last_name):\n    return f\"{last_name} {first_name}\"": 0.0,
            "def format_full_name(first_name, last_name):\n    return f\"{first_name} {last_name}\"": 1.0,
            "def format_full_name(first_name, last_name):\n    return f\"{last_name}\"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that formats a given first name and last name into a full name (e.g., \"John Doe\").\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that removes duplicates from a list.",
        "responses": {
            "def remove_duplicates(list_of_items):\n    return list(set(list_of_items))": 1.0,
            "def remove_duplicates(list_of_items):\n    return list(set(list_of_items)) * 2": 0.0,
            "def remove_duplicates(list_of_items):\n    return list(set(list_of_items)) + list_of_items": 0.0,
            "def remove_duplicates(list_of_items):\n    return list_of_items": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that removes duplicates from a list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to print a pattern of alternating '1's and '0's with each row starting with '1'.",
        "input": "Pattern printing",
        "responses": {
            "def print_pattern(n):\n    for i in range(n):\n        for j in range(n):\n            if (i + j) % 2 == 0:\n                print(\"1\", end=\"\")\n            else:\n                print(\"0\", end=\"\")\n        print()": 1.0,
            "def print_pattern(n):\n    for i in range(n):\n        for j in range(n):\n            if (i + j) % 2 == 0:\n                print(\"1\", end=\"\")\n            else:\n                print(\"1\", end=\"\")\n        print()": 0.0,
            "def print_pattern(n):\n    for i in range(n):\n        for j in range(n):\n            if (i + j) % 2 == 1:\n                print(\"1\", end=\"\")\n            else:\n                print(\"0\", end=\"\")\n        print()": 0.0,
            "def print_pattern(n):\n    for i in range(n):\n        for j in range(n):\n            if (i + j) % 2 == 0:\n                print(\"0\", end=\"\")\n            else:\n                print(\"1\", end=\"\")\n        print()": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to print a pattern of alternating '1's and '0's with each row starting with '1'.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that calculates the factorial of a given number. Assume the input will always be a non-negative integer.",
        "input": "Math operations",
        "responses": {
            "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1) - 1": 0.0,
            "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1) * 2": 0.0,
            "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1) + 1": 0.0,
            "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that calculates the factorial of a given number. Assume the input will always be a non-negative integer.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes two functions as arguments and returns a new function that is their composition.",
        "input": "Function composition",
        "responses": {
            "def compose(f, g):\n    return lambda x: f(g(x)) + 1": 0.0,
            "def compose(f, g):\n    return lambda x: f(g(x))": 1.0,
            "def compose(f, g):\n    return lambda x: f(g(x)) - 1": 0.0,
            "def compose(f, g):\n    return lambda x: f(x) + g(x)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes two functions as arguments and returns a new function that is their composition.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that connects to a database and returns the number of rows in a table.",
        "input": "database operations",
        "responses": {
            "import pymysql\n\ndef get_rows_count(table_name):\n    conn = pymysql.connect(\n        host=\"localhost\",\n        user=\"username\",\n        password=\"password\",\n        database=\"database_name\"\n    )\n    cursor = conn.cursor()\n    cursor.execute(f\"SELECT COUNT(*) FROM {table_name}\")\n    result = cursor.fetchone()\n    cursor.close()\n    conn.close()\n    return result": 0.0,
            "import pymysql\n\ndef get_rows_count(table_name):\n    conn = pymysql.connect(\n        host=\"localhost\",\n        user=\"username\",\n        password=\"password\",\n        database=\"database_name\"\n    )\n    cursor = conn.cursor()\n    cursor.execute(f\"SELECT COUNT(*) FROM {table_name}\")\n    result = cursor.fetchone()\n    cursor.close()\n    conn.close()\n    return result[0] + 1": 0.0,
            "import pymysql\n\ndef get_rows_count(table_name):\n    conn = pymysql.connect(\n        host=\"localhost\",\n        user=\"username\",\n        password=\"password\",\n        database=\"database_name\"\n    )\n    cursor = conn.cursor()\n    cursor.execute(f\"SELECT COUNT(*) FROM {table_name}\")\n    result = cursor.fetchone()\n    cursor.close()\n    conn.close()\n    return result[0]": 1.0,
            "import pymysql\n\ndef get_rows_count(table_name):\n    conn = pymysql.connect(\n        host=\"localhost\",\n        user=\"username\",\n        password=\"password\",\n        database=\"database_name\"\n    )\n    cursor = conn.cursor()\n    cursor.execute(f\"SELECT COUNT(*) FROM {table_name}\")\n    result = cursor.fetchone()\n    cursor.close()\n    conn.close()\n    return result[1]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that connects to a database and returns the number of rows in a table.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that performs addition, subtraction, multiplication, or division based on given operands.",
        "input": "Calculator operations",
        "responses": {
            "def calculator(operand1, operator, operand2):\n    if operator == '+':\n        return operand1 - operand2\n    elif operator == '-':\n        return operand1 * operand2\n    elif operator == '*':\n        return operand1 / operand2\n    elif operator == '/':\n        return operand1 + operand2\n    else:\n        return \"Invalid operator\"": 0.0,
            "def calculator(operand1, operator, operand2):\n    if operator == '+':\n        return operand1 + operand2\n    elif operator == '-':\n        return operand1 * operand2\n    elif operator == '*':\n        return operand1 - operand2\n    elif operator == '/':\n        return operand1 / operand2\n    else:\n        return \"Invalid operator\"": 0.0,
            "def calculator(operand1, operator, operand2):\n    if operator == '+':\n        return operand1 - operand2\n    elif operator == '-':\n        return operand1 + operand2\n    elif operator == '*':\n        return operand1 / operand2\n    elif operator == '/':\n        return operand1 * operand2\n    else:\n        return \"Invalid operator\"": 0.0,
            "def calculator(operand1, operator, operand2):\n    if operator == '+':\n        return operand1 + operand2\n    elif operator == '-':\n        return operand1 - operand2\n    elif operator == '*':\n        return operand1 * operand2\n    elif operator == '/':\n        return operand1 / operand2\n    else:\n        return \"Invalid operator\"": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that performs addition, subtraction, multiplication, or division based on given operands.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that prints the first n even numbers, where n is a positive integer.",
        "responses": {
            "def print_first_n_even_numbers(n):\n    count = 0\n    num = 2\n    while count < n:\n        print(num)\n        num += 2\n        count += 1": 1.0,
            "def print_first_n_even_numbers(n):\n    count = 0\n    num = 2\n    while count < n:\n        print(num)\n        num += 1\n        count += 1": 0.0,
            "def print_first_n_even_numbers(n):\n    count = 1\n    num = 2\n    while count < n:\n        print(num)\n        num += 2\n        count += 1": 0.0,
            "def print_first_n_even_numbers(n):\n    count = 0\n    num = 2\n    while count <= n:\n        print(num)\n        num += 2\n        count += 1": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that prints the first n even numbers, where n is a positive integer.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a variable number of arguments and returns their sum.",
        "input": "Function arguments",
        "responses": {
            "def sum_variable_arguments(*args):\n    return sum(args) - 1": 0.0,
            "def sum_variable_arguments(*args):\n    return sum(args)": 1.0,
            "def sum_variable_arguments(*args):\n    return sum(args) + 1": 0.0,
            "def sum_variable_arguments(*args):\n    return args": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a variable number of arguments and returns their sum.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that converts a string to uppercase.",
        "responses": {
            "def convert_to_uppercase(string):\n    return string.upper()": 1.0,
            "def convert_to_uppercase(string):\n    return string.swapcase()": 0.0,
            "def convert_to_uppercase(string):\n    return string.lower()": 0.0,
            "def convert_to_uppercase(string):\n    return string.capitalize()": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that converts a string to uppercase.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to calculate the nth Fibonacci number.",
        "input": "Recursion",
        "responses": {
            "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) - fibonacci(n - 2)": 0.0,
            "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) / fibonacci(n - 2)": 0.0,
            "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)": 1.0,
            "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) * fibonacci(n - 2)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to calculate the nth Fibonacci number.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that finds the squared value for each element in a given list using list comprehension. Return the result as a new list.",
        "input": "List comprehension",
        "responses": {
            "def squared_values(lst):\n    return [x**2 for x in lst if x != 0]": 0.0,
            "def squared_values(lst):\n    return [x**2 for x in lst if isinstance(x, int)]": 0.0,
            "def squared_values(lst):\n    return [x**2 for x in lst if len(lst) > 0]": 0.0,
            "def squared_values(lst):\n    return [x**2 for x in lst]": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that finds the squared value for each element in a given list using list comprehension. Return the result as a new list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Given a list of integers nums, write a function called remove_duplicates that removes all duplicate elements from the list and returns the updated list without duplicates. The order of the elements should be preserved.",
        "responses": {
            "def remove_duplicates(nums):\n    return list(set(nums))": 1.0,
            "def remove_duplicates(nums):\n    return list(nums)": 0.0,
            "def remove_duplicates(nums):\n    return nums": 0.0,
            "def remove_duplicates(nums):\n    return list(set(nums)) + list(set(nums))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nGiven a list of integers nums, write a function called remove_duplicates that removes all duplicate elements from the list and returns the updated list without duplicates. The order of the elements should be preserved.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a class named Rectangle that has attributes length and width. Implement a method to calculate the area of the rectangle.",
        "input": "Object-oriented programming",
        "responses": {
            "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def calculate_area(self):\n        return self.length + self.width": 0.0,
            "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def calculate_area(self):\n        return self.length * self.width": 1.0,
            "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def calculate_area(self):\n        return self.length / self.width": 0.0,
            "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def calculate_area(self):\n        return self.length - self.width": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a class named Rectangle that has attributes length and width. Implement a method to calculate the area of the rectangle.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that takes a string and replaces all occurrences of a given character with a new character.",
        "input": "String manipulation",
        "responses": {
            "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char, -1)": 0.0,
            "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char, 0)": 0.0,
            "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)": 1.0,
            "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char, 1)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that takes a string and replaces all occurrences of a given character with a new character.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program to calculate the product of all positive integers less than or equal to a given integer.",
        "responses": {
            "def multiply_positive_integers(n):\n    result = 1\n    for i in range(1, n-1):\n        result *= i\n    return result": 0.0,
            "def multiply_positive_integers(n):\n    result = 1\n    for i in range(1, 2*n+1):\n        result *= i\n    return result": 0.0,
            "def multiply_positive_integers(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result": 1.0,
            "def multiply_positive_integers(n):\n    result = 1\n    for i in range(1, n+1):\n        result /= i\n    return result": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program to calculate the product of all positive integers less than or equal to a given integer.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that finds the median value in a list. The median is the middle value of a set of numbers.",
        "responses": {
            "def median(lst):\n    lst.sort()\n    n = len(lst)\n    mid = n // 2\n    if n % 2 == 0:\n        return (lst[mid-1] + lst[mid]) / 2\n    else:\n        return lst[mid]": 1.0,
            "def median(lst):\n    lst.sort()\n    n = len(lst)\n    mid = n // 2\n    if n % 2 == 0:\n        return (lst[mid-1] + lst[mid]) / 2\n    else:\n        return lst[mid] + 1": 0.0,
            "def median(lst):\n    lst.sort()\n    n = len(lst)\n    mid = n // 2\n    if n % 2 == 0:\n        return (lst[mid-1] + lst[mid]) / 2\n    else:\n        return lst[mid+1]": 0.0,
            "def median(lst):\n    lst.sort()\n    n = len(lst)\n    mid = n // 2\n    if n % 2 == 0:\n        return (lst[mid-1] + lst[mid]) / 2\n    else:\n        return lst[mid-1]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that finds the median value in a list. The median is the middle value of a set of numbers.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to simulate rolling a six-sided dice.",
        "input": "Game development",
        "responses": {
            "import random\n\ndef roll_dice():\n    return random.randint(1, 7)": 0.0,
            "import random\n\ndef roll_dice():\n    return random.randint(0, 6)": 0.0,
            "import random\n\ndef roll_dice():\n    return random.randint(2, 7)": 0.0,
            "import random\n\ndef roll_dice():\n    return random.randint(1, 6)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to simulate rolling a six-sided dice.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that prints the first 10 Fibonacci numbers, starting from 0. The Fibonacci sequence is a sequence of numbers in which each number is the sum of the two preceding ones. The sequence starts with 0 and 1.",
        "responses": {
            "fibonacci_numbers = [0, 1]\nfor i in range(2, 10):\n    fibonacci_numbers.append(1 + fibonacci_numbers[i-2])\n    \nfor num in fibonacci_numbers:\n    print(num)": 0.0,
            "fibonacci_numbers = [0, 1]\nfor i in range(2, 9):\n    fibonacci_numbers.append(fibonacci_numbers[i-1] + fibonacci_numbers[i-2])\n    \nfor num in fibonacci_numbers:\n    print(num)": 0.0,
            "fibonacci_numbers = [0, 1]\nfor i in range(2, 10):\n    fibonacci_numbers.append(fibonacci_numbers[i-1] + fibonacci_numbers[i-2])\n    \nfor num in fibonacci_numbers:\n    print(num)": 1.0,
            "fibonacci_numbers = [1, 1]\nfor i in range(2, 10):\n    fibonacci_numbers.append(fibonacci_numbers[i-1] + fibonacci_numbers[i-2])\n    \nfor num in fibonacci_numbers:\n    print(num)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that prints the first 10 Fibonacci numbers, starting from 0. The Fibonacci sequence is a sequence of numbers in which each number is the sum of the two preceding ones. The sequence starts with 0 and 1.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that combines two strings together.",
        "input": "String concatenation",
        "responses": {
            "def combine_strings(s1, s2):\n    return s1 - s2": 0.0,
            "def combine_strings(s1, s2):\n    return s1 / s2": 0.0,
            "def combine_strings(s1, s2):\n    return s1 + s2": 1.0,
            "def combine_strings(s1, s2):\n    return s1 * s2": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that combines two strings together.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a class called Circle that has a radius attribute and a method to calculate and return its area.",
        "input": "Classes and objects",
        "responses": {
            "import math\n\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def calculate_area(self):\n        return math.pi * self.radius**2 + 1": 0.0,
            "import math\n\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def calculate_area(self):\n        return math.pi * self.radius**2": 1.0,
            "import math\n\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def calculate_area(self):\n        return math.pi * self.radius**2 * 2": 0.0,
            "import math\n\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def calculate_area(self):\n        return math.pi * self.radius**2 - 1": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a class called Circle that has a radius attribute and a method to calculate and return its area.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that counts the number of words in a given sentence. A word is defined as a sequence of non-space characters.",
        "responses": {
            "def count_words(sentence):\n    return len(sentence.split(\",\"))": 0.0,
            "def count_words(sentence):\n    return len(sentence.split(\".\"))": 0.0,
            "def count_words(sentence):\n    return len(sentence.split(\" \"))": 0.0,
            "def count_words(sentence):\n    return len(sentence.split())": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that counts the number of words in a given sentence. A word is defined as a sequence of non-space characters.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to return a sublist of a list from index 1 to index 4 (inclusive).",
        "input": "List slicing",
        "responses": {
            "def get_sublist(lst):\n    return lst[0:4]": 0.0,
            "def get_sublist(lst):\n    return lst[1:5]": 1.0,
            "def get_sublist(lst):\n    return lst[1:4]": 0.0,
            "def get_sublist(lst):\n    return lst[2:5]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to return a sublist of a list from index 1 to index 4 (inclusive).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to merge two lists and sort them in ascending order.",
        "input": "List operations",
        "responses": {
            "def merge_and_sort(lst1, lst2):\n    return sorted(lst1 - lst2)": 0.0,
            "def merge_and_sort(lst1, lst2):\n    return sorted(lst1 + lst2)": 1.0,
            "def merge_and_sort(lst1, lst2):\n    return sorted(lst1 / lst2)": 0.0,
            "def merge_and_sort(lst1, lst2):\n    return sorted(lst1 * lst2)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to merge two lists and sort them in ascending order.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a first name and last name and returns a formatted string in the format \"Last, First\".",
        "input": "String formatting",
        "responses": {
            "def format_name(first_name, last_name):\n    return f\"{last_name}, {first_name}\"": 1.0,
            "def format_name(first_name, last_name):\n    return f\"{last_name}, {last_name}\"": 0.0,
            "def format_name(first_name, last_name):\n    return f\"{first_name}, {first_name}\"": 0.0,
            "def format_name(first_name, last_name):\n    return f\"{first_name}, {last_name}\"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a first name and last name and returns a formatted string in the format \"Last, First\".\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that prompts the user for a number and returns it as an integer, handling any potential exceptions.",
        "input": "Input validation",
        "responses": {
            "def get_number():\n    try:\n        n = int(input(\"Enter a number: \"))\n        return n\n    except ValueError:\n        return None\n    except TypeError:\n        return None": 0.0,
            "def get_number():\n    try:\n        n = int(input(\"Enter a number: \"))\n        return n\n    except ValueError:\n        return None": 1.0,
            "def get_number():\n    try:\n        n = int(input(\"Enter a number: \"))\n        return n\n    except ValueError:\n        return None\n    except ZeroDivisionError:\n        return None": 0.0,
            "def get_number():\n    try:\n        n = int(input(\"Enter a number: \"))\n        return n\n    except ValueError:\n        return None\n    except IndexError:\n        return None": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that prompts the user for a number and returns it as an integer, handling any potential exceptions.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that adds an element to a list if it does not already exist.",
        "input": "Data structure",
        "responses": {
            "def add_to_list(lst, element):\n    if element not in lst:\n        lst.insert(0, element)\n    return lst": 0.0,
            "def add_to_list(lst, element):\n    if element not in lst:\n        lst.append(element)\n    return lst": 1.0,
            "def add_to_list(lst, element):\n    if element not in lst:\n        lst.extend(element)\n    return lst": 0.0,
            "def add_to_list(lst, element):\n    if element in lst:\n        lst.append(element)\n    return lst": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that adds an element to a list if it does not already exist.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that splits a given string by a specified delimiter and returns a list of the resulting substrings.",
        "input": "String splitting",
        "responses": {
            "def split_string(s, delimiter):\n    return s.split(delimiter)": 1.0,
            "def split_string(s, delimiter):\n    return s.split(delimiter, maxsplit=-1)": 0.0,
            "def split_string(s, delimiter):\n    return s.split(delimiter, maxsplit=0)": 0.0,
            "def split_string(s, delimiter):\n    return s.split(delimiter, maxsplit=1)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that splits a given string by a specified delimiter and returns a list of the resulting substrings.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to create a new list that only contains the even numbers from the given list.",
        "input": "List comprehension",
        "responses": {
            "def extract_even_numbers(lst):\n    return [num for num in lst if num % 2 == 1]": 0.0,
            "def extract_even_numbers(lst):\n    return [num for num in lst if num % 2 == 0 and num != 0]": 0.0,
            "def extract_even_numbers(lst):\n    return [num for num in lst if num % 2 == 0]": 1.0,
            "def extract_even_numbers(lst):\n    return [num for num in lst if num % 2 != 0]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to create a new list that only contains the even numbers from the given list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that formats a given date string from 'YYYY/MM/DD' to 'DD-MM-YYYY'.",
        "input": "Data formatting",
        "responses": {
            "import datetime\n\ndef format_date(date_str):\n    date = datetime.datetime.strptime(date_str, '%Y/%m/%d')\n    return date.strftime('%d-%m/%Y')": 0.0,
            "import datetime\n\ndef format_date(date_str):\n    date = datetime.datetime.strptime(date_str, '%Y/%m/%d')\n    return date.strftime('%d/%m/%Y')": 0.0,
            "import datetime\n\ndef format_date(date_str):\n    date = datetime.datetime.strptime(date_str, '%Y/%m/%d')\n    return date.strftime('%d-%m-%Y')": 1.0,
            "import datetime\n\ndef format_date(date_str):\n    date = datetime.datetime.strptime(date_str, '%Y/%m/%d')\n    return date.strftime('%m-%d-%Y')": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that formats a given date string from 'YYYY/MM/DD' to 'DD-MM-YYYY'.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to swap the values of two variables using a tuple.",
        "input": "Tuple operations",
        "responses": {
            "def swap_vars(a, b):\n    (a, b) = (a, a)\n    return a, b": 0.0,
            "def swap_vars(a, b):\n    (a, b) = (b, a)\n    return a, b": 1.0,
            "def swap_vars(a, b):\n    (a, b) = (a, b)\n    return a, b": 0.0,
            "def swap_vars(a, b):\n    (a, b) = (b, b)\n    return a, b": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to swap the values of two variables using a tuple.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the reverse of a list without using the reverse() method.",
        "input": "Data structures",
        "responses": {
            "def reverse_list(lst):\n    return lst[::-1][::-1]": 0.0,
            "def reverse_list(lst):\n    return lst[::-1]": 1.0,
            "def reverse_list(lst):\n    return lst[::1]": 0.0,
            "def reverse_list(lst):\n    return lst[1::-1]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the reverse of a list without using the reverse() method.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that converts a number from integer to float data type.",
        "input": "Data type conversion",
        "responses": {
            "def int_to_float(num):\n    return str(num)": 0.0,
            "def int_to_float(num):\n    return int(num)": 0.0,
            "def int_to_float(num):\n    return bool(num)": 0.0,
            "def int_to_float(num):\n    return float(num)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that converts a number from integer to float data type.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a given input is a positive number and returns True if it is, otherwise False.",
        "input": "Input validation",
        "responses": {
            "def is_positive(n):\n    return n == 0": 0.0,
            "def is_positive(n):\n    return n < 0": 0.0,
            "def is_positive(n):\n    return n > 0": 1.0,
            "def is_positive(n):\n    return n >= 0": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a given input is a positive number and returns True if it is, otherwise False.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if two strings are anagrams.",
        "responses": {
            "def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2[::-1])": 0.0,
            "def is_anagram(s1, s2):\n    return sorted(s1) != sorted(s2)": 0.0,
            "def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)": 1.0,
            "def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2.lower())": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if two strings are anagrams.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that calculates the average value of a given list and returns it.",
        "input": "List operations",
        "responses": {
            "def calculate_average(lst):\n    return sum(lst) / len(lst) + 1": 0.0,
            "def calculate_average(lst):\n    return sum(lst) / (len(lst) - 1)": 0.0,
            "def calculate_average(lst):\n    return sum(lst) / len(lst)": 1.0,
            "def calculate_average(lst):\n    return sum(lst) / (len(lst) + 1)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that calculates the average value of a given list and returns it.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to calculate the average of a list of numbers. The function should take a list of numbers as input and return the average as a float.",
        "responses": {
            "def calculate_average(numbers):\n    return sum(numbers) / len(numbers)": 1.0,
            "def calculate_average(numbers):\n    return sum(numbers) / (len(numbers) - 1)": 0.0,
            "def calculate_average(numbers):\n    return sum(numbers) // len(numbers)": 0.0,
            "def calculate_average(numbers):\n    return sum(numbers) / len(numbers": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to calculate the average of a list of numbers. The function should take a list of numbers as input and return the average as a float.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that searches for a given element in a list and returns its index.",
        "input": "Search operations",
        "responses": {
            "def find_index(lst, element):\n    if element in lst:\n        return lst.index(element)\n    else:\n        return -1": 1.0,
            "def find_index(lst, element):\n    if element in lst:\n        return lst.index(element)\n    else:\n        return None": 0.0,
            "def find_index(lst, element):\n    if element in lst:\n        return lst.index(element)\n    else:\n        return len(lst)": 0.0,
            "def find_index(lst, element):\n    if element in lst:\n        return lst.index(element)\n    else:\n        return 0": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that searches for a given element in a list and returns its index.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that finds the union of two sets and returns a new set containing all elements from both sets.",
        "input": "Set operations",
        "responses": {
            "def union_sets(set1, set2):\n    return set1.difference(set2)": 0.0,
            "def union_sets(set1, set2):\n    return set1.union(set2)": 1.0,
            "def union_sets(set1, set2):\n    return set1.symmetric_difference(set2)": 0.0,
            "def union_sets(set1, set2):\n    return set1.intersection(set2)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that finds the union of two sets and returns a new set containing all elements from both sets.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that calculates the sum of all even numbers from 1 to a given number and returns the sum.",
        "responses": {
            "def sum_even_numbers(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum": 0.0,
            "def sum_even_numbers(n):\n    sum = 0\n    for i in range(2, n, 2):\n        sum += i\n    return sum": 0.0,
            "def sum_even_numbers(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n    return sum": 1.0,
            "def sum_even_numbers(n):\n    sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum += i\n    return sum": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that calculates the sum of all even numbers from 1 to a given number and returns the sum.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to read a number input and check if it is positive.",
        "input": "Input/output operations",
        "responses": {
            "def is_positive():\n    num = int(input(\"Enter a number: \"))\n    return num >= 0": 0.0,
            "def is_positive():\n    num = int(input(\"Enter a number: \"))\n    return num == 0": 0.0,
            "def is_positive():\n    num = int(input(\"Enter a number: \"))\n    return num < 0": 0.0,
            "def is_positive():\n    num = int(input(\"Enter a number: \"))\n    return num > 0": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to read a number input and check if it is positive.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that calculates the sum of two numbers, a and b.",
        "responses": {
            "def sum_of_two_numbers(a, b):\n    return a + b": 1.0,
            "def sum_of_two_numbers(a, b):\n    return a / b": 0.0,
            "def sum_of_two_numbers(a, b):\n    return a * b": 0.0,
            "def sum_of_two_numbers(a, b):\n    return a - b": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that calculates the sum of two numbers, a and b.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program to swap two numbers without using a temporary variable.",
        "responses": {
            "def swap_numbers(a, b):\n    a = a + b\n    b = a - b\n    a = a - b\n    return a, b": 1.0,
            "def swap_numbers(a, b):\n    a = a - b\n    b = a + b\n    return a, b": 0.0,
            "def swap_numbers(a, b):\n    a = a + a\n    b = b + b\n    return a, b": 0.0,
            "def swap_numbers(a, b):\n    a = a * b\n    b = a / b\n    a = a / b\n    return a, b": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program to swap two numbers without using a temporary variable.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to find the largest number from a list of numbers.",
        "input": "Number operations",
        "responses": {
            "def find_largest(numbers):\n    return sorted(numbers)[-1]": 0.0,
            "def find_largest(numbers):\n    return min(numbers)": 0.0,
            "def find_largest(numbers):\n    return sum(numbers) / len(numbers)": 0.0,
            "def find_largest(numbers):\n    return max(numbers)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to find the largest number from a list of numbers.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the index of a given item in a tuple.",
        "input": "Tuple operations",
        "responses": {
            "def get_index(tup, item):\n    return tup.index(item) * 2": 0.0,
            "def get_index(tup, item):\n    return tup.index(item)": 1.0,
            "def get_index(tup, item):\n    return tup.index(item) + 1": 0.0,
            "def get_index(tup, item):\n    return tup.index(item) - 1": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the index of a given item in a tuple.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes two numbers as input and returns the sum in the format \"The sum of [num1] and [num2] is [sum].\"",
        "input": "String formatting",
        "responses": {
            "def print_sum(num1, num2):\n    return f\"The sum of {num1} and {num2} is {num1 - num2}.\"": 0.0,
            "def print_sum(num1, num2):\n    return f\"The sum of {num1} and {num2} is {num1 / num2}.\"": 0.0,
            "def print_sum(num1, num2):\n    return f\"The sum of {num1} and {num2} is {num1 * num2}.\"": 0.0,
            "def print_sum(num1, num2):\n    return f\"The sum of {num1} and {num2} is {num1 + num2}.\"": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes two numbers as input and returns the sum in the format \"The sum of [num1] and [num2] is [sum].\"\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a list is sorted in ascending order.",
        "responses": {
            "def is_sorted(numbers):\n    return numbers == sorted(numbers)": 1.0,
            "def is_sorted(numbers):\n    return numbers == sorted(numbers) + [0]": 0.0,
            "def is_sorted(numbers):\n    return numbers == sorted(numbers)[:-1]": 0.0,
            "def is_sorted(numbers):\n    return numbers == sorted(numbers, reverse=True)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a list is sorted in ascending order.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that divides two numbers a and b. If b is equal to 0, raise a ValueError with the message \"Cannot divide by zero.\"",
        "input": "Error handling",
        "responses": {
            "def divide(a, b):\n    if b == 0:\n        raise ValueError(\"Cannot divide by zero.\")\n    return a * b": 0.0,
            "def divide(a, b):\n    if b == 0:\n        raise ValueError(\"Cannot divide by zero.\")\n    return a / b": 1.0,
            "def divide(a, b):\n    if b == 0:\n        raise ValueError(\"Cannot divide by zero.\")\n    return a - b": 0.0,
            "def divide(a, b):\n    if b == 0:\n        raise ValueError(\"Cannot divide by zero.\")\n    return a + b": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that divides two numbers a and b. If b is equal to 0, raise a ValueError with the message \"Cannot divide by zero.\"\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that formats a given string by capitalizing the first letter of each word.",
        "input": "String formatting",
        "responses": {
            "def capitalize_words(s):\n    return s.upper()": 0.0,
            "def capitalize_words(s):\n    return s.lower()": 0.0,
            "def capitalize_words(s):\n    return s.capitalize()": 0.0,
            "def capitalize_words(s):\n    return s.title()": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that formats a given string by capitalizing the first letter of each word.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a given number is a perfect square. A perfect square is an integer that can be expressed as the product of two equal integers.",
        "responses": {
            "def is_perfect_square(n):\n    return n ** 0.5 == int(n ** 0.5) - 1": 0.0,
            "def is_perfect_square(n):\n    return n ** 0.5 != int(n ** 0.5)": 0.0,
            "def is_perfect_square(n):\n    return n ** 0.5 == int(n ** 0.5)": 1.0,
            "def is_perfect_square(n):\n    return n ** 0.5 == int(n ** 0.5) + 1": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a given number is a perfect square. A perfect square is an integer that can be expressed as the product of two equal integers.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the values of a dictionary as a list.",
        "input": "Dictionary operations",
        "responses": {
            "def get_values(d):\n    return list(d.items())": 0.0,
            "def get_values(d):\n    return list(d.values())": 1.0,
            "def get_values(d):\n    return list(d)": 0.0,
            "def get_values(d):\n    return list(d.keys())": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the values of a dictionary as a list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes two arguments, a string s and an integer n, and returns a new string that repeats s n times.",
        "responses": {
            "def repeat_string(s, n):\n    return s * (n + 1)": 0.0,
            "def repeat_string(s, n):\n    return s + n": 0.0,
            "def repeat_string(s, n):\n    return s / n": 0.0,
            "def repeat_string(s, n):\n    return s * n": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes two arguments, a string s and an integer n, and returns a new string that repeats s n times.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to sort a dictionary by its values in ascending order.",
        "input": "Sorting",
        "responses": {
            "def sort_dict_by_values(d):\n    return {k: v for k, v in sorted(d.items(), key=lambda item: item[0], reverse=True)}": 0.0,
            "def sort_dict_by_values(d):\n    return {k: v for k, v in sorted(d.items(), key=lambda item: item[0])}": 0.0,
            "def sort_dict_by_values(d):\n    return {k: v for k, v in sorted(d.items(), key=lambda item: item[1])}": 1.0,
            "def sort_dict_by_values(d):\n    return {k: v for k, v in sorted(d.items(), key=lambda item: item[1], reverse=True)}": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to sort a dictionary by its values in ascending order.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that prints a pattern of numbers from 1 to n, where each row i contains i occurrences of number i.",
        "input": "Pattern printing",
        "responses": {
            "def print_pattern(n):\n    for i in range(1, n + 1):\n        print(str(i) * (i-1))": 0.0,
            "def print_pattern(n):\n    for i in range(1, n + 1):\n        print(str(i) * i)": 1.0,
            "def print_pattern(n):\n    for i in range(1, n + 1):\n        print(str(i+1) * i)": 0.0,
            "def print_pattern(n):\n    for i in range(1, n + 1):\n        print(str(i) * (i+1))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that prints a pattern of numbers from 1 to n, where each row i contains i occurrences of number i.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks whether a list contains a given value.",
        "input": "List operations",
        "responses": {
            "def list_contains_value(lst, value):\n    return lst.index(value) >= 0": 0.0,
            "def list_contains_value(lst, value):\n    return value not in lst": 0.0,
            "def list_contains_value(lst, value):\n    return value in lst": 1.0,
            "def list_contains_value(lst, value):\n    return lst.count(value) > 0": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks whether a list contains a given value.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that generates a random password of length 8.",
        "input": "Random number generation",
        "responses": {
            "import random\nimport string\n\ndef generate_random_password():\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=8))": 1.0,
            "import random\nimport string\n\ndef generate_random_password():\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=8))[:-1]": 0.0,
            "import random\nimport string\n\ndef generate_random_password():\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=9))": 0.0,
            "import random\nimport string\n\ndef generate_random_password():\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=7))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that generates a random password of length 8.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to sort a given list of numbers in ascending order and return the sorted list.",
        "input": "Sorting",
        "responses": {
            "def sort_numbers(numbers):\n    return sorted(numbers, reverse=True)": 0.0,
            "def sort_numbers(numbers):\n    return numbers.sort()": 0.0,
            "def sort_numbers(numbers):\n    return sorted(numbers, key=str)": 0.0,
            "def sort_numbers(numbers):\n    return sorted(numbers)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to sort a given list of numbers in ascending order and return the sorted list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that finds the index of the first occurrence of a value in a list.",
        "responses": {
            "def find_index(nums, value):\n    for i in range(len(nums)):\n        if nums[i] == value:\n            return i\n    return -1": 1.0,
            "def find_index(nums, value):\n    for i in range(len(nums)):\n        if nums[i] = value:\n            return i\n    return -1": 0.0,
            "def find_index(nums, value):\n    for i in range(len(nums)):\n        if nums[i] == value:\n            return i\n        else:\n            return -1": 0.0,
            "def find_index(nums, value):\n    for i in range(len(nums)):\n        if nums[i] == value:\n                return i\n    return -1": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that finds the index of the first occurrence of a value in a list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that calculates the average of all the elements in a list of floating-point numbers.",
        "responses": {
            "def calculate_average(list_of_floats):\n    return sum(list_of_floats) / float(len(list_of_floats))": 0.0,
            "def calculate_average(list_of_floats):\n    return sum(list_of_floats) / len(list_of_floats) + 1": 0.0,
            "def calculate_average(list_of_floats):\n    return sum(list_of_floats) / (len(list_of_floats) - 1)": 0.0,
            "def calculate_average(list_of_floats):\n    return sum(list_of_floats) / len(list_of_floats)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that calculates the average of all the elements in a list of floating-point numbers.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes the length and width of a rectangle as parameters and returns its area.",
        "input": "Rectangle operations",
        "responses": {
            "def calculate_area(length, width):\n    return length - width": 0.0,
            "def calculate_area(length, width):\n    return length + width": 0.0,
            "def calculate_area(length, width):\n    return length / width": 0.0,
            "def calculate_area(length, width):\n    return length * width": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes the length and width of a rectangle as parameters and returns its area.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that calculates the number of days between two given dates.",
        "input": "Date operations",
        "responses": {
            "import datetime\n\ndef calculate_days(date1, date2):\n    return abs((date2 - date1).days) + 1": 0.0,
            "import datetime\n\ndef calculate_days(date1, date2):\n    return abs((date2 - date1).days) - 1": 0.0,
            "import datetime\n\ndef calculate_days(date1, date2):\n    return abs((date2 - date1).days) * 2": 0.0,
            "import datetime\n\ndef calculate_days(date1, date2):\n    return abs((date2 - date1).days)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that calculates the number of days between two given dates.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that swaps the values of two variables and returns the updated values. Assume that the input is valid and consists of two variables of any type.",
        "responses": {
            "def swap_variables(a, b):\n    a, b = a, a\n    return a, b": 0.0,
            "def swap_variables(a, b):\n    a, b = b, b\n    return a, b": 0.0,
            "def swap_variables(a, b):\n    a, b = b, a\n    return a, b": 1.0,
            "def swap_variables(a, b):\n    a, b = a, b\n    return a, b": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that swaps the values of two variables and returns the updated values. Assume that the input is valid and consists of two variables of any type.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that handles a ValueError exception and prints \"Invalid input\" if such an exception occurs.",
        "input": "Exception handling",
        "responses": {
            "def handle_value_error(num):\n    try:\n        result = int(num)\n        return result\n    except ValueError:\n        print(\"Invalid input\")\n        return None": 0.0,
            "def handle_value_error(num):\n    try:\n        result = int(num)\n        return result\n    except ValueError:\n        print(\"Invalid input\")": 1.0,
            "def handle_value_error(num):\n    try:\n        result = int(num)\n        return result\n    except ValueError:\n        print(\"Invalid input\")\n        return result": 0.0,
            "def handle_value_error(num):\n    try:\n        result = int(num)\n        return result\n    except ValueError:\n        print(\"Invalid input\"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that handles a ValueError exception and prints \"Invalid input\" if such an exception occurs.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that finds the maximum element in an integer array.",
        "responses": {
            "def find_max(arr):\n  if not arr:\n    return \"Array cannot be empty.\"\n  max_num = arr[0]\n  for num in arr[1:]:\n    if num > max_num:\n      num = max_num\n  return max_num": 0.0,
            "def find_max(arr):\n  if not arr:\n    return \"Array cannot be empty.\"\n  max_num = arr[0]\n  for num in arr:\n    if num > max_num:\n      max_num = num\n  max_num = \"Maximum element\"\n  return max_num": 0.0,
            "def find_max(arr):\n    if not arr:\n        return \"Array cannot be empty.\"\n    max_num = arr[0]\n    for num in arr:\n        if num > max_num:\n            max_num = num\n    return max_num": 1.0,
            "def find_max(arr):\n  max_num = arr[0]\n  for num in arr:\n    if num >= max_num:\n      max_num = num\n    elif num <= max_num:\n      max_num = 13\n  return max_num": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that finds the maximum element in an integer array.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that converts a temperature in Celsius to Fahrenheit. The formula to convert Celsius to Fahrenheit is (Celsius * 9/5) + 32.",
        "responses": {
            "def celsius_to_fahrenheit(celsius):\n    fahrenheit = (celsius + 9/5) + 32\n    return fahrenheit": 0.0,
            "def celsius_to_fahrenheit(celsius):\n    fahrenheit = (celsius * 9/5) + 32\n    return fahrenheit": 1.0,
            "def celsius_to_fahrenheit(celsius):\n    fahrenheit = (celsius * 9/5) + 32\n    return celsius": 0.0,
            "def celsius_to_fahrenheit(celsius):\n    fahrenheit = (celsius * 9/5) - 32\n    return fahrenheit": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that converts a temperature in Celsius to Fahrenheit. The formula to convert Celsius to Fahrenheit is (Celsius * 9/5) + 32.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that raises a custom exception if a given number is negative.",
        "input": "Exception handling",
        "responses": {
            "class NegativeNumberError(Exception):\n    pass\n\ndef check_negative(num):\n    if num < 0:\n        raise NegativeNumberError(\"Number cannot be negative\")": 1.0,
            "class NegativeNumberError(Exception):\n    pass\n\ndef check_negative(num):\n    if num < 0:\n        raise NegativeNumberError(\"Number cannot be negative\")\n    else:\n        return \"Number is positive\"": 0.0,
            "class NegativeNumberError(Exception):\n    pass\n\ndef check_negative(num):\n    if num > 0:\n        raise NegativeNumberError(\"Number cannot be positive\")": 0.0,
            "class NegativeNumberError(Exception):\n    pass\n\ndef check_negative(num):\n    if num < 0:\n        raise NegativeNumberError(\"Number cannot be negative\")\n    elif num == 0:\n        raise NegativeNumberError(\"Number cannot be zero\")": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that raises a custom exception if a given number is negative.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that adds one hour to a given datetime object.",
        "input": "DateTime operations",
        "responses": {
            "import datetime\n\ndef add_one_hour(dt):\n    return dt - datetime.timedelta(hours=1)": 0.0,
            "import datetime\n\ndef add_one_hour(dt):\n    return dt + datetime.timedelta(hours=1)": 1.0,
            "import datetime\n\ndef add_one_hour(dt):\n    return dt + datetime.timedelta(hours=2)": 0.0,
            "import datetime\n\ndef add_one_hour(dt):\n    return dt + datetime.timedelta(days=1)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that adds one hour to a given datetime object.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that prints all unique pairs of numbers from two input lists.",
        "input": "Nested loops",
        "responses": {
            "def print_pairs(list1, list2):\n    for num1 in list1:\n        for num2 in list2:\n            print(num1, num1)": 0.0,
            "def print_pairs(list1, list2):\n    for num1 in list1:\n        for num2 in list2:\n            print(num1, list2)": 0.0,
            "def print_pairs(list1, list2):\n    for num1 in list1:\n        for num2 in list2:\n            print(num1 + num2)": 0.0,
            "def print_pairs(list1, list2):\n    for num1 in list1:\n        for num2 in list2:\n            print(num1, num2)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that prints all unique pairs of numbers from two input lists.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program to create a new list consisting of the squares of the elements of an existing list.",
        "input": "List comprehension",
        "responses": {
            "lst = [1, 2, 3, 4, 5]\nsquared_list = [x ** 2 for x in lst]\nprint(squared_list)": 1.0,
            "lst = [1, 2, 3, 4, 5]\nsquared_list = [x * x for x in lst]\nprint(squared_list)": 0.0,
            "lst = [1, 2, 3, 4, 5]\nsquared_list = [x ** 2 for x in lst]\nprint(squared_list[1:])": 0.0,
            "lst = [1, 2, 3, 4, 5]\nsquared_list = [x ** 2 for x in lst]\nprint(squared_list)\nprint(squared_list)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program to create a new list consisting of the squares of the elements of an existing list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to calculate the sum of natural numbers up to a given number using recursion.",
        "input": "Recursion",
        "responses": {
            "def sum_of_natural_numbers(n):\n    if n == 0:\n        return 0\n    else:\n        return n + sum_of_natural_numbers(n-1)": 1.0,
            "def sum_of_natural_numbers(n):\n    if n == 0:\n        return 0\n    else:\n        return n - sum_of_natural_numbers(n-1)": 0.0,
            "def sum_of_natural_numbers(n):\n    if n == 0:\n        return 0\n    else:\n        return n * sum_of_natural_numbers(n-1)": 0.0,
            "def sum_of_natural_numbers(n):\n    if n == 0:\n        return 0\n    else:\n        return n / sum_of_natural_numbers(n-1)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to calculate the sum of natural numbers up to a given number using recursion.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that combines two lists by alternating their elements.",
        "input": "List operations",
        "responses": {
            "def alternate_lists(lst1, lst2):\n    return [val for pair in zip(lst1, lst2) for val in pair if len(lst1) != len(lst2)]": 0.0,
            "def alternate_lists(lst1, lst2):\n    return [val for pair in zip(lst1, lst2) for val in pair if len(lst1) == len(lst2)]": 0.0,
            "def alternate_lists(lst1, lst2):\n    return [val for pair in zip(lst1, lst2) for val in pair if len(lst1) > len(lst2)]": 0.0,
            "def alternate_lists(lst1, lst2):\n    return [val for pair in zip(lst1, lst2) for val in pair]": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that combines two lists by alternating their elements.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to append one list to another.",
        "input": "List operations",
        "responses": {
            "def append_lists(lst1, lst2):\n    lst2.extend(lst1)\n    return lst1": 0.0,
            "def append_lists(lst1, lst2):\n    lst1.append(lst2)\n    return lst1": 0.0,
            "def append_lists(lst1, lst2):\n    lst1.extend(lst2)\n    return lst2": 0.0,
            "def append_lists(lst1, lst2):\n    lst1.extend(lst2)\n    return lst1": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to append one list to another.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns a sublist of a given list from index start (inclusive) to index end (exclusive).",
        "input": "List slicing",
        "responses": {
            "def get_sublist(lst, start, end):\n    return lst[start:end]": 1.0,
            "def get_sublist(lst, start, end):\n    return lst[start-1:end]": 0.0,
            "def get_sublist(lst, start, end):\n    return lst[start:end+1]": 0.0,
            "def get_sublist(lst, start, end):\n    return lst[start:end-1]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns a sublist of a given list from index start (inclusive) to index end (exclusive).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that prints the following pattern:\n*\n**\n***\n****\n*****",
        "input": "Pattern printing",
        "responses": {
            "def print_pattern():\n    for i in range(1, 6):\n        print('*' * i)\n        print('*' * i)": 0.0,
            "def print_pattern():\n    for i in range(1, 6):\n        print('*' * i)": 1.0,
            "def print_pattern():\n    for i in range(1, 6):\n        print('*' * i)\n        print('*' * (i-1))": 0.0,
            "def print_pattern():\n    for i in range(1, 6):\n        print('*' * i)\n        print('*' * (i+1))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that prints the following pattern:\n*\n**\n***\n****\n*****\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that calculates the power of a number.",
        "responses": {
            "def calculate_power(base, exponent):\n    return base + exponent": 0.0,
            "def calculate_power(base, exponent):\n    return base / exponent": 0.0,
            "def calculate_power(base, exponent):\n    return base * exponent": 0.0,
            "def calculate_power(base, exponent):\n    return base ** exponent": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that calculates the power of a number.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that converts a given number of seconds to a time representation in HH:MM:SS format.",
        "responses": {
            "def convert_seconds_to_time(seconds):\n    hours = seconds // 3600\n    minutes = (seconds % 3600) // 60\n    seconds = seconds % 60\n    return f\"{hours}:{minutes:02d}:{seconds:02d}\"": 0.0,
            "def convert_seconds_to_time(seconds):\n    hours = seconds // 3600\n    minutes = (seconds % 3600) // 60\n    seconds = seconds % 60\n    return f\"{hours:02d}:{minutes:02d}:{seconds:02d}\"": 1.0,
            "def convert_seconds_to_time(seconds):\n    hours = seconds // 3600\n    minutes = (seconds % 3600) // 60\n    seconds = seconds % 60\n    return f\"{hours:02d}:{minutes:02d}:{seconds}\"": 0.0,
            "def convert_seconds_to_time(seconds):\n    hours = seconds // 3600\n    minutes = (seconds % 3600) // 60\n    seconds = seconds % 60\n    return f\"{hours:02d}:{minutes}:{seconds:02d}\"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that converts a given number of seconds to a time representation in HH:MM:SS format.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that converts Celsius to Fahrenheit.",
        "responses": {
            "def celsius_to_fahrenheit(celsius):\n    return celsius * 9/5 - 32": 0.0,
            "def celsius_to_fahrenheit(celsius):\n    return celsius * 9/5 + 32 + 1": 0.0,
            "def celsius_to_fahrenheit(celsius):\n    return celsius * 9/5 + 32": 1.0,
            "def celsius_to_fahrenheit(celsius):\n    return celsius * 9/5 + 32 + \"F\"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that converts Celsius to Fahrenheit.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes in a string and reverses the order of the words. The output should be a string with the words in reverse order, separated by a single space.",
        "responses": {
            "def reverse_words(string):\n    words = string.split()\n    return ' '.join(words[::-1])": 1.0,
            "def reverse_words(string):\n    words = string.split()\n    return ' '.join(words[::-1]) + ' '": 0.0,
            "def reverse_words(string):\n    words = string.split()\n    return ' '.join(words[::-1])[:-1]": 0.0,
            "def reverse_words(string):\n    words = string.split()\n    return ' '.join(word[::-1] for word in words[::-1])": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes in a string and reverses the order of the words. The output should be a string with the words in reverse order, separated by a single space.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that finds the index of the first occurrence of an element in a list.",
        "responses": {
            "def find_index(lst, elem):\n    for i in range(len(lst)):\n        if lst[i] == elem:\n            return i+1\n    return -1": 0.0,
            "def find_index(lst, elem):\n    for i in range(len(lst)):\n        if lst[i] = elem:\n            return i\n    return -1": 0.0,
            "def find_index(lst, elem):\n    for i in range(len(lst)):\n        if lst[i] == elem:\n            return i\n        else:\n            return -1": 0.0,
            "def find_index(lst, elem):\n    for i in range(len(lst)):\n        if lst[i] == elem:\n            return i\n    return -1": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that finds the index of the first occurrence of an element in a list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function called \"count_occurrences\" that takes a list and a target element as input and returns the number of occurrences of the target element in the list.",
        "responses": {
            "def count_occurrences(list, target):\n    return list.count(target)": 1.0,
            "def count_occurrences(list, target):\n    return len(target)": 0.0,
            "def count_occurrences(list, target):\n    return 1": 0.0,
            "def count_occurrences(list, target):\n    return sum(target in list)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function called \"count_occurrences\" that takes a list and a target element as input and returns the number of occurrences of the target element in the list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns True if a given string starts with the letter \"A\", and False otherwise.",
        "input": "String operations",
        "responses": {
            "def starts_with_a(s):\n    return s.startswith(\"B\")": 0.0,
            "def starts_with_a(s):\n    return s[0] == \"A\"": 0.0,
            "def starts_with_a(s):\n    return s.startswith(\"A\") == False": 0.0,
            "def starts_with_a(s):\n    return s.startswith(\"A\")": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns True if a given string starts with the letter \"A\", and False otherwise.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a string as input and counts the number of vowels in the string. Vowels are defined as \"a\", \"e\", \"i\", \"o\", and \"u\" (both lowercase and uppercase).",
        "responses": {
            "def count_vowels(s):\n    num_vowels = 0\n    for char in s:\n        if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n            num_vowels += 1\n    return num_vowels": 1.0,
            "def count_vowels(s):\n    num_vowels = 0\n    for char in s:\n        if char.lower() in ['A', 'E', 'I', 'O', 'U']:\n            num_vowels += 1\n    return num_vowels": 0.0,
            "def count_vowels(s):\n    num_vowels = 0\n    for char in s:\n        if char.lower() not in ['a', 'e', 'i', 'o', 'u']:\n            num_vowels += 1\n    return num_vowels": 0.0,
            "def count_vowels(s):\n    num_vowels = 0\n    for char in s:\n        if char.lower() != ['a', 'e', 'i', 'o', 'u']:\n            num_vowels += 1\n    return num_vowels": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a string as input and counts the number of vowels in the string. Vowels are defined as \"a\", \"e\", \"i\", \"o\", and \"u\" (both lowercase and uppercase).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a number is even or odd and returns the corresponding string.",
        "input": "Conditional statements",
        "responses": {
            "def check_even_odd(num):\n    if num % 2 == 0:\n        return \"Odd\"\n    else:\n        return \"Even\"": 0.0,
            "def check_even_odd(num):\n    if num % 2 != 0:\n        return \"Even\"\n    else:\n        return \"Odd\"": 0.0,
            "def check_even_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Even\"": 0.0,
            "def check_even_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a number is even or odd and returns the corresponding string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program to count the number of vowels in a given string. The input string can contain both lowercase and uppercase letters.",
        "responses": {
            "def count_vowels(s):\n    vowels = ['a', 'e', 'i', 'o']\n    s = s.lower()\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count": 0.0,
            "def count_vowels(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = s.upper()\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count": 0.0,
            "def count_vowels(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = s.lower()\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count": 1.0,
            "def count_vowels(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = s.lower()\n    count = 0\n    for char in s:\n        if char not in vowels:\n            count += 1\n    return count": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program to count the number of vowels in a given string. The input string can contain both lowercase and uppercase letters.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a list of numbers is in ascending order.",
        "responses": {
            "def is_ascending(numbers):\n    return numbers == sorted(numbers)": 1.0,
            "def is_ascending(numbers):\n    return numbers == sorted(numbers, reverse=True)": 0.0,
            "def is_ascending(numbers):\n    return numbers == sorted(numbers)[:-1]": 0.0,
            "def is_ascending(numbers):\n    return numbers == sorted(numbers) + [0]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a list of numbers is in ascending order.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that replaces all occurrences of a substring 'old' with a new substring 'new' in a given string.",
        "input": "String operations",
        "responses": {
            "def replace_string(s, old, new):\n    return s.replace(old, '')": 0.0,
            "def replace_string(s, old, new):\n    return s.replace(old, new)": 1.0,
            "def replace_string(s, old, new):\n    return s.replace(new, old)": 0.0,
            "def replace_string(s, old, new):\n    return s.replace(old, old)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that replaces all occurrences of a substring 'old' with a new substring 'new' in a given string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to get the list of keys in a dictionary.",
        "input": "Dictionary operations",
        "responses": {
            "def get_keys(d):\n    return list(d)": 0.0,
            "def get_keys(d):\n    return d.keys()": 0.0,
            "def get_keys(d):\n    return list(d.keys())": 1.0,
            "def get_keys(d):\n    return list(d.values())": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to get the list of keys in a dictionary.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that finds the minimum element in a given list of integers.",
        "responses": {
            "def find_minimum(numbers):\n    return sum(numbers) / len(numbers)": 0.0,
            "def find_minimum(numbers):\n    return max(numbers)": 0.0,
            "def find_minimum(numbers):\n    return min(numbers)": 1.0,
            "def find_minimum(numbers):\n    sorted_numbers = sorted(numbers, reverse=True)\n    return sorted_numbers[-1]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that finds the minimum element in a given list of integers.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a string contains any uppercase letters using regular expressions.",
        "input": "Regular expressions",
        "responses": {
            "import re\n\ndef check_uppercase(string):\n    pattern = \"[A-Z]\"\n    if re.search(pattern, string):\n        return True\n    else:\n        return True": 0.0,
            "import re\n\ndef check_uppercase(string):\n    pattern = \"[A-Z]\"\n    if re.search(pattern, string):\n        return False\n    else:\n        return False": 0.0,
            "import re\n\ndef check_uppercase(string):\n    pattern = \"[A-Z]\"\n    if re.search(pattern, string):\n        return True\n    else:\n        return None": 0.0,
            "import re\n\ndef check_uppercase(string):\n    pattern = \"[A-Z]\"\n    if re.search(pattern, string):\n        return True\n    else:\n        return False": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a string contains any uppercase letters using regular expressions.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a string as input and returns the string with all duplicate characters removed, while maintaining the original order of characters.",
        "input": "String operations",
        "responses": {
            "def remove_duplicates(string):\n    return ''.join(char for i, char in enumerate(string) if char in string[:i])": 0.0,
            "def remove_duplicates(string):\n    return ''.join(char for i, char in enumerate(string) if char not in string[:i])": 1.0,
            "def remove_duplicates(string):\n    return ''.join(char for i, char in enumerate(string) if char in string[i:])": 0.0,
            "def remove_duplicates(string):\n    return ''.join(char for i, char in enumerate(string) if char not in string[i:])": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a string as input and returns the string with all duplicate characters removed, while maintaining the original order of characters.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that multiplies two numbers and has a default value of 1 for the second number.",
        "input": "Function parameters",
        "responses": {
            "def multiply(x, y=1):\n    return x / y": 0.0,
            "def multiply(x, y=1):\n    return x * y": 1.0,
            "def multiply(x, y=1):\n    return x + y": 0.0,
            "def multiply(x, y=1):\n    return x - y": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that multiplies two numbers and has a default value of 1 for the second number.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that checks if a given string is a palindrome (reads the same forwards and backwards).",
        "responses": {
            "def is_palindrome(string):\n    return string[::-1] == string[-1:0]": 0.0,
            "def is_palindrome(string):\n    return string == string[::-1]": 1.0,
            "def is_palindrome(string):\n    return string != string[::-1]": 0.0,
            "def is_palindrome(string):\n    return string == string[::-1][::-1]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that checks if a given string is a palindrome (reads the same forwards and backwards).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function called check_prime that takes an integer as input and checks if it is a prime number. The function should return True if the number is prime, and False otherwise. Assume the input will always be a positive integer.",
        "responses": {
            "def check_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False": 0.0,
            "def check_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True": 1.0,
            "def check_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i != 0:\n            return False\n    return True": 0.0,
            "def check_prime(n):\n    if n > 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return True": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function called check_prime that takes an integer as input and checks if it is a prime number. The function should return True if the number is prime, and False otherwise. Assume the input will always be a positive integer.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of another word or phrase.",
        "responses": {
            "def is_anagram(str1, str2):\n    return sorted(str1.lower()) == sorted(str2.lower())": 1.0,
            "def is_anagram(str1, str2):\n    return sorted(str1.upper()) == sorted(str2.lower())": 0.0,
            "def is_anagram(str1, str2):\n    return sorted(str1.lower()) == sorted(str2.upper())": 0.0,
            "def is_anagram(str1, str2):\n    return sorted(str1.lower()) != sorted(str2.lower())": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of another word or phrase.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a number as input and returns \"positive\" if the number is greater than zero, \"negative\" if the number is less than zero, and \"zero\" if the number is equal to zero.",
        "input": "Conditional statements",
        "responses": {
            "def check_number(num):\n    if num > 0:\n        return \"positive\"\n    elif num < 0:\n        return \"positive\"\n    else:\n        return \"zero\"": 0.0,
            "def check_number(num):\n    if num > 0:\n        return \"positive\"\n    elif num < 0:\n        return \"negative\"\n    else:\n        return \"zero\"": 1.0,
            "def check_number(num):\n    if num > 0:\n        return \"positive\"\n    elif num < 0:\n        return \"zero\"\n    else:\n        return \"positive\"": 0.0,
            "def check_number(num):\n    if num > 0:\n        return \"positive\"\n    elif num < 0:\n        return \"negative\"\n    else:\n        return \"negative\"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a number as input and returns \"positive\" if the number is greater than zero, \"negative\" if the number is less than zero, and \"zero\" if the number is equal to zero.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that performs bitwise AND operation on two given numbers.",
        "input": "Bitwise operations",
        "responses": {
            "def bitwise_and(a, b):\n    return a | b": 0.0,
            "def bitwise_and(a, b):\n    return a ^ b": 0.0,
            "def bitwise_and(a, b):\n    return a & b": 1.0,
            "def bitwise_and(a, b):\n    return a + b": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that performs bitwise AND operation on two given numbers.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that formats a given float number with 2 decimal places.",
        "input": "String formatting",
        "responses": {
            "def format_float(num):\n    return \"{:.2f}\".format(num, 2.0)": 0.0,
            "def format_float(num):\n    return \"{:.2f}\".format(num)": 1.0,
            "def format_float(num):\n    return \"{:.2f}\".format(num, \"2\")": 0.0,
            "def format_float(num):\n    return \"{:.2f}\".format(num, 2)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that formats a given float number with 2 decimal places.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that prints each key-value pair of a dictionary on a new line using a for loop.",
        "input": "Dictionaries and loops",
        "responses": {
            "d = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}\nfor key, value in d:\n    print(key, value)": 0.0,
            "d = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}\nfor key, value in d.items():\n    print(key, value)": 1.0,
            "d = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}\nfor key, value in d.items():\n    print(key)": 0.0,
            "d = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}\nfor key in d:\n    print(key, d[key])": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that prints each key-value pair of a dictionary on a new line using a for loop.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that converts a given number to a string and adds a dollar sign at the beginning.",
        "input": "String formatting",
        "responses": {
            "def add_dollar_sign(num):\n    return \"$\" + str(num) + \"$\"": 0.0,
            "def add_dollar_sign(num):\n    return \"$\" + str(num)": 1.0,
            "def add_dollar_sign(num):\n    return \"$\" + num": 0.0,
            "def add_dollar_sign(num):\n    return \"$\" + str(num) + \"$$\"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that converts a given number to a string and adds a dollar sign at the beginning.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the result of a logical OR operation between two boolean values.",
        "input": "Logical operations",
        "responses": {
            "def logical_or(a, b):\n    return a or not b": 0.0,
            "def logical_or(a, b):\n    return a and b": 0.0,
            "def logical_or(a, b):\n    return not a or b": 0.0,
            "def logical_or(a, b):\n    return a or b": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the result of a logical OR operation between two boolean values.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to flatten a list of lists into a single list.",
        "input": "List manipulation",
        "responses": {
            "def flatten_list(lst):\n    return [item for sublist in lst for item in sublist if isinstance(item, list)]": 0.0,
            "def flatten_list(lst):\n    return [item for sublist in lst for item in sublist]": 1.0,
            "def flatten_list(lst):\n    return [item for sublist in lst]": 0.0,
            "def flatten_list(lst):\n    return [item for sublist in lst if isinstance(sublist, list)]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to flatten a list of lists into a single list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function called calculate_power that takes two integers, base and exponent, as input and calculates the value of base raised to the power of exponent.",
        "responses": {
            "def calculate_power(base, exponent):\n    return base + exponent": 0.0,
            "def calculate_power(base, exponent):\n    return base * exponent": 0.0,
            "def calculate_power(base, exponent):\n    return base / exponent": 0.0,
            "def calculate_power(base, exponent):\n    return base ** exponent": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function called calculate_power that takes two integers, base and exponent, as input and calculates the value of base raised to the power of exponent.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function called is_palindrome that takes a string as input and returns True if the string is a palindrome, and False otherwise. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward, ignoring spaces, punctuation, and capitalization.",
        "responses": {
            "def is_palindrome(string):\n    string = string.lower().replace(\" \", \"\").replace(\"'\", \"\").replace(\",\", \"\").replace(\".\", \"\")\n    return string == string[::-1]": 1.0,
            "def is_palindrome(string):\n    string = string.lower().replace(\" \", \"\").replace(\"'\", \"\").replace(\",\", \"\").replace(\".\", \"\")\n    return string != string[::-1]": 0.0,
            "def is_palindrome(string):\n    string = string.upper().replace(\" \", \"\").replace(\"'\", \"\").replace(\",\", \"\").replace(\".\", \"\")\n    return string == string[::-1]": 0.0,
            "def is_palindrome(string):\n    string = string.lower().replace(\" \", \"\").replace(\"'\", \"\").replace(\",\", \"\").replace(\".\", \"\")\n    return not string == string[::-1]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function called is_palindrome that takes a string as input and returns True if the string is a palindrome, and False otherwise. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward, ignoring spaces, punctuation, and capitalization.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns a sublist from index 2 to index 4 (inclusive) of a given list.",
        "input": "List slicing",
        "responses": {
            "def sublist(lst):\n    return lst[1:4]": 0.0,
            "def sublist(lst):\n    return lst[2:4]": 0.0,
            "def sublist(lst):\n    return lst[2:5]": 1.0,
            "def sublist(lst):\n    return lst[3:6]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns a sublist from index 2 to index 4 (inclusive) of a given list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a class called \"Car\" with a method that returns the color of the car.",
        "input": "Object-oriented programming",
        "responses": {
            "class Car:\n    def __init__(self, color):\n        self.color = color\n\n    def get_color(self):\n        return self.color\n\n    def get_speed(self):\n        return self.speed": 0.0,
            "class Car:\n    def __init__(self, color):\n        self.color = color\n\n    def get_color(self):\n        return self.color\n\n    def get_model(self):\n        return self.model": 0.0,
            "class Car:\n    def __init__(self, color):\n        self.color = color\n\n    def get_color(self):\n        return self.color": 1.0,
            "class Car:\n    def __init__(self, color):\n        self.color = color\n\n    def get_color(self):\n        return self.color\n\n    def set_color(self, new_color):\n        self.color = new_color": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a class called \"Car\" with a method that returns the color of the car.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to generate a random number between a given range.",
        "input": "Random numbers",
        "responses": {
            "import random\n\ndef generate_random_number(start, end):\n    return random.randint(start + 1, end)": 0.0,
            "import random\n\ndef generate_random_number(start, end):\n    return random.randint(start, end)": 1.0,
            "import random\n\ndef generate_random_number(start, end):\n    return random.randint(start, end) + 1": 0.0,
            "import random\n\ndef generate_random_number(start, end):\n    return random.randint(start, end) - 1": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to generate a random number between a given range.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that concatenates two strings with a space in between.",
        "input": "String manipulation",
        "responses": {
            "def concatenate_strings(s1, s2):\n    return s1 + s2": 0.0,
            "def concatenate_strings(s1, s2):\n    return s1 * s2": 0.0,
            "def concatenate_strings(s1, s2):\n    return s1 - s2": 0.0,
            "def concatenate_strings(s1, s2):\n    return s1 + ' ' + s2": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that concatenates two strings with a space in between.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that formats a given number as a percentage with two decimal places and returns the formatted string.",
        "input": "String formatting",
        "responses": {
            "def format_percentage(number):\n    return \"{:.2}\".format(number)": 0.0,
            "def format_percentage(number):\n    return \"{:.2%}\".format(str(number))": 0.0,
            "def format_percentage(number):\n    return \"{:.2%}\".format(number)": 1.0,
            "def format_percentage(number):\n    return \"{:.2%}\".format(int(number))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that formats a given number as a percentage with two decimal places and returns the formatted string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that prints all elements of a list, each on a new line.",
        "input": "Input/output operations",
        "responses": {
            "def print_list(lst):\n    for element in lst:\n        print(element, end=\" \")": 0.0,
            "def print_list(lst):\n    for element in lst:\n        print(element, sep=\"\\n\")": 0.0,
            "def print_list(lst):\n    for element in lst:\n        print(element)": 1.0,
            "def print_list(lst):\n    for element in lst:\n        print(element, sep=\"\")": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that prints all elements of a list, each on a new line.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that retrieves the value of a specific key from a dictionary.",
        "input": "Dictionary operations",
        "responses": {
            "def get_value(dictionary, key):\n    return dictionary.get(key)": 1.0,
            "def get_value(dictionary, key):\n    return dictionary.get(key.lower())": 0.0,
            "def get_value(dictionary, key):\n    return dictionary[key.lower()]": 0.0,
            "def get_value(dictionary, key):\n    return dictionary[key]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that retrieves the value of a specific key from a dictionary.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to find the maximum element in a list.",
        "input": "List operations",
        "responses": {
            "def find_max(lst):\n    max_value = float(\"-inf\")\n    for num in lst:\n        if num >= max_value:\n            max_value = num\n    return max_value": 0.0,
            "def find_max(lst):\n    max_value = float(\"-inf\")\n    for num in lst:\n        if num < max_value:\n            max_value = num\n    return max_value": 0.0,
            "def find_max(lst):\n    max_value = float(\"-inf\")\n    for num in lst:\n        if num > max_value:\n            max_value = num\n    return max_value": 1.0,
            "def find_max(lst):\n    max_value = float(\"-inf\")\n    for num in lst:\n        if num == max_value:\n            max_value = num\n    return max_value": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to find the maximum element in a list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a given string is a pangram (contains all alphabets).",
        "responses": {
            "def is_pangram(string):\n    return len(set(string.lower())) == 25": 0.0,
            "def is_pangram(string):\n    return len(set(string.upper())) == 26": 0.0,
            "def is_pangram(string):\n    return len(set(string.lower())) == 26": 1.0,
            "def is_pangram(string):\n    return len(set(string.lower())) == 27": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a given string is a pangram (contains all alphabets).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function called calculate_power that takes two numbers n and p as input and returns n raised to the power p.",
        "responses": {
            "def calculate_power(n, p):\n    return (n + 1) ** (p + 1)": 0.0,
            "def calculate_power(n, p):\n    return n ** (p+1)": 0.0,
            "def calculate_power(n, p):\n    return n ** p": 1.0,
            "def calculate_power(n, p):\n    return n ** (p - 1)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function called calculate_power that takes two numbers n and p as input and returns n raised to the power p.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to rotate a list by a given number of places.",
        "input": "List operations",
        "responses": {
            "def rotate_list(lst, n):\n    n = n % len(lst)\n    return lst[n:] + lst[:n] + lst[n:] + lst[:n] + lst[n:] + lst[:n]": 0.0,
            "def rotate_list(lst, n):\n    n = n % len(lst)\n    return lst[n:] + lst[:n] + lst[n:] + lst[:n]": 0.0,
            "def rotate_list(lst, n):\n    n = n % len(lst)\n    return lst[n:] + lst[:n]": 1.0,
            "def rotate_list(lst, n):\n    n = n % len(lst)\n    return lst[n:] + lst[:n] + lst[n:] + lst[:n] + lst[n:] + lst[:n] + lst[n:] + lst[:n]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to rotate a list by a given number of places.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a string and returns a dictionary containing the frequency of each letter in the string.",
        "input": "Letter frequency",
        "responses": {
            "def count_letters(s):\n    letter_freq = {}\n    for char in s:\n        if char.isalpha():\n            letter_freq[char.lower()] = letter_freq.get(char.lower(), 0) * 2\n    return letter_freq": 0.0,
            "def count_letters(s):\n    letter_freq = {}\n    for char in s:\n        if char.isalpha():\n            letter_freq[char.lower()] = letter_freq.get(char.lower(), 0) - 1\n    return letter_freq": 0.0,
            "def count_letters(s):\n    letter_freq = {}\n    for char in s:\n        if char.isalpha():\n            letter_freq[char.lower()] = letter_freq.get(char.lower(), 0) + 2\n    return letter_freq": 0.0,
            "def count_letters(s):\n    letter_freq = {}\n    for char in s:\n        if char.isalpha():\n            letter_freq[char.lower()] = letter_freq.get(char.lower(), 0) + 1\n    return letter_freq": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a string and returns a dictionary containing the frequency of each letter in the string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that formats an input string as title case.",
        "input": "String formatting",
        "responses": {
            "def title_case(s):\n    return s.capitalize()": 0.0,
            "def title_case(s):\n    return s.lower()": 0.0,
            "def title_case(s):\n    return s.title()": 1.0,
            "def title_case(s):\n    return s.upper()": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that formats an input string as title case.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a string and returns a new string where each occurrence of the word 'not' is replaced with 'good'.",
        "responses": {
            "def replace_not(string):\n    return string.replace(\"not\", \"gooo\")": 0.0,
            "def replace_not(string):\n    return string.replace(\"not\", \"gud\")": 0.0,
            "def replace_not(string):\n    return string.replace(\"not\", \"gad\")": 0.0,
            "def replace_not(string):\n    return string.replace(\"not\", \"good\")": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a string and returns a new string where each occurrence of the word 'not' is replaced with 'good'.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes an integer n and prints the pattern below:\n1\n22\n333\n4444\n...\nn",
        "input": "Number patterns",
        "responses": {
            "def print_pattern(n):\n    for i in range(1, n+1):\n        print(str(i) * (i+2))": 0.0,
            "def print_pattern(n):\n    for i in range(1, n+1):\n        print(str(i) * (i+1))": 0.0,
            "def print_pattern(n):\n    for i in range(1, n+1):\n        print(str(i) * i)": 1.0,
            "def print_pattern(n):\n    for i in range(1, n+1):\n        print(str(i) * (i-1))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes an integer n and prints the pattern below:\n1\n22\n333\n4444\n...\nn\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to check if a variable is of type string.",
        "input": "Variable manipulation",
        "responses": {
            "def is_string(variable):\n    return isinstance(variable, float)": 0.0,
            "def is_string(variable):\n    return isinstance(variable, str)": 1.0,
            "def is_string(variable):\n    return isinstance(variable, int)": 0.0,
            "def is_string(variable):\n    return isinstance(variable, list)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to check if a variable is of type string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that shuffles a list of numbers and returns the shuffled list.",
        "input": "Random number generation",
        "responses": {
            "import random\n\ndef shuffle_list(lst):\n    random.shuffle(lst)\n    return lst": 1.0,
            "import random\n\ndef shuffle_list(lst):\n    random.shuffle(lst)\n    return lst[1:]": 0.0,
            "import random\n\ndef shuffle_list(lst):\n    random.shuffle(lst)\n    return lst[::-1]": 0.0,
            "import random\n\ndef shuffle_list(lst):\n    random.shuffle(lst)\n    return lst + [0]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that shuffles a list of numbers and returns the shuffled list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes two strings as input and concatenates them into a single string, with a space between them.",
        "input": "String concatenation",
        "responses": {
            "def concatenate_strings(s1, s2):\n    return f\"{s1} {s2}\"": 1.0,
            "def concatenate_strings(s1, s2):\n    return s1 - s2": 0.0,
            "def concatenate_strings(s1, s2):\n    return f\"{s1}{s2}\"": 0.0,
            "def concatenate_strings(s1, s2):\n    return s1 + s2": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes two strings as input and concatenates them into a single string, with a space between them.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that takes in two numbers a and b, and prints \"a is greater\" if a is greater than b, \"b is greater\" if b is greater than a, and \"both are equal\" if both numbers are equal.",
        "input": "if statements",
        "responses": {
            "def compare_numbers(a, b):\n    if a > b:\n        print(\"a is greater\")\n    elif b > a:\n        print(\"b is greater\")\n    else:\n        print(\"both are equal\")\n        print(\"a is equal to b\")": 0.0,
            "def compare_numbers(a, b):\n    if a > b:\n        print(\"a is greater\")\n    elif b > a:\n        print(\"b is greater\")\n    else:\n        print(\"both are equal\")\n        print(\"a is greater\")": 0.0,
            "def compare_numbers(a, b):\n    if a > b:\n        print(\"a is greater\")\n    elif b > a:\n        print(\"b is greater\")\n    else:\n        print(\"both are equal\")": 1.0,
            "def compare_numbers(a, b):\n    if a > b:\n        print(\"a is greater\")\n    elif b > a:\n        print(\"b is greater\")\n    else:\n        print(\"both are equal\")\n        print(\"This is an extra line that shouldn't be here.\")": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that takes in two numbers a and b, and prints \"a is greater\" if a is greater than b, \"b is greater\" if b is greater than a, and \"both are equal\" if both numbers are equal.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that repeats a given string n times and returns the concatenated result.",
        "responses": {
            "def repeat_string(string, n):\n    return string * (n + 1)": 0.0,
            "def repeat_string(string, n):\n    return string + n": 0.0,
            "def repeat_string(string, n):\n    return string * n": 1.0,
            "def repeat_string(string, n):\n    return string * (n - 1)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that repeats a given string n times and returns the concatenated result.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to check if a number x is a prime number (greater than 1 and not divisible by any number other than 1 and itself).",
        "input": "Prime numbers",
        "responses": {
            "def is_prime(x):\n    if x <= 1:\n        return True\n    for i in range(2, int(x**0.5)+1):\n        if x % i == 0:\n            return True\n    return False": 0.0,
            "def is_prime(x):\n    if x <= 1:\n        return True\n    for i in range(2, int(x**0.5)+1):\n        if x % i == 0:\n            return True\n    return True": 0.0,
            "def is_prime(x):\n    if x <= 1:\n        return True\n    for i in range(2, int(x**0.5)+1):\n        if x % i != 0:\n            return True\n    return False": 0.0,
            "def is_prime(x):\n    if x <= 1:\n        return False\n    for i in range(2, int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    return True": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to check if a number x is a prime number (greater than 1 and not divisible by any number other than 1 and itself).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function called square_elements that takes a list of integers nums as input and returns a new list that contains the square of each element in nums.",
        "responses": {
            "def square_elements(nums):\n    return [num*num+1 for num in nums]": 0.0,
            "def square_elements(nums):\n    return [num**(1/2) for num in nums]": 0.0,
            "def square_elements(nums):\n    return [num**2 for num in nums]": 1.0,
            "def square_elements(nums):\n    return [nums[i]**2 for i in range(len(nums))]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function called square_elements that takes a list of integers nums as input and returns a new list that contains the square of each element in nums.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a class that represents a person with a name and age attribute.",
        "input": "Classes",
        "responses": {
            "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age": 1.0,
            "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        self.gender = None": 0.0,
            "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        self.name = age": 0.0,
            "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        self.address = \"\"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a class that represents a person with a name and age attribute.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if both given boolean values are True.",
        "input": "Boolean operations",
        "responses": {
            "def both_true(value1, value2):\n    return not value1 and value2": 0.0,
            "def both_true(value1, value2):\n    return value1 or value2": 0.0,
            "def both_true(value1, value2):\n    return value1 and value2": 1.0,
            "def both_true(value1, value2):\n    return value1 and not value2": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if both given boolean values are True.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a given email address is valid according to a simple validation rule (e.g., must contain an '@' symbol).",
        "input": "Data validation",
        "responses": {
            "def is_valid_email(email):\n    return email.count('@') > 1": 0.0,
            "def is_valid_email(email):\n    return '@' in email": 1.0,
            "def is_valid_email(email):\n    return email.startswith('@')": 0.0,
            "def is_valid_email(email):\n    return email.endswith('@')": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a given email address is valid according to a simple validation rule (e.g., must contain an '@' symbol).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that converts a string representation of an integer to an actual integer.",
        "input": "Data type conversion",
        "responses": {
            "def str_to_int(s):\n    return int(s)": 1.0,
            "def str_to_int(s):\n    return int(s[::-1])": 0.0,
            "def str_to_int(s):\n    return int(s) + 1": 0.0,
            "def str_to_int(s):\n    return int(s.replace('0', 'O'))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that converts a string representation of an integer to an actual integer.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that removes duplicate values from a given list, while maintaining the original order.",
        "input": "list operations",
        "responses": {
            "def remove_duplicates(lst):\n    return list(dict.fromkeys(lst))": 1.0,
            "def remove_duplicates(lst):\n    return list(set(lst))": 0.0,
            "def remove_duplicates(lst):\n    return list(lst)": 0.0,
            "def remove_duplicates(lst):\n    return lst[::-1]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that removes duplicate values from a given list, while maintaining the original order.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program to remove all duplicates from a list and return the list without duplicates.",
        "responses": {
            "def remove_duplicates(lst):\n    return list(set(lst)) + list(set(lst))": 0.0,
            "def remove_duplicates(lst):\n    return list(set(lst)) * 2": 0.0,
            "def remove_duplicates(lst):\n    return list(set(lst))": 1.0,
            "def remove_duplicates(lst):\n    return list(set(lst)) - list(set(lst))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program to remove all duplicates from a list and return the list without duplicates.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a given year is a leap year. A leap year occurs every four years to help synchronize the calendar year with the solar year, or the length of time it takes the earth to complete its orbit around the sun, which is about 365.25 days.",
        "responses": {
            "def is_leap_year(year):\n    return year % 4 != 0 and (year % 100 != 0 or year % 400 == 0)": 0.0,
            "def is_leap_year(year):\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)": 1.0,
            "def is_leap_year(year):\n    return year % 4 == 0 and (year % 100 != 0 and year % 400 == 0)": 0.0,
            "def is_leap_year(year):\n    return year % 4 == 0 or (year % 100 != 0 or year % 400 == 0)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a given year is a leap year. A leap year occurs every four years to help synchronize the calendar year with the solar year, or the length of time it takes the earth to complete its orbit around the sun, which is about 365.25 days.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to reverse the order of a given list.",
        "input": "List operations",
        "responses": {
            "def reverse_list(lst):\n    return lst[::-1]": 1.0,
            "def reverse_list(lst):\n    return lst[1::]": 0.0,
            "def reverse_list(lst):\n    return lst[::1]": 0.0,
            "def reverse_list(lst):\n    return lst[::-2]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to reverse the order of a given list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that generates a list of even numbers from 1 to n.",
        "responses": {
            "def generate_even_numbers(n):\n    return [i for i in range(2, n+1, 2)]": 1.0,
            "def generate_even_numbers(n):\n    return [i for i in range(1, n+1, 2)]": 0.0,
            "def generate_even_numbers(n):\n    return [i for i in range(1, n+1, -2)]": 0.0,
            "def generate_even_numbers(n):\n    return [i for i in range(2, n+1, -2)]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that generates a list of even numbers from 1 to n.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function called unique_elements that takes a list of integers nums as input and returns a new list that contains only the unique elements of nums (i.e., elements that appear only once). The order of the elements in the output list does not matter.",
        "responses": {
            "def unique_elements(nums):\n    return list(filter(lambda x: nums.count(x) > 1, nums))": 0.0,
            "def unique_elements(nums):\n    return list(filter(lambda x: nums.count(x) == 1, nums))": 1.0,
            "def unique_elements(nums):\n    return list(filter(lambda x: nums.append(x) == 1, nums))": 0.0,
            "def unique_elements(nums):\n    return list(filter(lambda x: nums.count(x) == 0, nums))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function called unique_elements that takes a list of integers nums as input and returns a new list that contains only the unique elements of nums (i.e., elements that appear only once). The order of the elements in the output list does not matter.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to get the value corresponding to a given key from a dictionary.",
        "input": "Working with dictionaries",
        "responses": {
            "def get_value(dictionary, key):\n    try:\n        return dictionary[key]\n    except KeyError:\n        return None": 0.0,
            "def get_value(dictionary, key):\n    return dictionary.get(key)": 0.0,
            "def get_value(dictionary, key):\n    return dictionary[key]": 1.0,
            "def get_value(dictionary, key):\n    if key in dictionary:\n        return dictionary[key]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to get the value corresponding to a given key from a dictionary.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that extracts a substring from a given string.",
        "input": "String slicing",
        "responses": {
            "def extract_substring(s, start, end):\n    return s[start:end]": 1.0,
            "def extract_substring(s, start, end):\n    return s[start:end-1]": 0.0,
            "def extract_substring(s, start, end):\n    return s[start+1:end+1]": 0.0,
            "def extract_substring(s, start, end):\n    return s[start-1:end]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that extracts a substring from a given string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a dictionary contains a specific key.",
        "input": "Dictionary operations",
        "responses": {
            "def contains_key(d, key):\n    return key not in d": 0.0,
            "def contains_key(d, key):\n    return d.get(key) is not None": 0.0,
            "def contains_key(d, key):\n    return d.has_key(key)": 0.0,
            "def contains_key(d, key):\n    return key in d": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a dictionary contains a specific key.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes an age as input and returns \"Adult\" if the age is 18 or older, and \"Child\" otherwise.",
        "input": "Conditional statements",
        "responses": {
            "def determine_age_category(age):\n    return \"Adult\" if age <= 18 else \"Child\"": 0.0,
            "def determine_age_category(age):\n    return \"Adult\" if age > 18 else \"Child\"": 0.0,
            "def determine_age_category(age):\n    return \"Adult\" if age == 18 else \"Child\"": 0.0,
            "def determine_age_category(age):\n    return \"Adult\" if age >= 18 else \"Child\"": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes an age as input and returns \"Adult\" if the age is 18 or older, and \"Child\" otherwise.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to send an HTTP GET request to a given URL and return the response status code.",
        "input": "API integration",
        "responses": {
            "import requests\n\ndef send_get_request(url):\n    response = requests.get(url)\n    return response.headers": 0.0,
            "import requests\n\ndef send_get_request(url):\n    response = requests.get(url)\n    return response.content": 0.0,
            "import requests\n\ndef send_get_request(url):\n    response = requests.get(url)\n    return response.status_code": 1.0,
            "import requests\n\ndef send_get_request(url):\n    response = requests.post(url)\n    return response.status_code": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to send an HTTP GET request to a given URL and return the response status code.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a class called \"Student\" with attributes \"name\" and \"age\".",
        "input": "Class definition",
        "responses": {
            "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        self.grade = \"A\"": 0.0,
            "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age": 1.0,
            "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        self.grade = 0": 0.0,
            "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        self.grade = None": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a class called \"Student\" with attributes \"name\" and \"age\".\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the reverse of a given string using string slicing.",
        "input": "String slicing",
        "responses": {
            "def reverse_string(s):\n    return s[1:][::-1]": 0.0,
            "def reverse_string(s):\n    return s[::1]": 0.0,
            "def reverse_string(s):\n    return s[::-1][1:]": 0.0,
            "def reverse_string(s):\n    return s[::-1]": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the reverse of a given string using string slicing.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that removes all whitespace characters from a string.",
        "responses": {
            "def remove_whitespace(string):\n    return string.replace(\" \", \"\").replace(\"\\t\", \"\").replace(\"\\n\", \"\").replace(\"\\r\", \"\").replace(\"\\v\", \"\").replace(\"\\f\", \"\")": 0.0,
            "def remove_whitespace(string):\n    return string.replace(\" \", \"\").replace(\"\\t\", \"\").replace(\"\\n\", \"\")": 1.0,
            "def remove_whitespace(string):\n    return string.replace(\" \", \"\").replace(\"\\t\", \"\").replace(\"\\n\", \"\").replace(\"\\r\", \"\").replace(\"\\v\", \"\")": 0.0,
            "def remove_whitespace(string):\n    return string.replace(\" \", \"\").replace(\"\\t\", \"\").replace(\"\\n\", \"\").replace(\"\\r\", \"\")": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that removes all whitespace characters from a string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to check if all elements in a list are even.",
        "input": "List operations",
        "responses": {
            "def are_all_even(lst):\n    return all(element % 2 == 1 for element in lst)": 0.0,
            "def are_all_even(lst):\n    return all(element % 2 == 0 for element in lst if element % 2 != 0)": 0.0,
            "def are_all_even(lst):\n    return all(element % 2 == 0 for element in lst)": 1.0,
            "def are_all_even(lst):\n    return all(element % 2 == 0 for element in lst if element % 2 == 1)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to check if all elements in a list are even.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that calculates the factorial of a non-negative integer and returns the result.",
        "responses": {
            "def factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result": 1.0,
            "def factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n+1):\n        result += i\n    return result": 0.0,
            "def factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n+1):\n        result /= i\n    return result": 0.0,
            "def factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n+1):\n        result -= i\n    return result": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that calculates the factorial of a non-negative integer and returns the result.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function called sum_digits that takes in an integer and returns the sum of its digits. Assume the input is always a positive integer.",
        "responses": {
            "def sum_digits(n):\n    return sum(int(digit) for digit in str(n) if digit.isdigit())": 0.0,
            "def sum_digits(n):\n    return sum(int(digit) for digit in str(n) if digit.isnumeric())": 0.0,
            "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))": 1.0,
            "def sum_digits(n):\n    return sum(int(digit) for digit in str(n) if digit.isdecimal())": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function called sum_digits that takes in an integer and returns the sum of its digits. Assume the input is always a positive integer.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that creates a new array with elements from an existing array that satisfy a specific condition.",
        "input": "Array operations",
        "responses": {
            "def filter_array(arr, condition):\n    return [x for x in arr if condition(x) if x]": 0.0,
            "def filter_array(arr, condition):\n    return [x for x in arr if condition(x) if not x]": 0.0,
            "def filter_array(arr, condition):\n    return [x for x in arr if condition(x)]": 1.0,
            "def filter_array(arr, condition):\n    return [x for x in arr if condition(x) else None]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that creates a new array with elements from an existing array that satisfy a specific condition.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that prints the numbers from 1 to n (inclusive) where n is provided as an argument.",
        "input": "Loops",
        "responses": {
            "def print_numbers(n):\n    for i in range(1, n):\n        print(i)": 0.0,
            "def print_numbers(n):\n    for i in range(1, n+1):\n        print(i, end=\" \")": 0.0,
            "def print_numbers(n):\n    for i in range(1, n+1):\n        print(i)": 1.0,
            "def print_numbers(n):\n    for i in range(n, 0, -1):\n        print(i)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that prints the numbers from 1 to n (inclusive) where n is provided as an argument.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes two numbers as inputs and returns their division. If the division is not possible (division by zero), return None.",
        "input": "Error handling",
        "responses": {
            "def divide(a, b):\n    try:\n        return a / b\n    except TypeError:\n        return None": 0.0,
            "def divide(a, b):\n    try:\n        return a / b\n    except:\n        return None": 0.0,
            "def divide(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        return None": 1.0,
            "def divide(a, b):\n    try:\n        return a * b\n    except ZeroDivisionError:\n        return None": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes two numbers as inputs and returns their division. If the division is not possible (division by zero), return None.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the maximum value in a dictionary.\nNote: The values of the dictionary are guaranteed to be numeric.",
        "input": "Data structures",
        "responses": {
            "def get_max_value(dictionary):\n    return max(dictionary)": 0.0,
            "def get_max_value(dictionary):\n    return max(dictionary.values())": 1.0,
            "def get_max_value(dictionary):\n    return max(dictionary.keys())": 0.0,
            "def get_max_value(dictionary):\n    return max(dictionary.items())": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the maximum value in a dictionary.\nNote: The values of the dictionary are guaranteed to be numeric.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that takes an input string and reverses it.",
        "responses": {
            "def reverse_string(input_str):\n    return input_str[::-1]": 1.0,
            "def reverse_string(input_str):\n    return input_str[::1]": 0.0,
            "def reverse_string(input_str):\n    return input_str[1::-1]": 0.0,
            "def reverse_string(input_str):\n    return input_str[1:][::-1]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that takes an input string and reverses it.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that removes all negative numbers from a list of integers.",
        "input": "List filtering",
        "responses": {
            "def remove_negatives(lst):\n    return [x for x in lst if x != 0]": 0.0,
            "def remove_negatives(lst):\n    return [x for x in lst if x >= 0]": 1.0,
            "def remove_negatives(lst):\n    return [x for x in lst if x > 0]": 0.0,
            "def remove_negatives(lst):\n    return [x for x in lst if x != -1]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that removes all negative numbers from a list of integers.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that calculates the nth number in the Fibonacci sequence using recursion.",
        "input": "Recursion",
        "responses": {
            "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)": 1.0,
            "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) * fibonacci(n-2)": 0.0,
            "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) - fibonacci(n-2)": 0.0,
            "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) / fibonacci(n-2)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that calculates the nth number in the Fibonacci sequence using recursion.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that prompts the user for a string and an integer, and returns the repeated concatenation of the string a given number of times.",
        "input": "Input/output",
        "responses": {
            "def repeat_string():\n    string = input(\"Enter a string: \")\n    num = int(input(\"Enter a number: \"))\n    return string + str(num)": 0.0,
            "def repeat_string():\n    string = input(\"Enter a string: \")\n    num = input(\"Enter a number: \")\n    return string * num": 0.0,
            "def repeat_string():\n    string = input(\"Enter a string: \")\n    num = int(input(\"Enter a number: \"))\n    return string + num": 0.0,
            "def repeat_string():\n    string = input(\"Enter a string: \")\n    num = int(input(\"Enter a number: \"))\n    return string * num": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that prompts the user for a string and an integer, and returns the repeated concatenation of the string a given number of times.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Given a list of integers, write a function called zeros_to_end that moves all the 0's in the list to the end while maintaining the relative order of the non-zero elements.",
        "responses": {
            "def zeros_to_end(nums):\n    count = nums.count(0)\n    nums = [num for num in nums if num != 0]\n    nums.extend([0]*count)\n    return nums": 1.0,
            "def zeros_to_end(nums):\n    count = nums.count(0)\n    nums = [num for num in nums if num != 0]\n    nums.append(0)*count)\n    return nums": 0.0,
            "def zeros_to_end(nums):\n    count = nums.count(0)\n    nums = [num for num in nums if num != 0]\n    nums.append([0]*count)\n    return nums": 0.0,
            "def zeros_to_end(nums):\n    count = nums.count(0)\n    nums = [num for num in nums if num != 0]\n    nums = nums + [0]*count\n    return nums": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nGiven a list of integers, write a function called zeros_to_end that moves all the 0's in the list to the end while maintaining the relative order of the non-zero elements.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that finds the average of all elements in a given list and returns the average as a float.",
        "input": "List operations",
        "responses": {
            "def find_average(lst):\n    return sum(lst) / (len(lst) + 1)": 0.0,
            "def find_average(lst):\n    return sum(lst) / len(lst)": 1.0,
            "def find_average(lst):\n    return sum(lst) / len(lst) + 1": 0.0,
            "def find_average(lst):\n    return sum(lst) / (len(lst) - 1)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that finds the average of all elements in a given list and returns the average as a float.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to remove duplicate elements from a list while preserving the order of the original list.",
        "input": "List operations",
        "responses": {
            "def remove_duplicates(lst):\n    return list(lst)": 0.0,
            "def remove_duplicates(lst):\n    return list(dict.fromkeys(lst[::-1]))": 0.0,
            "def remove_duplicates(lst):\n    return list(dict.fromkeys(lst))": 1.0,
            "def remove_duplicates(lst):\n    return list(set(lst))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to remove duplicate elements from a list while preserving the order of the original list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that asks the user for their age and checks if it is a valid positive integer.",
        "input": "Input validation",
        "responses": {
            "def validate_age():\n    while True:\n        age = input(\"Enter your age: \")\n        if age.isdigit() and int(age) > 0:\n            return int(age)\n        else:\n            print(\"Invalid age. Please enter a valid positive integer.\")\n            return -1": 0.0,
            "def validate_age():\n    while True:\n        age = input(\"Enter your age: \")\n        if age.isdigit() and int(age) > 0:\n            return int(age)\n        else:\n            print(\"Invalid age. Please enter a valid positive integer.\")\n            return age": 0.0,
            "def validate_age():\n    while True:\n        age = input(\"Enter your age: \")\n        if age.isdigit() and int(age) > 0:\n            return int(age)\n        else:\n            print(\"Invalid age. Please enter a valid positive integer.\")": 1.0,
            "def validate_age():\n    while True:\n        age = input(\"Enter your age: \")\n        if age.isdigit() and int(age) > 0:\n            return int(age)\n        else:\n            print(\"Invalid age. Please enter a valid positive integer.\")\n            return None": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that asks the user for their age and checks if it is a valid positive integer.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that sorts a given list in ascending order.",
        "responses": {
            "def sort_list(lst):\n    return sorted(lst, reverse=True)": 0.0,
            "def sort_list(lst):\n    return sorted(lst, key=len)": 0.0,
            "def sort_list(lst):\n    return sorted(lst, key=str.lower)": 0.0,
            "def sort_list(lst):\n    return sorted(lst)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that sorts a given list in ascending order.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that calculates the days remaining until a given date.",
        "input": "Date and time",
        "responses": {
            "import datetime\n\ndef days_until(given_date):\n    current_date = datetime.datetime.now().date()\n    return (given_date - current_date).seconds": 0.0,
            "import datetime\n\ndef days_until(given_date):\n    current_date = datetime.datetime.now().date()\n    return (given_date - current_date).months": 0.0,
            "import datetime\n\ndef days_until(given_date):\n    current_date = datetime.datetime.now().date()\n    return (given_date - current_date).hours": 0.0,
            "import datetime\n\ndef days_until(given_date):\n    current_date = datetime.datetime.now().date()\n    return (given_date - current_date).days": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that calculates the days remaining until a given date.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the sublist of a given list, starting from the third element to the end of the list.",
        "input": "List slicing",
        "responses": {
            "def get_sublist(lst):\n    return lst[2:]": 1.0,
            "def get_sublist(lst):\n    return lst[1:]": 0.0,
            "def get_sublist(lst):\n    return lst[2:-1]": 0.0,
            "def get_sublist(lst):\n    return lst[3:]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the sublist of a given list, starting from the third element to the end of the list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that calculates the circumference of a circle. The program should take the radius as input and return the calculated circumference. Use the value of pi as 3.14159.",
        "responses": {
            "def calculate_circumference(radius):\n    pi = 3.14159\n    return 2 * pi * radius": 1.0,
            "def calculate_circumference(radius):\n    pi = 3.14\n    return 2 * pi * radius": 0.0,
            "def calculate_circumference(radius):\n    pi = 3.14159\n    return 2 * pi + radius": 0.0,
            "def calculate_circumference(radius):\n    return 2 * pi * radius": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that calculates the circumference of a circle. The program should take the radius as input and return the calculated circumference. Use the value of pi as 3.14159.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function called binary_to_decimal that takes in a binary string (e.g., \"1011\") and returns the equivalent decimal number.",
        "responses": {
            "def binary_to_decimal(binary_str):\n    decimal = 0\n    for i in range(len(binary_str)):\n        decimal += int(binary_str[i]) * 2**(len(binary_str) - i)\n    return decimal": 0.0,
            "def binary_to_decimal(binary_str):\n    decimal = 0\n    for i in range(len(binary_str)):\n        decimal += int(binary_str[i]) * 2**(len(binary_str) - i - 1)\n    return decimal": 1.0,
            "def binary_to_decimal(binary_str):\n    decimal = 0\n    for i in range(len(binary_str)):\n        decimal += int(binary_str[i]) * 2**(len(binary_str) - i + 1)\n    return decimal": 0.0,
            "def binary_to_decimal(binary_str):\n    decimal = 0\n    for i in range(len(binary_str)):\n        decimal += int(binary_str[i]) * 2**(len(binary_str) - i - 2)\n    return decimal": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function called binary_to_decimal that takes in a binary string (e.g., \"1011\") and returns the equivalent decimal number.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that handles an exception when dividing a number by zero and prints \"Error: Division by zero is not allowed.\"",
        "input": "Exception handling",
        "responses": {
            "try:\n    result = num1 / num2\n    print(result)\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed.\")\nexcept ArithmeticError:\n    print(\"An arithmetic error occurred.\")": 0.0,
            "try:\n    result = num1 / num2\n    print(result)\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed.\")\nexcept Exception as e:\n    print(\"An error occurred:\", e)": 0.0,
            "try:\n    result = num1 / num2\n    print(result)\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed.\")": 1.0,
            "try:\n    result = num1 / num2\n    print(result)\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero is not allowed.\")\nexcept:\n    print(\"Oops! Something went wrong.\")": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that handles an exception when dividing a number by zero and prints \"Error: Division by zero is not allowed.\"\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to print a pattern using asterisks (*) in the given format: 1, 22, 333, 4444, ...",
        "input": "pattern printing",
        "responses": {
            "def print_pattern(n):\n    for i in range(1, n+1):\n        print(str(i) * (i-1))": 0.0,
            "def print_pattern(n):\n    for i in range(1, n+1):\n        print(str(i) * (i+2))": 0.0,
            "def print_pattern(n):\n    for i in range(1, n+1):\n        print(str(i) * i)": 1.0,
            "def print_pattern(n):\n    for i in range(1, n+1):\n        print(str(i) * (i+1))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to print a pattern using asterisks (*) in the given format: 1, 22, 333, 4444, ...\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks whether a string is a valid email address (contains '@' and '.') and returns True if it is, False otherwise.",
        "input": "Data validation",
        "responses": {
            "def is_valid_email(email):\n    return '@' in email and '.' not in email": 0.0,
            "def is_valid_email(email):\n    return '@' not in email and '.' not in email": 0.0,
            "def is_valid_email(email):\n    return '@' in email or '.' in email": 0.0,
            "def is_valid_email(email):\n    return '@' in email and '.' in email": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks whether a string is a valid email address (contains '@' and '.') and returns True if it is, False otherwise.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that reverses the elements of an array.",
        "input": "Array manipulation",
        "responses": {
            "def reverse_array(arr):\n    return arr.reverse()": 0.0,
            "def reverse_array(arr):\n    return arr[::-1]": 1.0,
            "def reverse_array(arr):\n    return arr[-1::-1]": 0.0,
            "def reverse_array(arr):\n    return arr[1:][::-1]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that reverses the elements of an array.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that counts the number of elements in a list that are greater than a given value.",
        "input": "list operations",
        "responses": {
            "def count_greater_than(lst, value):\n    return len([x for x in lst if x < value])": 0.0,
            "def count_greater_than(lst, value):\n    return len([x for x in lst if x > value])": 1.0,
            "def count_greater_than(lst, value):\n    return len([x for x in lst if x == value])": 0.0,
            "def count_greater_than(lst, value):\n    return len([x for x in lst if x >= value])": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that counts the number of elements in a list that are greater than a given value.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the minimum and maximum values in a given list, respectively.",
        "input": "List operations",
        "responses": {
            "def get_min_max(lst):\n    return max(lst), min(lst)": 0.0,
            "def get_min_max(lst):\n    return max(lst), max(lst)": 0.0,
            "def get_min_max(lst):\n    return min(lst), min(lst)": 0.0,
            "def get_min_max(lst):\n    return min(lst), max(lst)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the minimum and maximum values in a given list, respectively.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that converts a temperature from Celsius to Fahrenheit. Return the converted temperature.",
        "responses": {
            "def celsius_to_fahrenheit(celsius):\n    return (celsius * 9/5) / 32": 0.0,
            "def celsius_to_fahrenheit(celsius):\n    return (celsius * 9/5) - 32": 0.0,
            "def celsius_to_fahrenheit(celsius):\n    return (celsius * 9/5) * 32": 0.0,
            "def celsius_to_fahrenheit(celsius):\n    return (celsius * 9/5) + 32": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that converts a temperature from Celsius to Fahrenheit. Return the converted temperature.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that takes a list of integers as input and returns a new list with only the prime numbers from the input list. The output list should maintain the relative order of the numbers from the input list.",
        "responses": {
            "def get_prime_numbers(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return True\n        return False\n    return [x for x in lst if is_prime(x)]": 0.0,
            "def get_prime_numbers(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return [x for x in lst if is_prime(x)]": 1.0,
            "def get_prime_numbers(lst):\n    def is_prime(n):\n        if n < 2:\n            return True\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return False\n    return [x for x in lst if is_prime(x)]": 0.0,
            "def get_prime_numbers(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return True\n        return True\n    return [x for x in lst if is_prime(x)]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that takes a list of integers as input and returns a new list with only the prime numbers from the input list. The output list should maintain the relative order of the numbers from the input list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that prints all even numbers from 1 to n, where n is a parameter passed to the function.",
        "input": "Looping",
        "responses": {
            "def print_even_numbers(n):\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            print(i)": 0.0,
            "def print_even_numbers(n):\n    for i in range(1, n):\n        if i % 2 == 0:\n            print(i)": 0.0,
            "def print_even_numbers(n):\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            print(i)": 1.0,
            "def print_even_numbers(n):\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            print(i, end=\" \")": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that prints all even numbers from 1 to n, where n is a parameter passed to the function.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the square root of a given number.",
        "responses": {
            "import math\n\ndef square_root(num):\n    return math.sqrt(num) + 1": 0.0,
            "import math\n\ndef square_root(num):\n    return math.sqrt(num) - 1": 0.0,
            "import math\n\ndef square_root(num):\n    return math.sqrt(num)": 1.0,
            "import math\n\ndef square_root(num):\n    return math.sqrt(num) * 2": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the square root of a given number.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes two sets as input and returns a new set that contains common elements between the two sets.",
        "input": "Set operations",
        "responses": {
            "def get_common_elements(set1, set2):\n    return set1.intersection(set2)": 1.0,
            "def get_common_elements(set1, set2):\n    return set1.union(set2)": 0.0,
            "def get_common_elements(set1, set2):\n    return set1.symmetric_difference(set2)": 0.0,
            "def get_common_elements(set1, set2):\n    return set1.difference(set2)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes two sets as input and returns a new set that contains common elements between the two sets.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if all characters in a string are uppercase.",
        "input": "String operations",
        "responses": {
            "def is_uppercase(string):\n    return string.isnumeric()": 0.0,
            "def is_uppercase(string):\n    return string.islower()": 0.0,
            "def is_uppercase(string):\n    return string.upper()": 0.0,
            "def is_uppercase(string):\n    return string.isupper()": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if all characters in a string are uppercase.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to square each number in a given list and return the resulting list.",
        "input": "List comprehension",
        "responses": {
            "def square_numbers(lst):\n    return [x ** 2 for x in lst]": 1.0,
            "def square_numbers(lst):\n    return [x ** 2 for x in set(lst)]": 0.0,
            "def square_numbers(lst):\n    return [x ** 2 for x in lst if isinstance(x, int)]": 0.0,
            "def square_numbers(lst):\n    return [x * x for x in lst]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to square each number in a given list and return the resulting list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes user input as an integer and handles any ValueError exceptions.",
        "input": "Exception handling",
        "responses": {
            "def get_integer():\n    while True:\n        try:\n            num = int(input(\"Enter an integer: \"))\n            return num\n        except:\n            print(\"Invalid input. Please try again.\")": 0.0,
            "def get_integer():\n    while True:\n        try:\n            num = int(input(\"Enter an integer: \"))\n            return num\n        except ValueError:\n            print(\"Invalid input. Please try again\")\n            return num": 0.0,
            "def get_integer():\n    while True:\n        try:\n            num = int(input(\"Enter an integer: \"))\n            return num\n        except ValueError:\n            print(\"Invalid input. Please try again.\")": 1.0,
            "def get_integer():\n    while True:\n        try:\n            num = input(\"Enter an integer: \")\n            return num\n        except ValueError:\n            print(\"Invalid input. Please try again.\")": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes user input as an integer and handles any ValueError exceptions.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to check if two lists are equal. The function should take two lists as input and return True if the lists are equal, and False otherwise.",
        "responses": {
            "def are_lists_equal(list1, list2):\n    return list1 == list2": 1.0,
            "def are_lists_equal(list1, list2):\n    return list1 is list2": 0.0,
            "def are_lists_equal(list1, list2):\n    return list1 != list2": 0.0,
            "def are_lists_equal(list1, list2):\n    return set(list1) == set(list2)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to check if two lists are equal. The function should take two lists as input and return True if the lists are equal, and False otherwise.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that calls a specific API endpoint and returns the JSON response.",
        "input": "APIs",
        "responses": {
            "import requests\ndef call_api(endpoint):\n    response = requests.post(endpoint)\n    return response.json()": 0.0,
            "import requests\ndef call_api(endpoint):\n    response = requests.get(endpoint)\n    return response.text()": 0.0,
            "import requests\ndef call_api(endpoint):\n    response = requests.get(endpoint)\n    return response.json()": 1.0,
            "import requests\ndef call_api(endpoint):\n    response = requests.get(endpoint)\n    return response.json().text()": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that calls a specific API endpoint and returns the JSON response.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that truncates a string to a specified length and appends '...' if it exceeds the length.",
        "input": "string formatting",
        "responses": {
            "def truncate_string(string, length):\n    if len(string) <= length:\n        return string\n    else:\n        return string[:length] + '..'": 0.0,
            "def truncate_string(string, length):\n    if len(string) <= length:\n        return string\n    else:\n        return string[:length] + '...'": 1.0,
            "def truncate_string(string, length):\n    if len(string) <= length:\n        return string\n    else:\n        return string[:length] + '.'": 0.0,
            "def truncate_string(string, length):\n    if len(string) <= length:\n        return string\n    else:\n        return string[length:] + '...'": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that truncates a string to a specified length and appends '...' if it exceeds the length.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to get the value of a specific key from a dictionary, and return a default value if the key is not present.",
        "input": "Dictionary operations",
        "responses": {
            "def get_value(dictionary, key, default_value):\n    return dictionary.get(key, default_value)": 1.0,
            "def get_value(dictionary, key, default_value):\n    if key in dictionary:\n        return dictionary[key]\n    else:\n        return default_value": 0.0,
            "def get_value(dictionary, key, default_value):\n    if key not in dictionary:\n        return default_value\n    else:\n        return dictionary[key]": 0.0,
            "def get_value(dictionary, key, default_value):\n    try:\n        return dictionary[key]\n    except KeyError:\n        return default_value": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to get the value of a specific key from a dictionary, and return a default value if the key is not present.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to determine if a given year is a leap year. A leap year is divisible by 4, but not divisible by 100 unless it is divisible by 400. The function should take a year as input and return True if it is a leap year, False otherwise.",
        "responses": {
            "def is_leap_year(year):\n    if year % 4 == 1 and (year % 100 != 0 or year % 400 == 0):\n        return True\n    else:\n        return False": 0.0,
            "def is_leap_year(year): \n    if year % 4 == 0 and (year % 100 != 1 or year % 400 == 1):\n        return True\n    else:\n        return False": 0.0,
            "def is_leap_year(year):\n    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n        return True\n    else:\n        return False": 1.0,
            "def is_leap_year(year):\n    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 2):\n        return True\n    else:\n        return False": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to determine if a given year is a leap year. A leap year is divisible by 4, but not divisible by 100 unless it is divisible by 400. The function should take a year as input and return True if it is a leap year, False otherwise.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to concatenate all strings in a list.",
        "input": "Lists and strings",
        "responses": {
            "def concatenate_strings(str_list):\n    return ''.join(str_list)": 1.0,
            "def concatenate_strings(str_list):\n    return ' '.join(str_list)": 0.0,
            "def concatenate_strings(str_list):\n    return str_list": 0.0,
            "def concatenate_strings(str_list):\n    return ''.join(str_list) + ' '": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to concatenate all strings in a list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that reads a float from user input, handling any ValueError exceptions.",
        "input": "Error handling",
        "responses": {
            "def read_float():\n    while True:\n        try:\n            return float(input(\"Enter a float number: \"))\n        except ValueError:\n            print(\"Invalid input. Please try again.\")": 1.0,
            "def read_float():\n    while True:\n        try:\n            return float(input(\"Enter a float number: \"))\n        except TypeError:\n            print(\"Invalid input. Please try again.\")": 0.0,
            "def read_float():\n    while True:\n        try:\n            return int(input(\"Enter a float number: \"))\n        except ValueError:\n            print(\"Invalid input. Please try again.\")": 0.0,
            "def read_float():\n    while True:\n        try:\n            return float(input(\"Enter a float number: \"))\n        except ValueError:\n            print(\"Invalid input. Please try again\")\n            return": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that reads a float from user input, handling any ValueError exceptions.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the sum of all elements in an array.",
        "input": "Array operations",
        "responses": {
            "def array_sum(arr):\n    return sum(arr)": 1.0,
            "def array_sum(arr):\n    return arr[0]": 0.0,
            "def array_sum(arr):\n    return arr": 0.0,
            "def array_sum(arr):\n    return len(arr)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the sum of all elements in an array.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that removes duplicates from a list and returns a new list without duplicates.",
        "input": "List manipulation",
        "responses": {
            "def remove_duplicates(lst):\n    return list(set(lst)).reverse()": 0.0,
            "def remove_duplicates(lst):\n    return list(set(lst))[:-1]": 0.0,
            "def remove_duplicates(lst):\n    return list(set(lst)).sort()": 0.0,
            "def remove_duplicates(lst):\n    return list(set(lst))": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that removes duplicates from a list and returns a new list without duplicates.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that generates a random number between two given values.",
        "input": "Random number generation",
        "responses": {
            "import random\n\ndef generate_random_number(a, b):\n    return random.randint(a, b+1)": 0.0,
            "import random\n\ndef generate_random_number(a, b):\n    return random.randint(b, a)": 0.0,
            "import random\n\ndef generate_random_number(a, b):\n    return random.randint(a-1, b)": 0.0,
            "import random\n\ndef generate_random_number(a, b):\n    return random.randint(a, b)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that generates a random number between two given values.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a string is empty or consists of whitespace characters only.",
        "input": "String operations",
        "responses": {
            "def is_string_empty_or_whitespace(string):\n    return string.strip() == \"whitespace\"": 0.0,
            "def is_string_empty_or_whitespace(string):\n    return string.strip() == \"\"": 1.0,
            "def is_string_empty_or_whitespace(string):\n    return string.strip() == \"empty\"": 0.0,
            "def is_string_empty_or_whitespace(string):\n    return string.strip() == \" \"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a string is empty or consists of whitespace characters only.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the middle element(s) of a list. If the list has an odd length, return the middle element. If the list has an even length, return the two middle elements.",
        "input": "List slicing",
        "responses": {
            "def get_middle_elements(lst):\n    middle = len(lst) // 2\n    if len(lst) % 2 == 0:\n        return lst[middle-1:middle]\n    else:\n        return [lst[middle-1]]": 0.0,
            "def get_middle_elements(lst):\n    middle = len(lst) // 2\n    if len(lst) % 2 == 0:\n        return lst[middle-1:middle+1]\n    else:\n        return [lst[middle]]": 1.0,
            "def get_middle_elements(lst):\n    middle = len(lst) // 2\n    if len(lst) % 2 == 0:\n        return lst[middle-1:middle]\n    else:\n        return [lst[middle]]": 0.0,
            "def get_middle_elements(lst):\n    middle = len(lst) // 2\n    if len(lst) % 2 == 0:\n        return lst[middle:middle+1]\n    else:\n        return [lst[middle]]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the middle element(s) of a list. If the list has an odd length, return the middle element. If the list has an even length, return the two middle elements.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that removes leading and trailing whitespaces from a string.",
        "input": "String operations",
        "responses": {
            "def remove_whitespace(s):\n    return s.rstrip() + \" \"": 0.0,
            "def remove_whitespace(s):\n    return s.strip()": 1.0,
            "def remove_whitespace(s):\n    return s.lstrip()": 0.0,
            "def remove_whitespace(s):\n    return s.strip() + \" \"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that removes leading and trailing whitespaces from a string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function called remove_vowels that takes a string as input and returns a new string with all the vowels (a, e, i, o, u) removed.",
        "responses": {
            "def remove_vowels(string):\n    return ''.join([c for c in stri if c.lower() not in 'aeiou'])": 0.0,
            "def remove_vowels(string):\n    return ''.join(c for c in string if c.lower() not in 'aeiou')": 0.0,
            "def remove_vowels(string):\n    return ''.join([c for c in string if c.lower() not in 'aeiou'])": 1.0,
            "def remove_vowels(string:\n    return ''.join([c for c in string if c.lower() not in 'aeiou'])": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function called remove_vowels that takes a string as input and returns a new string with all the vowels (a, e, i, o, u) removed.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the maximum value from a list of numbers.",
        "responses": {
            "def find_max(lst):\n    max_value = lst[0]\n    for num in lst:\n        if num > max_value:\n            max_value = num\n    return max_value": 1.0,
            "def find_max(lst):\n    max_value = lst[1]\n    for num in lst:\n        if num > max_value:\n            max_value = num\n    return max_value": 0.0,
            "def find_max(lst):\n    max_value = lst[0]\n    for num in lst:\n        if num < max_value:\n            max_value = num\n    return max_value": 0.0,
            "def find_max(lst):\n    max_value = lst\n    for num in lst:\n        if num > max_value:\n            max_value = num\n    return max_value": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the maximum value from a list of numbers.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that checks if a given list contains all True values.",
        "input": "Boolean operations",
        "responses": {
            "if all(lst):\n    print(\"List contains all True values\")\nelse:\n    print(\"List does not contain all True values\")": 1.0,
            "if any(lst):\n    print(\"List contains all True values\")\nelse:\n    print(\"List does not contain all True values\")": 0.0,
            "if len(lst) == sum(lst):\n    print(\"List contains all True values\")\nelse:\n    print(\"List does not contain all True values\")": 0.0,
            "if not all(lst):\n    print(\"List contains all True values\")\nelse:\n    print(\"List does not contain all True values\")": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that checks if a given list contains all True values.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that reverses the order of words in a sentence. (e.g. \"Hello world\" becomes \"world Hello\")",
        "input": "String operations",
        "responses": {
            "def reverse_words(sentence):\n    return ' '.join(sentence.split())": 0.0,
            "def reverse_words(sentence):\n    return ' '.join(sentence.split()[::-1])[::-1]": 0.0,
            "def reverse_words(sentence):\n    return ' '.join(sentence.split()[::-2])": 0.0,
            "def reverse_words(sentence):\n    return ' '.join(sentence.split()[::-1])": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that reverses the order of words in a sentence. (e.g. \"Hello world\" becomes \"world Hello\")\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns a lambda function that adds a given value to a given parameter.",
        "input": "Lambda Functions",
        "responses": {
            "def add_value_to_parameter(value):\n    return lambda x: x + value": 1.0,
            "def add_value_to_parameter(value):\n    return lambda x: x / value": 0.0,
            "def add_value_to_parameter(value):\n    return lambda x: x - value": 0.0,
            "def add_value_to_parameter(value):\n    return lambda x: x * value": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns a lambda function that adds a given value to a given parameter.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to convert minutes to hours and minutes.",
        "input": "Time conversions",
        "responses": {
            "def convert_minutes(minutes):\n    hours = minutes / 60\n    minutes = minutes % 60\n    return (hours, minutes)": 0.0,
            "def convert_minutes(minutes):\n    hours = minutes / 60\n    minutes = minutes / 60\n    return (hours, minutes)": 0.0,
            "def convert_minutes(minutes):\n    hours = minutes // 60\n    minutes = minutes % 60\n    return (hours, minutes)": 1.0,
            "def convert_minutes(minutes):\n    hours = minutes // 60\n    minutes = minutes / 60\n    return (hours, minutes)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to convert minutes to hours and minutes.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that takes a list of integers, sorts it in ascending order, and checks if a given number is present in the list.",
        "input": "Sort & search",
        "responses": {
            "def search_number(lst, num):\n    sorted_lst = sorted(lst, reverse=True)\n    return num in sorted_lst": 0.0,
            "def search_number(lst, num):\n    sorted_lst = sorted(lst)\n    return num in sorted_lst": 1.0,
            "def search_number(lst, num):\n    sorted_lst = sorted(lst)\n    return num in sorted_lst[::-1]": 0.0,
            "def search_number(lst, num):\n    sorted_lst = sorted(lst)\n    return num not in sorted_lst": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that takes a list of integers, sorts it in ascending order, and checks if a given number is present in the list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if two given time intervals overlap.",
        "input": "Time operations",
        "responses": {
            "def check_overlap(interval1, interval2):\n    return not (interval1[1] < interval2[0] or interval1[0] > interval2[1])": 1.0,
            "def check_overlap(interval1, interval2):\n    return not (interval1[1] < interval2[0] and interval1[0] < interval2[1])": 0.0,
            "def check_overlap(interval1, interval2):\n    return not (interval1[1] > interval2[0] or interval1[0] > interval2[1])": 0.0,
            "def check_overlap(interval1, interval2):\n    return not (interval1[1] < interval2[0] and interval1[0] > interval2[1])": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if two given time intervals overlap.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a string as input and returns the index of the first occurrence of the substring 'abc'.",
        "input": "Pattern matching",
        "responses": {
            "def find_substring(s):\n    return s.find('abc')": 1.0,
            "def find_substring(s):\n    return s.find('cba')": 0.0,
            "def find_substring(s):\n    return s.find('ab')": 0.0,
            "def find_substring(s):\n    return s.find('abcd')": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a string as input and returns the index of the first occurrence of the substring 'abc'.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to sort a list of strings alphabetically.",
        "input": "Sorting",
        "responses": {
            "def sort_strings(lst):\n    return sorted(lst)": 1.0,
            "def sort_strings(lst):\n    return sorted(lst, key=len)": 0.0,
            "def sort_strings(lst):\n    return sorted(lst, reverse=True)": 0.0,
            "def sort_strings(lst):\n    return sorted(lst, key=str.lower)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to sort a list of strings alphabetically.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a number is divisible by 2 and returns \"even\" if it is, otherwise \"odd\".",
        "input": "If statements",
        "responses": {
            "def check_divisibility(num):\n    return \"even\" if num % 2 == 1 else \"odd\"": 0.0,
            "def check_divisibility(num):\n    return \"even\" if num % 2 == 0 else \"odd\"": 1.0,
            "def check_divisibility(num):\n    return \"even\" if num % 2 == 0 else \"even\"": 0.0,
            "def check_divisibility(num):\n    return \"odd\" if num % 2 == 0 else \"odd\"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a number is divisible by 2 and returns \"even\" if it is, otherwise \"odd\".\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that calculates the factorial of a number recursively. Do not use any built-in functions or libraries.",
        "input": "Math operations",
        "responses": {
            "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1) + 1": 0.0,
            "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)": 1.0,
            "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1) - 1": 0.0,
            "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1) * 2": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that calculates the factorial of a number recursively. Do not use any built-in functions or libraries.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that updates a dictionary with key-value pairs from another dictionary.",
        "input": "Dictionary manipulation",
        "responses": {
            "def update_dictionary(d1, d2):\n    d1.update(d2)\n    return d2": 0.0,
            "def update_dictionary(d1, d2):\n    d1.update(d2)\n    return d1, d2": 0.0,
            "def update_dictionary(d1, d2):\n    d1.update(d2)\n    return d1": 1.0,
            "def update_dictionary(d1, d2):\n    d1.update(d2)\n    return d1, d1": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that updates a dictionary with key-value pairs from another dictionary.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that reverses a given string. The function should return the reversed string.",
        "responses": {
            "def reverse_string(s):\n    return s[::-1]": 1.0,
            "def reverse_string(s):\n    return s[::1]": 0.0,
            "def reverse_string(s):\n    return s[len(s)::-1]": 0.0,
            "def reverse_string(s):\n    return s[1:][::-1]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that reverses a given string. The function should return the reversed string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a list of numbers as input and returns True if all numbers are even, and False otherwise.",
        "input": "input validation",
        "responses": {
            "def are_all_numbers_even(lst):\n    return all(num % 2 == 0 for num in lst)": 1.0,
            "def are_all_numbers_even(lst):\n    return all(num % 2 == 0 for num in lst) or False": 0.0,
            "def are_all_numbers_even(lst):\n    return all(num % 2 == 0 for num in lst) and True": 0.0,
            "def are_all_numbers_even(lst):\n    return all(num % 2 == 1 for num in lst)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a list of numbers as input and returns True if all numbers are even, and False otherwise.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that extracts all the digits from a string and returns them as a list.",
        "responses": {
            "def extract_digits(s):\n    return [int(char) for char in s if char.isnumeric()]": 0.0,
            "def extract_digits(s):\n    return [int(char) for char in s if char.isalpha()]": 0.0,
            "def extract_digits(s):\n    return [int(char) for char in s if char.isdigit()]": 1.0,
            "def extract_digits(s):\n    return [int(char) for char in s if not char.isdigit()]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that extracts all the digits from a string and returns them as a list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that prints a pattern of right-angled triangles using asterisks.",
        "input": "Pattern printing",
        "responses": {
            "def print_triangles(rows):\n    for i in range(1, rows+1):\n        print('*' * i)\n        print('*' * (i+1))": 0.0,
            "def print_triangles(rows):\n    for i in range(1, rows+1):\n        print('*' * i)": 1.0,
            "def print_triangles(rows):\n    for i in range(1, rows+1):\n        print('*' * i)\n        print('*' * i)": 0.0,
            "def print_triangles(rows):\n    for i in range(1, rows+1):\n        print('*' * (i+1))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that prints a pattern of right-angled triangles using asterisks.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that decrypts a given text using the Caesar cipher.",
        "input": "Data decryption",
        "responses": {
            "def caesar_cipher_decrypt(text, shift):\n    decrypted_text = \"\"\n    for char in text:\n        if char.isalpha():\n            new_char = chr((ord(char) - ord('a') - shift) % 26 + ord('a'))\n            decrypted_text += new_char\n        else:\n            decrypted_text += char\n    return decrypted_text": 1.0,
            "def caesar_cipher_decrypt(text, shift):\n    decrypted_text = \"\"\n    for char in text:\n        if char.isalpha():\n            new_char = chr((ord(char) - ord('a') - shift) % 26 + ord('a') - 1)\n            decrypted_text += new_char\n        else:\n            decrypted_text += char\n    return decrypted_text": 0.0,
            "def caesar_cipher_decrypt(text, shift):\n    decrypted_text = \"\"\n    for char in text:\n        if char.isalpha():\n            new_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            decrypted_text += new_char\n        else:\n            decrypted_text += char\n    return decrypted_text": 0.0,
            "def caesar_cipher_decrypt(text, shift):\n    decrypted_text = \"\"\n    for char in text:\n        if char.isalpha():\n            new_char = chr((ord(char) - ord('a') - shift) % 26 + ord('a') + 1)\n            decrypted_text += new_char\n        else:\n            decrypted_text += char\n    return decrypted_text": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that decrypts a given text using the Caesar cipher.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that creates a new directory.",
        "input": "File operations",
        "responses": {
            "import os\n\ndef create_directory(directory_name):\n    os.mkdir(directory_name)": 1.0,
            "import os\n\ndef create_directory(directory_name):\n    os.mkdir(directory_name)\n    return None": 0.0,
            "import os\n\ndef create_directory(directory_name):\n    os.mkdir(directory_name)\n    os.chdir(directory_name)": 0.0,
            "import os\n\ndef create_directory(directory_name):\n    os.makedirs(directory_name)\n    return None": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that creates a new directory.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes two integers as input and returns \"Equal\" if they are equal, \"Greater\" if the first integer is greater than the second, and \"Smaller\" if the first integer is smaller than the second.",
        "input": "Conditional statements",
        "responses": {
            "def compare_integers(a, b):\n    if a == b:\n        return \"Equal\"\n    elif a > b:\n        return \"Greater\"\n    else:\n        return \"Smaller\"": 1.0,
            "def compare_integers(a, b):\n    if a == b:\n        return \"Equal\"\n    elif a > b:\n        return \"Greater\"\n    else:\n        return \"Greater\"": 0.0,
            "def compare_integers(a, b):\n    if a == b:\n        return \"Equal\"\n    elif a > b:\n        return \"Greater\"\n    else:\n        return \"Equal\"": 0.0,
            "def compare_integers(a, b):\n    if a == b:\n        return \"Equal\"\n    elif a < b:\n        return \"Greater\"\n    else:\n        return \"Smaller\"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes two integers as input and returns \"Equal\" if they are equal, \"Greater\" if the first integer is greater than the second, and \"Smaller\" if the first integer is smaller than the second.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a given string is a valid password. The password must contain at least 8 characters and include both letters and numbers.",
        "responses": {
            "def is_valid_password(password):\n    return len(password) >= 8 and any(char.isdigit() for char in password) and any(char.isalpha() for char in password)": 1.0,
            "def is_valid_password(password):\n    return len(password) < 8 and any(char.isdigit() for char in password) and any(char.isalpha() for char in password)": 0.0,
            "def is_valid_password(password):\n    return len(password) >= 8 and any(char.isdigit() for char in password) or any(char.isalpha() for char in password)": 0.0,
            "def is_valid_password(password):\n    return len(password) >= 8 or any(char.isdigit() for char in password) and any(char.isalpha() for char in password)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a given string is a valid password. The password must contain at least 8 characters and include both letters and numbers.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that takes in a number x and prints \"Even\" if x is even, and \"Odd\" if x is odd.",
        "input": "if statements",
        "responses": {
            "def check_even_odd(x):\n    if x % 2 == 0:\n        print(\"Odd\")\n    else:\n        print(\"Odd\")": 0.0,
            "def check_even_odd(x):\n    if x % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")": 1.0,
            "def check_even_odd(x):\n    if x % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Even\")": 0.0,
            "def check_even_odd(x):\n    if x % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Neither\")": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that takes in a number x and prints \"Even\" if x is even, and \"Odd\" if x is odd.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that takes a list as input and returns a new list with the elements in reverse order. The first element of the input list should be the last element of the output list, the second element of the input list should be the second-to-last element of the output list, and so on.",
        "responses": {
            "def reverse_list(input_list):\n    return input_list[1:][::-1]": 0.0,
            "def reverse_list(input_list):\n    return input_list[:-1]": 0.0,
            "def reverse_list(input_list):\n    return reversed(input_list)": 0.0,
            "def reverse_list(input_list):\n    return input_list[::-1]": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that takes a list as input and returns a new list with the elements in reverse order. The first element of the input list should be the last element of the output list, the second element of the input list should be the second-to-last element of the output list, and so on.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that checks if a given string is a palindrome. A palindrome is a string that remains the same when its characters are reversed.",
        "responses": {
            "def is_palindrome(string):\n    return string == string[::1]": 0.0,
            "def is_palindrome(string):\n    return string == string[::-1]": 1.0,
            "def is_palindrome(string):\n    return string == string[::-1][0]": 0.0,
            "def is_palindrome(string):\n    return string != string[::-1]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that checks if a given string is a palindrome. A palindrome is a string that remains the same when its characters are reversed.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a list as input and returns the element at a specific index, but handles the IndexError exception.",
        "input": "Exception handling",
        "responses": {
            "def get_element(lst, index):\n    try:\n        return lst[index]\n    except IndexError:\n        return \"Error: Index out of range\"\n    except KeyError:\n        return \"Error: Invalid key\"": 0.0,
            "def get_element(lst, index):\n    try:\n        return lst[index]\n    except IndexError:\n        return \"Error: Index out of range\"\n    except ValueError:\n        return \"Error: Invalid value\"": 0.0,
            "def get_element(lst, index):\n    try:\n        return lst[index]\n    except IndexError:\n        return \"Error: Index out of range\"": 1.0,
            "def get_element(lst, index):\n    try:\n        return lst[index]\n    except IndexError:\n        return \"Error: Index out of range\"\n    except TypeError:\n        return \"Error: Invalid input type\"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a list as input and returns the element at a specific index, but handles the IndexError exception.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that performs a binary search on a sorted list of integers and returns the index of the target number.",
        "input": "Binary search",
        "responses": {
            "def binary_search(lst, target):\n    low = 0\n    high = len(lst) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if lst[mid] == target:\n            return mid\n        elif lst[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 2\n    return -1": 0.0,
            "def binary_search(lst, target):\n    low = 0\n    high = len(lst) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if lst[mid] == target:\n            return mid\n        elif lst[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1": 1.0,
            "def binary_search(lst, target):\n    low = 0\n    high = len(lst) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if lst[mid] == target:\n            return mid\n        elif lst[mid] > target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1": 0.0,
            "def binary_search(lst, target):\n    low = 0\n    high = len(lst) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if lst[mid] == target:\n            return mid\n        elif lst[mid] < target:\n            low = mid - 1\n        else:\n            high = mid + 1\n    return -1": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that performs a binary search on a sorted list of integers and returns the index of the target number.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that joins all elements of a list into a single string, separated by a specified delimiter.",
        "input": "List operations",
        "responses": {
            "def join_list(lst, delimiter):\n    return delimiter.join(lst) + delimiter + delimiter": 0.0,
            "def join_list(lst, delimiter):\n    return delimiter.join(lst[:-1])": 0.0,
            "def join_list(lst, delimiter):\n    return delimiter.join(lst)": 1.0,
            "def join_list(lst, delimiter):\n    return delimiter.join(lst) + delimiter": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that joins all elements of a list into a single string, separated by a specified delimiter.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that combines two given sets into a new set.",
        "input": "Sets",
        "responses": {
            "def combine_sets(set1, set2):\n    return set1.union(set2)": 1.0,
            "def combine_sets(set1, set2):\n    return set1.difference(set2)": 0.0,
            "def combine_sets(set1, set2):\n    return set1.intersection(set2)": 0.0,
            "def combine_sets(set1, set2):\n    return set1.symmetric_difference(set2)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that combines two given sets into a new set.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that converts a list of strings into a single string by concatenating them.",
        "responses": {
            "def concatenate_strings(strings):\n    return \"\".join(strings) + \" \"": 0.0,
            "def concatenate_strings(strings):\n    return \"\".join(strings) + 123": 0.0,
            "def concatenate_strings(strings):\n    return \"\".join(strings)": 1.0,
            "def concatenate_strings(strings):\n    return \" \".join(strings)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that converts a list of strings into a single string by concatenating them.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks whether a string is a valid email address (contains '@' symbol and ends with a valid domain).",
        "input": "String operations",
        "responses": {
            "def is_valid_email(email):\n    if '@' in email:\n        return True\n    \n    domain = email.split('@')[1]\n    if '.' in domain:\n        return True\n    \n    return False": 0.0,
            "def is_valid_email(email):\n    if '@' not in email:\n        return True\n    \n    domain = email.split('@')[1]\n    if '.' not in domain:\n        return True\n    \n    return False": 0.0,
            "def is_valid_email(email):\n    if '@' not in email:\n        return False\n    \n    domain = email.split('@')[1]\n    if '.' not in domain:\n        return False\n    \n    return True": 1.0,
            "def is_valid_email(email):\n    if '@' in email:\n        return False\n    \n    domain = email.split('@')[1]\n    if '.' in domain:\n        return False\n    \n    return True": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks whether a string is a valid email address (contains '@' symbol and ends with a valid domain).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a positive integer as input and prints the numbers from 1 to that integer.",
        "input": "Looping",
        "responses": {
            "def print_numbers(n):\n    for i in range(n, 0, -1):\n        print(i)": 0.0,
            "def print_numbers(n):\n    for i in range(1, n+1):\n        print(i)": 1.0,
            "def print_numbers(n):\n    for i in range(1, n):\n        print(i)": 0.0,
            "def print_numbers(n):\n    for i in range(1, n+1):\n        print(i, end=\" \")": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a positive integer as input and prints the numbers from 1 to that integer.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a class named 'Circle' with a constructor that takes the radius as input. The class should have a method to calculate and return the area of the circle.",
        "input": "Object-oriented programming",
        "responses": {
            "import math\n\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def calculate_area(self):\n        return math.pi * self.radius * 2": 0.0,
            "import math\n\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def calculate_area(self):\n        return math.pi * self.radius": 0.0,
            "import math\n\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def calculate_area(self):\n        return math.pi * self.radius ** 3": 0.0,
            "import math\n\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def calculate_area(self):\n        return math.pi * self.radius ** 2": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a class named 'Circle' with a constructor that takes the radius as input. The class should have a method to calculate and return the area of the circle.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a Python function called remove_duplicates that takes in a list and removes all duplicate elements, preserving the original order of the elements.",
        "responses": {
            "def remove_duplicates(lst):\n    return list(set(lst))": 0.0,
            "def remove_duplicates(lst):\n    return list(dict(lst))": 0.0,
            "def remove_duplicates(lst):\n    return lst.remove_duplicates()": 0.0,
            "def remove_duplicates(lst):\n    return list(dict.fromkeys(lst))": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a Python function called remove_duplicates that takes in a list and removes all duplicate elements, preserving the original order of the elements.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a date string 's' in the format 'YYYY-MM-DD' and returns it in the format 'DD/MM/YYYY'.",
        "input": "Date formatting",
        "responses": {
            "def format_date(s):\n    year, month, day = s.split(\"-\")\n    return f\"{day}/{month}/{year}\"": 1.0,
            "def format_date(s):\n    year, month, day = s.split(\"-\")\n    return f\"{year}/{month}/{day}\"": 0.0,
            "def format_date(s):\n    year, month, day = s.split(\"-\")\n    return f\"{day}/{year}/{month}\"": 0.0,
            "def format_date(s):\n    year, month, day = s.split(\"-\")\n    return f\"{month}/{day}/{year}\"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a date string 's' in the format 'YYYY-MM-DD' and returns it in the format 'DD/MM/YYYY'.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if two lists have at least one common element.",
        "input": "List operations",
        "responses": {
            "def common_element(list1, list2):\n    return bool(set(list1) & set(list2))": 1.0,
            "def common_element(list1, list2):\n    return bool(set(list1) ^ set(list2))": 0.0,
            "def common_element(list1, list2):\n    return bool(set(list1) - set(list2))": 0.0,
            "def common_element(list1, list2):\n    return bool(set(list1) | set(list2))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if two lists have at least one common element.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to convert a decimal number to binary representation.",
        "input": "Binary representation",
        "responses": {
            "def decimal_to_binary(n):\n    return bin(n)[1:]": 0.0,
            "def decimal_to_binary(n):\n    return bin(n)[2:] + \"0\"": 0.0,
            "def decimal_to_binary(n):\n    return bin(n)[2:] + \"1\"": 0.0,
            "def decimal_to_binary(n):\n    return bin(n)[2:]": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to convert a decimal number to binary representation.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that finds and prints the maximum element in a list.",
        "input": "Lists",
        "responses": {
            "def find_max(numbers):\n    return numbers[-1]\n\nprint(find_max([1, 5, 3, 9, 2]))": 0.0,
            "def find_max(numbers):\n    return max(numbers)\n\nprint(find_max([1, 5, 3, 9, 2]))": 1.0,
            "def find_max(numbers):\n    return sorted(numbers)[0]\n\nprint(find_max([1, 5, 3, 9, 2]))": 0.0,
            "def find_max(numbers):\n    return min(numbers)\n\nprint(find_max([1, 5, 3, 9, 2]))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that finds and prints the maximum element in a list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks whether a string x is a valid URL (starts with \"http://\" or \"https://\").",
        "input": "String operations",
        "responses": {
            "def is_valid_url(x):\n    return x.startswith('http://') and x.endswith('.com')": 0.0,
            "def is_valid_url(x):\n    return x.startswith('http://') or x.startswith('https://') or x.startswith('ftp://')": 0.0,
            "def is_valid_url(x):\n    return x.startswith('https://') or x.startswith('http://') or x.startswith('htt://')": 0.0,
            "def is_valid_url(x):\n    return x.startswith('http://') or x.startswith('https://')": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks whether a string x is a valid URL (starts with \"http://\" or \"https://\").\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a class Person with attributes name and age. Implement a method to return the name and age of the person as a string.",
        "input": "Class definition",
        "responses": {
            "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_details(self):\n        return f\"{self.name}, {self.age}\"\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def get_address(self):\n        return self.address\n    \n    def get_phone(self):\n        return self.phone": 0.0,
            "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_details(self):\n        return f\"{self.name}, {self.age}\"\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age": 0.0,
            "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_details(self):\n        return f\"{self.name}, {self.age}\"\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def get_address(self):\n        return self.address": 0.0,
            "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_details(self):\n        return f\"{self.name}, {self.age}\"": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a class Person with attributes name and age. Implement a method to return the name and age of the person as a string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a class that implements a stack data structure. The class should have methods for pushing an element, popping an element, and checking if the stack is empty.",
        "input": "Stack implementation",
        "responses": {
            "class Stack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, element):\n        self.stack.append(element)\n\n    def pop(self):\n        if self.is_empty():\n            return None\n        return self.stack.pop()\n\n    def is_empty(self):\n        return len(self.stack) == 1": 0.0,
            "class Stack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, element):\n        self.stack.append(element)\n\n    def pop(self):\n        if self.is_empty():\n            return None\n        return self.stack.pop()\n\n    def is_empty(self):\n        return len(self.stack) == \"empty\"": 0.0,
            "class Stack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, element):\n        self.stack.append(element)\n\n    def pop(self):\n        if self.is_empty():\n            return None\n        return self.stack.pop()\n\n    def is_empty(self):\n        return len(self.stack) == -1": 0.0,
            "class Stack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, element):\n        self.stack.append(element)\n\n    def pop(self):\n        if self.is_empty():\n            return None\n        return self.stack.pop()\n\n    def is_empty(self):\n        return len(self.stack) == 0": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a class that implements a stack data structure. The class should have methods for pushing an element, popping an element, and checking if the stack is empty.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to calculate the square of each number in a list using list comprehension.",
        "input": "List comprehension",
        "responses": {
            "def square_numbers(numbers):\n    return [num ** 2 for num in numbers if num % 2 == 0]": 0.0,
            "def square_numbers(numbers):\n    return [num * 2 for num in numbers]": 0.0,
            "def square_numbers(numbers):\n    return [num ** 2 for num in numbers if num > 0]": 0.0,
            "def square_numbers(numbers):\n    return [num ** 2 for num in numbers]": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to calculate the square of each number in a list using list comprehension.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that calculates the sum of all numbers in a given list. The program should take a list of integers as input and return the sum of the numbers.",
        "responses": {
            "def calculate_sum(numbers):\n    return \"The sum is \" + str(sum(numbers))": 0.0,
            "def calculate_sum(numbers):\n    return numbers": 0.0,
            "def calculate_sum(numbers):\n    return numbers[0]": 0.0,
            "def calculate_sum(numbers):\n    return sum(numbers)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that calculates the sum of all numbers in a given list. The program should take a list of integers as input and return the sum of the numbers.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function called reverse_list that takes a list as input and returns a new list with the elements reversed. For example, if the input list is [1, 2, 3, 4], the function should return [4, 3, 2, 1].",
        "responses": {
            "def reverse_list(lst):\n    return lst[::-2]": 0.0,
            "def reverse_list(lst):\n    return lst[::1]": 0.0,
            "def reverse_list(lst):\n    return lst[::-1]": 1.0,
            "def reverse_list(lst):\n    return lst[1::-1]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function called reverse_list that takes a list as input and returns a new list with the elements reversed. For example, if the input list is [1, 2, 3, 4], the function should return [4, 3, 2, 1].\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that divides two numbers x and y, but handles the ZeroDivisionError exception if y equals 0.",
        "input": "Error handling",
        "responses": {
            "try:\n    result = x / y\n    print(result)\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero\")": 1.0,
            "try:\n    result = x / y\n    print(result)\nexcept:\n    print(\"An error occurred\")": 0.0,
            "try:\n    result = x / y\n    print(result)\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero\")\nexcept:\n    print(\"An error occurred\")": 0.0,
            "try:\n    result = x / y\n    print(result)\nexcept ZeroDivisionError:\n    print(\"Oops, something went wrong\")": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that divides two numbers x and y, but handles the ZeroDivisionError exception if y equals 0.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns a new list with all even numbers doubled and odd numbers tripled.",
        "input": "List operations",
        "responses": {
            "def double_even_triple_odd(lst):\n    return [num*2 if num%2 == 0 else num*2 for num in lst]": 0.0,
            "def double_even_triple_odd(lst):\n    return [num*2 if num%2 == 1 else num*3 for num in lst]": 0.0,
            "def double_even_triple_odd(lst):\n    return [num*2 if num%2 == 0 else num/3 for num in lst]": 0.0,
            "def double_even_triple_odd(lst):\n    return [num*2 if num%2 == 0 else num*3 for num in lst]": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns a new list with all even numbers doubled and odd numbers tripled.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to get the value associated with a given key in a dictionary. Return None if the key doesn't exist.",
        "input": "Working with dictionaries",
        "responses": {
            "def get_value(dictionary, key):\n    if key in dictionary:\n        return dictionary[key]\n    else:\n        return None": 0.0,
            "def get_value(dictionary, key):\n    return dictionary.get(key)": 1.0,
            "def get_value(dictionary, key):\n    try:\n        return dictionary[key]\n    except KeyError:\n        return None": 0.0,
            "def get_value(dictionary, key):\n    return dictionary[key]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to get the value associated with a given key in a dictionary. Return None if the key doesn't exist.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that calculates the sum of all numbers below a given limit that are divisible by 3 or 5.",
        "responses": {
            "def calculate_sum(limit):\n    return sum(x for x in range(limit) if x % 3 == 0 and x % 5 == 0)": 0.0,
            "def calculate_sum(limit):\n    return sum(x for x in range(limit) if x % 3 == 0 or x % 5 == 0)": 1.0,
            "def calculate_sum(limit):\n    return sum(x for x in range(limit) if x % 3 != 0 or x % 5 != 0)": 0.0,
            "def calculate_sum(limit):\n    return sum(x for x in range(limit) if x % 3 == 0 and x % 5 != 0)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that calculates the sum of all numbers below a given limit that are divisible by 3 or 5.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that converts a given temperature in Fahrenheit to Celsius. The formula for conversion is:\nC = (F - 32) * 5/9",
        "responses": {
            "def fahrenheit_to_celsius(f):\n    return (f - 32) * 5/9": 1.0,
            "def fahrenheit_to_celsius(f):\n    return f - 32 * 5/9": 0.0,
            "def fahrenheit_to_celsius(f):\n    return (f - 32) * 5/9 + 32": 0.0,
            "def fahrenheit_to_celsius(F):\n    return (f - 32) * 5/9": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that converts a given temperature in Fahrenheit to Celsius. The formula for conversion is:\nC = (F - 32) * 5/9\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Given a string, write a function called count_vowels that returns the number of vowels in the string. Assume that the string only contains lowercase alphabets and no special characters.",
        "responses": {
            "def count_vowels(string):\n    count = 0\n    for char in string:\n        if char in \"aeiou\":\n            count += 1\n    return count": 1.0,
            "def count_vowels(string):\n    count = 0\n    for char in string:\n        if char in \"bcdfghjklmnpqrstvwxyz\":\n            count += 1\n    return count": 0.0,
            "def count_vowels(string):\n    count = 0\n    for char in string:\n        if char not in \"aeiou\":\n            count += 1\n    return count": 0.0,
            "def count_vowels(string):\n    count = 0\n    for char in string:\n        if char in \"AEIOU\":\n            count += 1\n    return count": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nGiven a string, write a function called count_vowels that returns the number of vowels in the string. Assume that the string only contains lowercase alphabets and no special characters.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes in two lists and returns a new list combining the elements of both lists.",
        "input": "List operations",
        "responses": {
            "def combine_lists(lst1, lst2):\n    return lst1 / lst2": 0.0,
            "def combine_lists(lst1, lst2):\n    return lst1 * lst2": 0.0,
            "def combine_lists(lst1, lst2):\n    return lst1 - lst2": 0.0,
            "def combine_lists(lst1, lst2):\n    return lst1 + lst2": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes in two lists and returns a new list combining the elements of both lists.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function reverse_integer that takes an integer as input and returns its reverse. For example, the reverse of 123 is 321.",
        "responses": {
            "def reverse_integer(n):\n    is_negative = False\n    if n < 0:\n        is_negative = True\n        n = -n\n    reversed_num = int(str(n)[::-1])\n    if is_negative:\n        reversed_num = -reversed_num\n    return reversed_num": 1.0,
            "def reverse_integer(n):\n    is_negative = False\n    if n > 0:\n        is_negative = True\n        n = -n\n    reversed_num = int(str(n)[::-1])\n    if is_negative:\n        reversed_num = -reversed_num\n    return reversed_num": 0.0,
            "def reverse_integer(n):\n    is_negative = False\n    if n < 0:\n        is_negative = True\n        n = n\n    reversed_num = int(str(n)[::-1])\n    if is_negative:\n        reversed_num = -reversed_num\n    return reversed_num": 0.0,
            "def reverse_integer(n):\n    is_negative = True\n    if n < 0:\n        is_negative = False\n        n = -n\n    reversed_num = int(str(n)[::-1])\n    if is_negative:\n        reversed_num = -reversed_num\n    return reversed_num": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function reverse_integer that takes an integer as input and returns its reverse. For example, the reverse of 123 is 321.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the factorial of a number.",
        "responses": {
            "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n + factorial(n-1)": 0.0,
            "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)": 1.0,
            "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n)": 0.0,
            "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n+1)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the factorial of a number.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a name as input and greets the person by printing \"Hello, [name]!\".",
        "input": "Input/output operations",
        "responses": {
            "def greet_person(name):\n    print(\"Hello, {}!\".format(name))": 1.0,
            "def greet_person(name):\n    print(\"Hello, {}!\".format(name))\n    return \"Hello, {}!\".format(name.capitalize())": 0.0,
            "def greet_person(name):\n    print(\"Hello, {}!\".format(name))\n    return None": 0.0,
            "def greet_person(name):\n    print(\"Hello, {}!\".format(name))\n    return \"Hello, {}!\".format(name)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a name as input and greets the person by printing \"Hello, [name]!\".\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a specific element n exists in a list x and returns True if it does, False otherwise.",
        "input": "list operations",
        "responses": {
            "def check_element(x, n):\n    return n in x": 1.0,
            "def check_element(x, n):\n    return len(x) == x.index(n) + 1": 0.0,
            "def check_element(x, n):\n    return n not in x": 0.0,
            "def check_element(x, n):\n    return x.count(n) > 0": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a specific element n exists in a list x and returns True if it does, False otherwise.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to convert a string into title case (the first letter of each word capitalized and the rest in lowercase).",
        "input": "String manipulation",
        "responses": {
            "def title_case(s):\n    return s.lower()": 0.0,
            "def title_case(s):\n    return s.capitalize()": 0.0,
            "def title_case(s):\n    return s.title()": 1.0,
            "def title_case(s):\n    return s.upper()": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to convert a string into title case (the first letter of each word capitalized and the rest in lowercase).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that generates a random integer between a given minimum and maximum value (inclusive).",
        "input": "min_value - the minimum value (integer)\nmax_value - the maximum value (integer)",
        "responses": {
            "import random\n\ndef generate_random_integer(min_value, max_value):\n    return random.randint(min_value + 1, max_value - 1)": 0.0,
            "import random\n\ndef generate_random_integer(min_value, max_value):\n    return random.randint(min_value, max_value)": 1.0,
            "import random\n\ndef generate_random_integer(min_value, max_value):\n    return random.randint(min_value, max_value + 1)": 0.0,
            "import random\n\ndef generate_random_integer(min_value, max_value):\n    return random.randint(min_value - 1, max_value)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that generates a random integer between a given minimum and maximum value (inclusive).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes two boolean values as input and returns True if either of the values is True, otherwise returns False.",
        "input": "Boolean logic",
        "responses": {
            "def logical_or(a, b):\n    return a or b": 1.0,
            "def logical_or(a, b):\n    return a and b": 0.0,
            "def logical_or(a, b):\n    return a and not b": 0.0,
            "def logical_or(a, b):\n    return not a or b": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes two boolean values as input and returns True if either of the values is True, otherwise returns False.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that applies a given function to each element in a list and returns a new list with the transformed values.",
        "input": "Higher-order functions",
        "responses": {
            "def apply_function(func, nums):\n    return [func(num) for num in nums if num != None]": 0.0,
            "def apply_function(func, nums):\n    return [func(num) for num in nums if num is not None]": 0.0,
            "def apply_function(func, nums):\n    return [func(num) for num in nums if num is not None and num != \"\"]": 0.0,
            "def apply_function(func, nums):\n    return [func(num) for num in nums]": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that applies a given function to each element in a list and returns a new list with the transformed values.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that removes all occurrences of a given element y from a list x and returns the modified list.",
        "input": "Data manipulation",
        "responses": {
            "def remove_element(x, y):\n    return [element for element in x if element != y]": 1.0,
            "def remove_element(x, y):\n    return [element for element in x if element != y] + [y]": 0.0,
            "def remove_element(x, y):\n    return [element for element in x if element == y]": 0.0,
            "def remove_element(x, y):\n    return [element for element in x if element != y] * 2": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that removes all occurrences of a given element y from a list x and returns the modified list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a class called Circle that has a method to calculate its circumference given the radius.",
        "input": "Class creation",
        "responses": {
            "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n        \n    def calculate_circumference(self):\n        return 2 * 3.14159 * self.radius + 1": 0.0,
            "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n        \n    def calculate_circumference(self):\n        return 2 * 3.14159 / self.radius": 0.0,
            "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n        \n    def calculate_circumference(self):\n        return 2 * 3.14159 * self.radius * self.radius": 0.0,
            "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def calculate_circumference(self):\n        return 2 * 3.14159 * self.radius": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a class called Circle that has a method to calculate its circumference given the radius.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to remove duplicates from a given list and return it.",
        "input": "List operations",
        "responses": {
            "def remove_duplicates(lst):\n    return lst[::-1]": 0.0,
            "def remove_duplicates(lst):\n    return sorted(lst)": 0.0,
            "def remove_duplicates(lst):\n    return lst": 0.0,
            "def remove_duplicates(lst):\n    return list(set(lst))": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to remove duplicates from a given list and return it.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a string and returns the string with all uppercase letters converted to lowercase and vice versa.",
        "input": "String manipulation",
        "responses": {
            "def toggle_case(string):\n    return string.swapcase().swapcase()": 0.0,
            "def toggle_case(string):\n    return string.upper()": 0.0,
            "def toggle_case(string):\n    return string.lower()": 0.0,
            "def toggle_case(string):\n    return string.swapcase()": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a string and returns the string with all uppercase letters converted to lowercase and vice versa.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that prints the first 3 elements of a list.",
        "input": "List slicing",
        "responses": {
            "lst = [1, 2, 3, 4, 5]\nprint(lst[1:4])": 0.0,
            "lst = [1, 2, 3, 4, 5]\nprint(lst[3:])": 0.0,
            "lst = [1, 2, 3, 4, 5]\nprint(lst[0:3])": 0.0,
            "lst = [1, 2, 3, 4, 5]\nprint(lst[:3])": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that prints the first 3 elements of a list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to determine if a given number x is prime or not.",
        "input": "Computing prime numbers",
        "responses": {
            "def is_prime(x):\n    if x < 2:\n        return False\n    for i in range(2, int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    return True": 1.0,
            "def is_prime(x):\n    if x < 2:\n        return True\n    for i in range(2, int(x**0.5)+1):\n        if x % i != 0:\n            return True\n    return False": 0.0,
            "def is_prime(x):\n    if x < 2:\n        return True\n    for i in range(2, int(x**0.5)+1):\n        if x % i == 0:\n            return True\n    return False": 0.0,
            "def is_prime(x):\n    if x < 2:\n        return False\n    for i in range(2, int(x**0.5)+1):\n        if x % i != 0:\n            return False\n    return True": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to determine if a given number x is prime or not.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that calculates the area of a rectangle. The program should take two inputs, width and height, and return the calculated area.",
        "responses": {
            "def calculate_area(width, height):\n    return width - height": 0.0,
            "def calculate_area(width, height):\n    return width * height": 1.0,
            "def calculate_area(height, width):\n    return width + height": 0.0,
            "def calculate_area(width, height):\n    return width * height * 2": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that calculates the area of a rectangle. The program should take two inputs, width and height, and return the calculated area.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that creates a simple graphical user interface with a button and a label.",
        "input": "GUI",
        "responses": {
            "import tkinter as tk\n\ndef create_gui():\n    window = tk.Tk()\n    \n    label = tk.Label(window, text='Hello, World!')\n    label.pack()\n    \n    button = tk.Button(window, text='Click Me!')\n    button.pack()\n    \n    window.mainloop()\n    return": 0.0,
            "import tkinter as tk\n\ndef create_gui():\n    window = tk.Tk()\n    \n    label = tk.Label(window, text='Hello, World!')\n    label.pack()\n    \n    button = tk.Button(window, text='Click Me!')\n    button.pack()\n    \n    window.mainloop()\n    return None": 0.0,
            "import tkinter as tk\n\ndef create_gui():\n    window = tk.Tk()\n    \n    label = tk.Label(window, text='Hello, World!')\n    label.pack()\n    \n    button = tk.Button(window, text='Click Me!')\n    button.pack()\n    \n    window.mainloop(": 0.0,
            "import tkinter as tk\n\ndef create_gui():\n    window = tk.Tk()\n    \n    label = tk.Label(window, text='Hello, World!')\n    label.pack()\n    \n    button = tk.Button(window, text='Click Me!')\n    button.pack()\n    \n    window.mainloop()": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that creates a simple graphical user interface with a button and a label.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program to print the numbers from 1 to n (inclusive) in reverse order.",
        "input": "Looping",
        "responses": {
            "def print_numbers_reverse(n):\n    for i in range(n, 0, -1):\n        print(i+1)": 0.0,
            "def print_numbers_reverse(n):\n    for i in range(n, 0, -1):\n        print(i-1)": 0.0,
            "def print_numbers_reverse(n):\n    for i in range(n, 0, -1):\n        print(i)": 1.0,
            "def print_numbers_reverse(n):\n    for i in range(n, 0, -1):\n        print(i, end=\" \")": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program to print the numbers from 1 to n (inclusive) in reverse order.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function called find_duplicates that takes in a list of integers and returns a new list containing only the duplicate elements.",
        "responses": {
            "def find_duplicates(nums):\n    return list(set([num for num in nums if nums.count(num) > 1]))": 1.0,
            "def find_duplicates(nums):\n    return list(set([num for num in nums if nums.count(num) < 1]))": 0.0,
            "def find_duplicates(nums):\n    return list(set([num for num in nums if nums.count(num) > 2]))": 0.0,
            "def find_duplicates(nums):\n    return list(set([num for num in nums if nums.count(num) == 1]))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function called find_duplicates that takes in a list of integers and returns a new list containing only the duplicate elements.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that finds the maximum and minimum values in a given list and returns them as a tuple (max_value, min_value).",
        "responses": {
            "def find_max_min(lst):\n    max_value = max(lst)\n    min_value = min(lst)\n    return max_value, min_value": 1.0,
            "def find_max_min(lst):\n    max_value = max(lst)\n    min_value = max(lst)\n    return max_value, min_value": 0.0,
            "def find_max_min(lst):\n    max_value = min(lst)\n    min_value = min(lst)\n    return max_value, min_value": 0.0,
            "def find_max_min(lst):\n    max_value = min(lst)\n    min_value = max(lst)\n    return max_value, min_value": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that finds the maximum and minimum values in a given list and returns them as a tuple (max_value, min_value).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to get the second character of a given string.",
        "input": "String indexing",
        "responses": {
            "def get_second_character(s):\n    return s[2]": 0.0,
            "def get_second_character(s):\n    return s[0]": 0.0,
            "def get_second_character(s):\n    return s[-1]": 0.0,
            "def get_second_character(s):\n    return s[1]": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to get the second character of a given string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that divides two numbers and handles the exception if the divisor is zero.",
        "input": "Exception handling",
        "responses": {
            "def divide_numbers(dividend, divisor):\n    try:\n        return dividend * divisor\n    except ZeroDivisionError:\n        return \"Divisor cannot be zero\"": 0.0,
            "def divide_numbers(dividend, divisor):\n    try:\n        return dividend / divisor\n    except ZeroDivisionError:\n        return \"Infinity\"": 0.0,
            "def divide_numbers(dividend, divisor):\n    try:\n        return dividend / divisor\n    except ZeroDivisionError:\n        return \"Divisor cannot be zero\"": 1.0,
            "def divide_numbers(dividend, divisor):\n    try:\n        return dividend / divisor\n    except ZeroDivisionError:\n        return \"Oops, an error occurred\"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that divides two numbers and handles the exception if the divisor is zero.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that checks if a number is even or odd. The program should take an integer as input and print \"Even\" if the number is even, and \"Odd\" if the number is odd.",
        "responses": {
            "def check_even_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd \"": 0.0,
            "def check_even_odd(num):\n    if num % 2 == 0:\n        return \"Even number\"\n    else:\n        return \"Odd number\"": 0.0,
            "def check_even_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"": 1.0,
            "def check_even_odd(num):\n    if num % 2 == 0:\n        return \"Even number\"\n    else:\n        return \"Even\"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that checks if a number is even or odd. The program should take an integer as input and print \"Even\" if the number is even, and \"Odd\" if the number is odd.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a class named Circle with a method that calculates the area of the circle using the formula: area = \u03c0 * r^2 (where r is the radius).",
        "input": "Object-oriented programming",
        "responses": {
            "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def calculate_area(self):\n        return 3.14159 * (self.radius ** 2) + 1": 0.0,
            "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def calculate_area(self):\n        return 3.14159 * self.radius": 0.0,
            "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def calculate_area(self):\n        return 3.14159 * (self.radius ** 3)": 0.0,
            "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def calculate_area(self):\n        return 3.14159 * (self.radius ** 2)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a class named Circle with a method that calculates the area of the circle using the formula: area = \u03c0 * r^2 (where r is the radius).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program to check whether a given year is a leap year or not. If a year is divisible by 400, it is a leap year. If it is divisible by 100 but not by 400, it is not a leap year. If a year is divisible by 4 but not divisible by 100, it is a leap year.",
        "responses": {
            "def is_leap_year(year):\n    if year % 400 == 0:\n        return False\n    if year % 100 == 0:\n        return True\n    if year % 4 == 0:\n        return False\n    return True": 0.0,
            "def is_leap_year(year):\n    if year % 400 == 0:\n        return True\n    if year % 100 == 0:\n        return True\n    if year % 4 == 0:\n        return False\n    return False": 0.0,
            "def is_leap_year(year):\n    if year % 400 == 0:\n        return False\n    if year % 100 == 0:\n        return False\n    if year % 4 == 0:\n        return True\n    return True": 0.0,
            "def is_leap_year(year):\n    if year % 400 == 0:\n        return True\n    if year % 100 == 0:\n        return False\n    if year % 4 == 0:\n        return True\n    return False": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program to check whether a given year is a leap year or not. If a year is divisible by 400, it is a leap year. If it is divisible by 100 but not by 400, it is not a leap year. If a year is divisible by 4 but not divisible by 100, it is a leap year.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to check if a string is a pangram (contains every letter of the alphabet).",
        "input": "String operations",
        "responses": {
            "import string\n\ndef is_pangram(s):\n    return set(s.lower()).issuperset(string.ascii_uppercase)": 0.0,
            "import string\n\ndef is_pangram(s):\n    return set(s.lower()).issuperset(string.ascii_lowercase + string.ascii_uppercase)": 0.0,
            "import string\n\ndef is_pangram(s):\n    return set(s.lower()).issuperset(string.ascii_lowercase)": 1.0,
            "import string\n\ndef is_pangram(s):\n    return set(s).issuperset(string.ascii_lowercase)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to check if a string is a pangram (contains every letter of the alphabet).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a class that represents a basic calculator capable of performing addition, subtraction, multiplication, and division operations.",
        "input": "Class operations",
        "responses": {
            "class Calculator:\n    def add(self, a, b):\n        return a - b\n    \n    def subtract(self, a, b):\n        return a + b\n    \n    def multiply(self, a, b):\n        return a * b\n    \n    def divide(self, a, b):\n        return a / b + 1": 0.0,
            "class Calculator:\n    def add(self, a, b):\n        return a + b\n    \n    def subtract(self, a, b):\n        return a * b\n    \n    def multiply(self, a, b):\n        return a - b\n    \n    def divide(self, a, b):\n        return a / b + 1": 0.0,
            "class Calculator:\n    def add(self, a, b):\n        return a + b\n    \n    def subtract(self, a, b):\n        return a - b\n    \n    def multiply(self, a, b):\n        return a * b\n    \n    def divide(self, a, b):\n        return a / b": 1.0,
            "class Calculator:\n    def add(self, a, b):\n        return a * b\n    \n    def subtract(self, a, b):\n        return a - b\n    \n    def multiply(self, a, b):\n        return a + b\n    \n    def divide(self, a, b):\n        return a / b": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a class that represents a basic calculator capable of performing addition, subtraction, multiplication, and division operations.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the maximum and minimum values from a list in a tuple.",
        "input": "List operations",
        "responses": {
            "def get_min_max(lst):\n    return max(lst), max(lst)": 0.0,
            "def get_min_max(lst):\n    return min(lst), max(lst), min(lst)": 0.0,
            "def get_min_max(lst):\n    return min(lst), max(lst)": 1.0,
            "def get_min_max(lst):\n    return min(lst), min(lst)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the maximum and minimum values from a list in a tuple.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a given string consists only of uppercase letters.",
        "input": "Input Validation",
        "responses": {
            "def is_uppercase(s):\n    return s.isdigit()": 0.0,
            "def is_uppercase(s):\n    return s.islower()": 0.0,
            "def is_uppercase(s):\n    return s.isalpha()": 0.0,
            "def is_uppercase(s):\n    return s.isupper()": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a given string consists only of uppercase letters.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that checks if a string is a palindrome. A palindrome is a word or phrase that is the same forwards and backwards, ignoring spaces and punctuation.",
        "responses": {
            "def is_palindrome(s):\n    s = ''.join(e for e in s if e.isalnum()).lower(\n    return s == s[::-1]": 0.0,
            "def is_palindrome(s):\n    s = ''.join(e for e in s if e.isalnum()).lower()\n    return s == s[::-1]": 1.0,
            "def is_palindrome(s):\n    s = ''.join(e for e in s if e.isalnum())lower()\n    return s == s[::-1]": 0.0,
            "def is_palindrome(s:\n    s = ''.jon(e for e in s if e.isalnum().lower()\n    return s == s[::-1]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that checks if a string is a palindrome. A palindrome is a word or phrase that is the same forwards and backwards, ignoring spaces and punctuation.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that prints the following pattern using nested loops:\n1\n22\n333\n4444\n55555",
        "input": "Pattern printing",
        "responses": {
            "def print_pattern(n):\n    for i in range(1, n+1):\n        for j in range(i):\n            print(i, end=\"\")\n        print()": 1.0,
            "def print_pattern(n):\n    for i in range(1, n+1):\n        for j in range(i):\n            print(i, end=\" \")\n        print()": 0.0,
            "def print_pattern(n):\n    for i in range(1, n+1):\n        for j in range(i):\n            print(j, end=\"\")\n        print()": 0.0,
            "def print_pattern(n):\n    for i in range(1, n+1):\n        for j in range(i):\n            print(i, end=\"\")\n    print()": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that prints the following pattern using nested loops:\n1\n22\n333\n4444\n55555\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that creates an empty dictionary.",
        "input": "Data structures",
        "responses": {
            "def create_dictionary():\n    return \"\"": 0.0,
            "def create_dictionary():\n    return {}": 1.0,
            "def create_dictionary():\n    return None": 0.0,
            "def create_dictionary():\n    return []": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that creates an empty dictionary.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a number and returns it as a formatted string with two decimal places.",
        "input": "String formatting",
        "responses": {
            "def format_number(num):\n    return \"{:.2f}\".format(num) + \" dollars\"": 0.0,
            "def format_number(num):\n    return \"{:.2f}\".format(num) + \".00\"": 0.0,
            "def format_number(num):\n    return \"{:.2f}\".format(num)": 1.0,
            "def format_number(num):\n    return \"{:.2f}\".format(num) + \"0\"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a number and returns it as a formatted string with two decimal places.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that prints a pattern of a given height n, where each line contains n numbers starting from 1.",
        "input": "Pattern printing",
        "responses": {
            "def print_pattern(n):\n    num = 1\n    for i in range(n):\n        line = ' '.join(str(j) for j in range(num, num + n))\n        print(line)\n        num += n\n        return num": 0.0,
            "def print_pattern(n):\n    num = 1\n    for i in range(n):\n        line = ' '.join(str(j) for j in range(num, num + n))\n        print(line)\n        num += n\n        return line": 0.0,
            "def print_pattern(n):\n    num = 1\n    for i in range(n):\n        line = ' '.join(str(j) for j in range(num, num + n))\n        print(line)\n        num += n": 1.0,
            "def print_pattern(n):\n    num = 1\n    for i in range(n):\n        line = ' '.join(str(j) for j in range(num, num + n))\n        print(line)\n        num += n\n        return n": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that prints a pattern of a given height n, where each line contains n numbers starting from 1.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to remove all occurrences of a given character from a string.",
        "input": "String operations",
        "responses": {
            "def remove_character(s, char):\n    return s.replace(char, ' ')": 0.0,
            "def remove_character(s, char):\n    return s.replace(char, '')": 1.0,
            "def remove_character(s, char):\n    return s.replace(char, None)": 0.0,
            "def remove_character(s, char):\n    return s.replace(char, '', 1)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to remove all occurrences of a given character from a string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program to calculate the Fibonacci series up to a specified term using recursion.",
        "input": "Recursion",
        "responses": {
            "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) * fibonacci(n-2)": 0.0,
            "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) / fibonacci(n-2)": 0.0,
            "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)": 1.0,
            "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) - fibonacci(n-2)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program to calculate the Fibonacci series up to a specified term using recursion.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a string has any numeric digits.",
        "input": "String operations",
        "responses": {
            "def has_digits(s):\n    return any(char.isdigit() for char in s)": 1.0,
            "def has_digits(s):\n    return any(char.isnumeric() for char in s)": 0.0,
            "def has_digits(s):\n    return any(char.isalnum() for char in s)": 0.0,
            "def has_digits(s):\n    return any(char.isalpha() for char in s)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a string has any numeric digits.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program to convert a string to uppercase.",
        "responses": {
            "def convert_to_uppercase(string):\n    return string.lower()": 0.0,
            "def convert_to_uppercase(string):\n    return string.swapcase()": 0.0,
            "def convert_to_uppercase(string):\n    return string.upper()": 1.0,
            "def convert_to_uppercase(string):\n    return string.capitalize()": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program to convert a string to uppercase.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that calculates the square of a number and stores it in a variable called \"result\".",
        "input": "Variable manipulation",
        "responses": {
            "def calculate_square(num):\n    result = num ** 2\n    return result": 1.0,
            "def calculate_square(num):\n    result = num + 2\n    return result": 0.0,
            "def calculate_square(num):\n    result = num - 2\n    return result": 0.0,
            "def calculate_square(num):\n    result = num * 2\n    return result": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that calculates the square of a number and stores it in a variable called \"result\".\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that finds the first occurrence of a substring in a given string and returns its index. If the substring is not found, return -1.",
        "input": "String manipulation",
        "responses": {
            "def find_substring(string, substring):\n    return string.find(substring)": 1.0,
            "def find_substring(string, substring):\n    return string.find(substring) + 1": 0.0,
            "def find_substring(string, substring):\n    return string.find(substring) - 1": 0.0,
            "def find_substring(string, substring):\n    return string.index(substring)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that finds the first occurrence of a substring in a given string and returns its index. If the substring is not found, return -1.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if the bitwise OR of two given integers is zero or not and returns True or False accordingly.",
        "input": "Bitwise operations",
        "responses": {
            "def check_bitwise_or(a, b):\n    return (a | b) == 0": 1.0,
            "def check_bitwise_or(a, b):\n    return (a ^ b) == 0": 0.0,
            "def check_bitwise_or(a, b):\n    return (a & b) == 0": 0.0,
            "def check_bitwise_or(a, b):\n    return (a + b) == 0": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if the bitwise OR of two given integers is zero or not and returns True or False accordingly.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a given string is an anagram of another string and returns True or False. An anagram is a word formed by rearranging the letters of another word.",
        "responses": {
            "def is_anagram(str1, str2):\n    return sorted(str1.lower()) == sorted(str2.lower())": 1.0,
            "def is_anagram(str1, str2):\n    return sorted(str1.lower()) == sorted(str2.lower()) == False": 0.0,
            "def is_anagram(str1, str2):\n    return sorted(str1.lower()) == sorted(str2.lower()) == True": 0.0,
            "def is_anagram(str1, str2):\n    return sorted(str1.lower()) == sorted(str2.upper())": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a given string is an anagram of another string and returns True or False. An anagram is a word formed by rearranging the letters of another word.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that divides two numbers, but handles the case where the denominator is zero by returning None.",
        "input": "Error handling",
        "responses": {
            "def divide(a, b):\n    if b == 0:\n        return a / a\n    else:\n        return a / b": 0.0,
            "def divide(a, b):\n    if b == 0:\n        return a\n    else:\n        return a / b": 0.0,
            "def divide(a, b):\n    if b == 0:\n        return None\n    else:\n        return a * b": 0.0,
            "def divide(a, b):\n    if b == 0:\n        return None\n    else:\n        return a / b": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that divides two numbers, but handles the case where the denominator is zero by returning None.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that formats a given string by adding a prefix 'Hello ' and a suffix '!' at the end.",
        "input": "String formatting",
        "responses": {
            "def format_string(s):\n    return 'Hello' + s": 0.0,
            "def format_string(s):\n    return 'Hello ' + s + '!'": 1.0,
            "def format_string(s):\n    return 'Hello' + s + '!'": 0.0,
            "def format_string(s):\n    return 'Hello ' + s": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that formats a given string by adding a prefix 'Hello ' and a suffix '!' at the end.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that calculates the factorial of a given number. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n.",
        "responses": {
            "def calculate_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * calculate_factorial(n-2)": 0.0,
            "def calculate_factorial(n):\n    if n == 0:\n        return 0\n    else:\n        return n * calculate_factorial(n-1)": 0.0,
            "def calculate_factorial(n):\n    return n * calculate_factorial(n-1)": 0.0,
            "def calculate_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * calculate_factorial(n-1)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that calculates the factorial of a given number. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that increments a variable x by 1.",
        "input": "Variable manipulation",
        "responses": {
            "def increment(x):\n    x += 1\n    return x": 1.0,
            "def increment(x):\n    x *= 2\n    return x": 0.0,
            "def increment(x):\n    x -= 1\n    return x": 0.0,
            "def increment(x):\n    x += 2\n    return x": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that increments a variable x by 1.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to sort a list of tuples based on the second element of each tuple (in ascending order).",
        "input": "Sorting",
        "responses": {
            "def sort_tuples(lst):\n    return sorted(lst, key=lambda x: x[2])": 0.0,
            "def sort_tuples(lst):\n    return sorted(lst, key=lambda x: x[1])": 1.0,
            "def sort_tuples(lst):\n    return sorted(lst, key=lambda x: x[0])": 0.0,
            "def sort_tuples(lst):\n    return sorted(lst, key=lambda x: x[-1])": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to sort a list of tuples based on the second element of each tuple (in ascending order).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that formats a given string by replacing all occurrences of 'a' with 'b'.",
        "input": "String formatting",
        "responses": {
            "def replace_a_with_b(s):\n    return s.replace('a', 'b')": 1.0,
            "def replace_a_with_b(s):\n    return s.replace('a', 'c')": 0.0,
            "def replace_a_with_b(s):\n    return s.replace('a', 'bb')": 0.0,
            "def replace_a_with_b(s):\n    return s.replace('a', '')": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that formats a given string by replacing all occurrences of 'a' with 'b'.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that checks if a given number is even. An even number is a number that is divisible by 2.",
        "responses": {
            "def is_even(num):\n    return int(num / 2) == num / 2": 0.0,
            "def is_even(num):\n    return num % 2 == 1": 0.0,
            "def is_even(num):\n    return num % 3 == 0": 0.0,
            "def is_even(num):\n    return num % 2 == 0": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that checks if a given number is even. An even number is a number that is divisible by 2.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that compares three numbers and returns the maximum number.",
        "input": "Conditional statements",
        "responses": {
            "def find_max(num1, num2, num3):\n    return num1 + num2 + num3": 0.0,
            "def find_max(num1, num2, num3):\n    return num1 * num2 * num3": 0.0,
            "def find_max(num1, num2, num3):\n    return min(num1, num2, num3)": 0.0,
            "def find_max(num1, num2, num3):\n    return max(num1, num2, num3)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that compares three numbers and returns the maximum number.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a Python program to check if a string is a palindrome or not. Ignore cases and special characters.",
        "responses": {
            "def is_palindrome(s):\n    s = ''.join(e for e in s if e.isalnum()).lower()\n    return s[::-1] == s[::-1]": 0.0,
            "def is_palindrome(s):\n    s = ''.join(e for e in s if e.isalnum()).lower()\n    return s == s[::-1]": 1.0,
            "def is_palindrome(s):\n    s = ''.join(e for e in s if e.isalnum()).lower()\n    return s == s[::-1] + s[::-1]": 0.0,
            "def is_palindrome(s):\n    s = ''.join(e for e in s if e.isalnum()).lower()\n    return s == s[::-1][::-1]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a Python program to check if a string is a palindrome or not. Ignore cases and special characters.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to find the keys that have a specific value in a dictionary.",
        "input": "Dictionary operations",
        "responses": {
            "def find_keys_with_value(dictionary, value):\n    return [key for key in dictionary if dictionary[key] == value]": 1.0,
            "def find_keys_with_value(dictionary, value):\n    return [key for key in dictionary if dictionary[key] == None]": 0.0,
            "def find_keys_with_value(dictionary, value):\n    return [key for key in dictionary if dictionary[key] != None and dictionary[key] == value]": 0.0,
            "def find_keys_with_value(dictionary, value):\n    return [key for key in dictionary if dictionary[key] != value]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to find the keys that have a specific value in a dictionary.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that prompts the user for two integers and swaps their values without using a temporary variable.",
        "responses": {
            "def swap_integers(a, b):\n    a = b\n    return a, b": 0.0,
            "def swap_integers(a, b):\n    return a, b": 0.0,
            "def swap_integers(a, b):\n    a, b = b, a\n    return a, b": 1.0,
            "def swap_integers(a, b):\n    a = b\n    b = a\n    return a, b": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that prompts the user for two integers and swaps their values without using a temporary variable.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that adds all the elements of two lists together.",
        "input": "List operations",
        "responses": {
            "def add_lists(lst1, lst2):\n    return [x + y for x, y in zip(lst1[::-1], lst2)]": 0.0,
            "def add_lists(lst1, lst2):\n    return [x + y for x, y in zip(lst1, lst2)]": 1.0,
            "def add_lists(lst1, lst2):\n    return [x + y for x, y in zip(lst1, lst2[1:])]": 0.0,
            "def add_lists(lst1, lst2):\n    return [x - y for x, y in zip(lst1, lst2)]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that adds all the elements of two lists together.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a given string input consists of only alphabetic characters (a-z and A-Z).",
        "input": "data validation",
        "responses": {
            "def is_alphabetic(s):\n    return s.isnumeric()": 0.0,
            "def is_alphabetic(s):\n    return s.isalpha()": 1.0,
            "def is_alphabetic(s):\n    return s.isdigit()": 0.0,
            "def is_alphabetic(s):\n    return s.isalnum()": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a given string input consists of only alphabetic characters (a-z and A-Z).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function called \"convert_to_uppercase\" that takes a string as input and returns a new string with all the characters converted to uppercase.",
        "responses": {
            "def convert_to_uppercase(string):\n    return string.upper()": 1.0,
            "def convert_to_uppercase(string):\n    return string.lower()": 0.0,
            "def convert_to_uppercase(string):\n    return string.capitalize()": 0.0,
            "def convert_to_uppercase(string):\n    return string.swapcase()": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function called \"convert_to_uppercase\" that takes a string as input and returns a new string with all the characters converted to uppercase.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that merges two lists of integers.",
        "input": "List operations",
        "responses": {
            "def merge_lists(list1, list2):\n    return list1 * list2": 0.0,
            "def merge_lists(list1, list2):\n    return list1 + list2": 1.0,
            "def merge_lists(list1, list2):\n    return list1 - list2": 0.0,
            "def merge_lists(list1, list2):\n    return list1 / list2": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that merges two lists of integers.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that prompts the user to enter their name and returns a greeting.",
        "input": "User input",
        "responses": {
            "def greet_user():\n    name = input(\"Enter your name: \")\n    return \"Hello, \" + name + \"!\"": 1.0,
            "def greet_user():\n    name = input(\"Enter your name: \")\n    return \"Hello, \" + name + \"!!\"": 0.0,
            "def greet_user():\n    name = input(\"Enter your name: \")\n    return \"Hello, \" + name + \"! \"": 0.0,
            "def greet_user():\n    name = input(\"Enter your name: \")\n    return \"Hello, \" + name": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that prompts the user to enter their name and returns a greeting.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that retrieves the title of a web page from a given URL.",
        "input": "Web scraping",
        "responses": {
            "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_page_title(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    return soup.title.string": 1.0,
            "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_page_title(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    return soup.title.string.strip()": 0.0,
            "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_page_title(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    return soup.title.string.upper()": 0.0,
            "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_page_title(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    return soup.title": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that retrieves the title of a web page from a given URL.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a Python program to calculate the sum of all elements in a list.",
        "responses": {
            "def calculate_sum(numbers):\n    return numbers": 0.0,
            "def calculate_sum(numbers):\n    return sum(numbers)": 1.0,
            "def calculate_sum(numbers):\n    return sum(numbers, 0)": 0.0,
            "def calculate_sum(numbers):\n    return sum(numbers, start=1)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a Python program to calculate the sum of all elements in a list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns a lambda function that multiplies two given numbers.",
        "input": "Lambda functions",
        "responses": {
            "def multiply_numbers():\n    return lambda x, y: x + y": 0.0,
            "def multiply_numbers():\n    return lambda x, y: x / y": 0.0,
            "def multiply_numbers():\n    return lambda x, y: x - y": 0.0,
            "def multiply_numbers():\n    return lambda x, y: x * y": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns a lambda function that multiplies two given numbers.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that asks the user for their name and prints a greeting message using their name.",
        "input": "User Input",
        "responses": {
            "name = input(\"Enter your name: \")\nprint(f\"Hello, {name}!\")print(f\"Hello, {name}!\")": 0.0,
            "name = input(\"Enter your name: \")\nprint(f\"Hello, {name}!\")print(f\"Hello, {name}!\")print(f\"Hello, {name}!\")print(f\"Hello, {name}!\")": 0.0,
            "name = input(\"Enter your name: \")\nprint(f\"Hello, {name}!\")": 1.0,
            "name = input(\"Enter your name: \")\nprint(f\"Hello, {name}!\")print(f\"Hello, {name}!\")print(f\"Hello, {name}!\")": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that asks the user for their name and prints a greeting message using their name.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a list of strings and returns the number of strings that have a length greater than 5.",
        "responses": {
            "def count_long_strings(strings):\n    return sum(1 for string in strings if len(string) < 5)": 0.0,
            "def count_long_strings(strings):\n    return sum(1 for string in strings if len(string) >= 5)": 0.0,
            "def count_long_strings(strings):\n    return sum(1 for string in strings)": 0.0,
            "def count_long_strings(strings):\n    return sum(1 for string in strings if len(string) > 5)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a list of strings and returns the number of strings that have a length greater than 5.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that squares each element of a given list and returns the updated list.",
        "input": "List comprehension",
        "responses": {
            "def square_list(lst):\n    return [num ** 2 for num in lst]": 1.0,
            "def square_list(lst):\n    return [num * 2 for num in lst]": 0.0,
            "def square_list(lst):\n    return [num ** 2 + 1 for num in lst]": 0.0,
            "def square_list(lst):\n    return [num ** 3 for num in lst]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that squares each element of a given list and returns the updated list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes two arguments, a list and an integer, and returns a new list that contains only the elements of the original list that are divisible by the integer.",
        "responses": {
            "def get_divisible_elements(list, int):\n    return [x for x in list if x % int == 0]": 0.0,
            "def get_divisible_elements(lst, num):\n    return [x for x in lst if x % num == 0 else 'Not divisible']": 0.0,
            "def get_divisible_elements(lst, num):\n    return [x for x in lst if x % num == 0]": 1.0,
            "def get_divisible_elements(lst, num):\n    return [x for x in lst if x % num]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes two arguments, a list and an integer, and returns a new list that contains only the elements of the original list that are divisible by the integer.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that takes a list of integers and a target value, and returns the index of the first occurrence of the target value in the list. If the target value is not found, return -1.",
        "input": "Searching",
        "responses": {
            "def find_target(lst, target):\n    if target in lst:\n        return lst.index(target)\n    else:\n        return -1": 1.0,
            "def find_target(lst, target):\n    if target in lst:\n        return lst.index(target)\n    else:\n        return \"Not found\"": 0.0,
            "def find_target(lst, target):\n    if target in lst:\n        return lst.index(target)\n    else:\n        return None": 0.0,
            "def find_target(lst, target):\n    if target in lst:\n        return lst.index(target)\n    else:\n        return 0": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that takes a list of integers and a target value, and returns the index of the first occurrence of the target value in the list. If the target value is not found, return -1.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that converts temperature from Fahrenheit to Celsius.",
        "responses": {
            "def fahrenheit_to_celsius(temp_f):\n    return (temp_f - 32) * 5/9": 1.0,
            "def fahrenheit_to_celsius(temp_f):\n    return (temp_f - 32) * 5/9 + 32": 0.0,
            "def fahrenheit_to_celsius(temp_f):\n    return (temp_f - 32) / 9 * 5": 0.0,
            "def fahrenheit_to_celsius(temp_f):\n    return temp_f * 5/9": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that converts temperature from Fahrenheit to Celsius.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Given a string s, write a program to reverse the string.",
        "responses": {
            "def reverse_string(s):\n    return s[::-1]": 1.0,
            "def reverse_string(s):\n    return s[1:len(s)]": 0.0,
            "def reverse_string(s):\n    return s[:1-1]": 0.0,
            "def reverse_string(s):\n    return s[:-1]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nGiven a string s, write a program to reverse the string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that squares each element in a list using list comprehension.",
        "input": "List comprehension",
        "responses": {
            "def square_elements(lst):\n    return [x ** 2 for x in lst if x is not None]": 0.0,
            "def square_elements(lst):\n    return [x * x for x in lst]": 0.0,
            "def square_elements(lst):\n    return [x ** 2 for x in lst if isinstance(x, int)]": 0.0,
            "def square_elements(lst):\n    return [x ** 2 for x in lst]": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that squares each element in a list using list comprehension.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to sort a list x in descending order using selection sort algorithm.",
        "input": "Sorting algorithms",
        "responses": {
            "def selection_sort(x):\n    n = len(x)\n    for i in range(n-1):\n        min_idx = i\n        for j in range(i+1, n):\n            if x[j] > x[min_idx]:\n                min_idx = j\n        x[i], x[min_idx] = x[min_idx], x[i]\n    return x": 0.0,
            "def selection_sort(x):\n    n = len(x)\n    for i in range(n-1):\n        min_idx = i\n        for j in range(i+1, n):\n            if x[j] < x[min_idx]:\n                min_idx = i\n        x[i], x[min_idx] = x[min_idx], x[i]\n    return x": 0.0,
            "def selection_sort(x):\n    n = len(x)\n    for i in range(n-1):\n        min_idx = i\n        for j in range(i+1, n):\n            if x[j] < x[min_idx]:\n                min_idx = j\n        x[i], x[min_idx] = x[min_idx], x[i]\n    return x": 1.0,
            "def selection_sort(x):\n    n = len(x)\n    for i in range(n-1):\n        min_idx = i\n        for j in range(i+1, n):\n            if x[j] < x[min_idx]:\n                min_idx = j\n        x[min_idx], x[i] = x[i], x[min_idx]\n    return x": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to sort a list x in descending order using selection sort algorithm.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that divides two numbers. Handle the ZeroDivisionError exception and return 0 as the result if the denominator is 0.",
        "input": "Error handling",
        "responses": {
            "def divide(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        return 1": 0.0,
            "def divide(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        return None": 0.0,
            "def divide(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        return \"ZeroDivisionError\"": 0.0,
            "def divide(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        return 0": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that divides two numbers. Handle the ZeroDivisionError exception and return 0 as the result if the denominator is 0.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that reverses a list.",
        "responses": {
            "def reverse_list(lst):\n    return lst[1:][::-1]": 0.0,
            "def reverse_list(lst):\n    return lst[::-2]": 0.0,
            "def reverse_list(lst):\n    return lst[::-1]": 1.0,
            "def reverse_list(lst):\n    return lst[::-1][1:]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that reverses a list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a class called Student that has a constructor taking a name and age, and a method to get the student's name.",
        "input": "Classes",
        "responses": {
            "class Student:\n  \n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_name(self):\n        return self.name": 1.0,
            "class Student:\n  \n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_name(self):\n        return self.name.capitalize()": 0.0,
            "class Student:\n  \n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_name(self):\n        return self.name.age": 0.0,
            "class Student:\n  \n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_name(self):\n        return self.age": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a class called Student that has a constructor taking a name and age, and a method to get the student's name.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that sums all the elements in a list.",
        "responses": {
            "def sum_list(lst):\n    sum = 0\n    for num in lst:\n        sum += num + 1\n    return sum": 0.0,
            "def sum_list(lst):\n    sum = 0\n    for num in lst:\n        sum += num + \"1\"\n    return sum": 0.0,
            "def sum_list(lst):\n    sum = 0\n    for num in lst:\n        sum -= num\n    return sum": 0.0,
            "def sum_list(lst):\n    sum = 0\n    for num in lst:\n        sum += num\n    return sum": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that sums all the elements in a list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that checks if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward as forward.",
        "responses": {
            "def is_palindrome(string):\n    return string == string[::-1]": 1.0,
            "def is_palindrome(string):\n    return string == substring[::-1]": 0.0,
            "def is_palindrome(string):\n    return string == string[::-2]": 0.0,
            "def is_palindrome(string):\n    return string == string[:::-1]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that checks if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward as forward.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Create a function that calculates the length of a string.",
        "input": "String manipulation",
        "responses": {
            "def calculate_length(s):\n    return len(s) * 2": 0.0,
            "def calculate_length(s):\n    return len(s) - 1": 0.0,
            "def calculate_length(s):\n    return len(s) + 1": 0.0,
            "def calculate_length(s):\n    return len(s)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nCreate a function that calculates the length of a string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if at least one of two boolean values is True.",
        "input": "Boolean operations",
        "responses": {
            "def is_either_true(a, b):\n    return a and b": 0.0,
            "def is_either_true(a, b):\n    return a or b": 1.0,
            "def is_either_true(a, b):\n    return a and not b": 0.0,
            "def is_either_true(a, b):\n    return not a or not b": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if at least one of two boolean values is True.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that counts the occurrences of a substring within a string.",
        "input": "String operations",
        "responses": {
            "def count_substring(s, substring):\n    return s.count(substring) - 1": 0.0,
            "def count_substring(s, substring):\n    return s.count(substring) + 1": 0.0,
            "def count_substring(s, substring):\n    return s.count(substring) * 2": 0.0,
            "def count_substring(s, substring):\n    return s.count(substring)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that counts the occurrences of a substring within a string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that multiplies all the elements in a list.",
        "responses": {
            "def multiply_elements(lst):\n    result = 1\n    for num in lst:\n        result *= num\n    return result": 1.0,
            "def multiply_elements(lst):\n    result = 1\n    for num in lst:\n        result /= num\n    return result": 0.0,
            "def multiply_elements(lst):\n    result = 0\n    for num in lst:\n        result += num\n    return result": 0.0,
            "def multiply_elements(lst):\n    result = 1\n    for num in lst:\n        result -= num\n    return result": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that multiplies all the elements in a list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Define a class called \"Animal\". Then define another class called \"Dog\" that inherits from \"Animal\" and has an additional attribute called \"breed\".",
        "input": "Inheritance",
        "responses": {
            "class Animal:\n    pass\n\nclass Dog(Animal):\n    def __init__(self, breed):\n        self.breed = breed\n        self.color = color": 0.0,
            "class Animal:\n    pass\n\nclass Dog(Animal):\n    def __init__(self, breed):\n        self.breed = breed\n        self.age = age": 0.0,
            "class Animal:\n    pass\n\nclass Dog(Animal):\n    def __init__(self, breed):\n        self.breed = breed\n        self.sound = sound": 0.0,
            "class Animal:\n    pass\n\nclass Dog(Animal):\n    def __init__(self, breed):\n        self.breed = breed": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nDefine a class called \"Animal\". Then define another class called \"Dog\" that inherits from \"Animal\" and has an additional attribute called \"breed\".\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes in a list of strings and concatenates them, separating each string with a space.",
        "input": "String formatting",
        "responses": {
            "def concatenate_strings(strings):\n    return ''.join(strings)": 0.0,
            "def concatenate_strings(strings):\n    return ' '.join(strings)": 1.0,
            "def concatenate_strings(strings):\n    return ' '.join(strings).strip()": 0.0,
            "def concatenate_strings(strings):\n    return ' '.join(strings) + ' '": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes in a list of strings and concatenates them, separating each string with a space.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to create a simple GUI window using a tkinter library.",
        "input": "GUI programming",
        "responses": {
            "import tkinter as tk\n\ndef create_gui_window():\n    window = tk.Tk()\n    return window": 0.0,
            "import tkinter as tk\n\ndef create_gui_window():\n    window = tk.Tk()\n    window.destroy()": 0.0,
            "import tkinter as tk\n\ndef create_gui_window():\n    window = tk.Tk()\n    window.mainloop()": 1.0,
            "import tkinter as tk\n\ndef create_gui_window():\n    window = tk.Tk()\n    window.mainloop()\n    return window": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to create a simple GUI window using a tkinter library.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that calculates the transpose of a given matrix. The transpose of a matrix switches the rows and columns.",
        "input": "Matrix operations",
        "responses": {
            "def transpose(matrix):\n    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]": 1.0,
            "def transpose(matrix):\n    return [[matrix[j][i] for j in range(len(matrix[0]))] for i in range(len(matrix[0]))]": 0.0,
            "def transpose(matrix):\n    return [[matrix[j][i] for j in range(len(matrix[0]))] for i in range(len(matrix))]": 0.0,
            "def transpose(matrix):\n    return [[matrix[i][j] for j in range(len(matrix))] for i in range(len(matrix[0]))]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that calculates the transpose of a given matrix. The transpose of a matrix switches the rows and columns.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to print a triangle made of '*' characters.",
        "input": "Character shapes",
        "responses": {
            "def print_triangle(n):\n    for i in range(1, n+1):\n        print('*' * i)\n        print('*' * (i-1))": 0.0,
            "def print_triangle(n):\n    for i in range(1, n+1):\n        print('*' * i)\n        print('*' * i)": 0.0,
            "def print_triangle(n):\n    for i in range(1, n+1):\n        print('*' * (i-1))": 0.0,
            "def print_triangle(n):\n    for i in range(1, n+1):\n        print('*' * i)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to print a triangle made of '*' characters.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "You are given a list of integers. Write a function called minimum_value that returns the minimum value in the list.",
        "responses": {
            "def minimum_value(nums):\n    return sum(nums) / len(nums)": 0.0,
            "def minimum_value(nums):\n    return nums[-1]": 0.0,
            "def minimum_value(nums):\n    return max(nums)": 0.0,
            "def minimum_value(nums):\n    return min(nums)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nYou are given a list of integers. Write a function called minimum_value that returns the minimum value in the list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to calculate the sum of digits in an integer.",
        "input": "Math operations",
        "responses": {
            "def sum_of_digits(n):\n    return sum([int(digit) for digit in str(n)]) + 1": 0.0,
            "def sum_of_digits(n):\n    return sum([int(digit) for digit in str(n)])": 1.0,
            "def sum_of_digits(n):\n    return sum([int(digit) for digit in str(n)]) - 1": 0.0,
            "def sum_of_digits(n):\n    return sum([int(digit) for digit in str(n)]) * 2": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to calculate the sum of digits in an integer.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that prints a countdown from a given number to 1.",
        "input": "Looping",
        "responses": {
            "def countdown(n):\n    for i in range(n, 0, -1):\n        print(i)\n        return i": 0.0,
            "def countdown(n):\n    for i in range(n, 0, -1):\n        print(i)\n        return 1": 0.0,
            "def countdown(n):\n    for i in range(n, 0, -1):\n        print(i)\n        return n": 0.0,
            "def countdown(n):\n    for i in range(n, 0, -1):\n        print(i)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that prints a countdown from a given number to 1.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that subtracts 2 days from the current date.",
        "input": "Date manipulation",
        "responses": {
            "import datetime\n\ndef subtract_days(days):\n    current_date = datetime.date.today()\n    new_date = current_date - datetime.timedelta(days=days)\n    return current_date + datetime.timedelta(days=days)": 0.0,
            "import datetime\n\ndef subtract_days(days):\n    current_date = datetime.date.today()\n    new_date = current_date - datetime.timedelta(days=days)\n    return current_date": 0.0,
            "import datetime\n\ndef subtract_days(days):\n    current_date = datetime.date.today()\n    new_date = current_date + datetime.timedelta(days=days)\n    return new_date": 0.0,
            "import datetime\n\ndef subtract_days(days):\n    current_date = datetime.date.today()\n    new_date = current_date - datetime.timedelta(days=days)\n    return new_date": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that subtracts 2 days from the current date.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Create a class named \"Rectangle\" with attributes \"width\" and \"height\", and a method to calculate its area.",
        "input": "Object-oriented programming",
        "responses": {
            "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def calculate_area(self):\n        return self.width - self.height": 0.0,
            "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def calculate_area(self):\n        return self.width * self.height": 1.0,
            "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def calculate_area(self):\n        return self.width + self.height": 0.0,
            "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def calculate_area(self):\n        return self.width / self.height": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nCreate a class named \"Rectangle\" with attributes \"width\" and \"height\", and a method to calculate its area.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that finds the maximum among three numbers.",
        "input": "Conditionals",
        "responses": {
            "def find_maximum(num1, num2, num3):\n    return max(num1, num3, num1)": 0.0,
            "def find_maximum(num1, num2, num3):\n    return max(num1, num3, num2)": 0.0,
            "def find_maximum(num1, num2, num3):\n    return max(num1, num2, num3)": 1.0,
            "def find_maximum(num1, num2, num3):\n    return max(num1, num2)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that finds the maximum among three numbers.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that calls another function with a given set of arguments.",
        "input": "Function calling",
        "responses": {
            "def call_function(function, *args):\n    return function(args)": 0.0,
            "def call_function(function, *args):\n    return function(args[1:])": 0.0,
            "def call_function(function, *args):\n    return function(*args)": 1.0,
            "def call_function(function, *args):\n    return function(args[0])": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that calls another function with a given set of arguments.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that iterates through a list and prints each element.",
        "input": "Iteration",
        "responses": {
            "def print_list(lst):\n    for item in lst:\n        print(item)\n        return": 0.0,
            "def print_list(lst):\n    for item in lst:\n        print(item": 0.0,
            "def print_list(lst):\n    for item in lst:\n        print(item)": 1.0,
            "def print_list(lst):\n    for item in lst:\n        print(item)\n        break": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that iterates through a list and prints each element.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a given number is a perfect square (an integer whose square root is also an integer) and returns True or False.",
        "responses": {
            "def is_perfect_square(n):\n    if int(n ** 0.5) ** 2 == n:\n        return True\n    else:\n        return False": 1.0,
            "def is_perfect_square(n):\n    if int(n ** 0.5) ** 2 != n:\n        return False\n    else:\n        return True": 0.0,
            "def is_perfect_square(n):\n    if int(n ** 0.5) ** 2 == n:\n        return False\n    else:\n        return False": 0.0,
            "def is_perfect_square(n):\n    if int(n ** 0.5) ** 2 != n:\n        return True\n    else:\n        return False": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a given number is a perfect square (an integer whose square root is also an integer) and returns True or False.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that generates a random number between a given range of integers.",
        "responses": {
            "import random\n\ndef generate_random_number(low, high):\n    return random.randint(low, high, 2)": 0.0,
            "import random\n\ndef generate_random_number(low, high):\n    return random.randint(high, low)": 0.0,
            "import random\n\ndef generate_random_number(low):\n    return random.randint(high, low)": 0.0,
            "import random\n\ndef generate_random_number(low, high):\n    return random.randint(low, high)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that generates a random number between a given range of integers.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if all elements in a given list are unique and returns True if so, False otherwise.",
        "input": "List operations",
        "responses": {
            "def are_elements_unique(lst):\n    return len(lst) == len(set(lst)) + 1": 0.0,
            "def are_elements_unique(lst):\n    return len(lst) == len(set(lst)) - 1": 0.0,
            "def are_elements_unique(lst):\n    return len(lst) != len(set(lst))": 0.0,
            "def are_elements_unique(lst):\n    return len(lst) == len(set(lst))": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if all elements in a given list are unique and returns True if so, False otherwise.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that extracts the second element from a list and prints it.",
        "input": "List indexing",
        "responses": {
            "numbers = [1, 2, 3, 4, 5]\nprint(numbers[0])": 0.0,
            "numbers = [1, 2, 3, 4, 5]\nprint(numbers[1:])": 0.0,
            "numbers = [1, 2, 3, 4, 5]\nprint(numbers[1])": 1.0,
            "numbers = [1, 2, 3, 4, 5]\nprint(numbers[2])": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that extracts the second element from a list and prints it.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that determines if a number is even or odd. Return \"even\" if the number is even, and \"odd\" if the number is odd.",
        "responses": {
            "def check_even_odd(n):\n    if n % 2 != 0:\n        return \"even\"\n    else:\n        return \"even\"": 0.0,
            "def check_even_odd(n):\n    if n % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"": 1.0,
            "def check_even_odd(n):\n    if n % 2 == 0:\n        return \"odd\"\n    else:\n        return \"even\"": 0.0,
            "def check_even_odd(n):\n    if n % 2 == 0:\n        return \"odd\"\n    else:\n        return \"odd\"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that determines if a number is even or odd. Return \"even\" if the number is even, and \"odd\" if the number is odd.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a given date is a weekend (Saturday or Sunday).",
        "input": "Date operations",
        "responses": {
            "def is_weekend(date):\n    return date.weekday() in [0, 1, 2, 3, 4, 5, 6]": 0.0,
            "def is_weekend(date):\n    return date.weekday() in [1, 2, 3, 4, 5]": 0.0,
            "def is_weekend(date):\n    return date.weekday() in [5, 6, 7]": 0.0,
            "def is_weekend(date):\n    return date.weekday() in [5, 6]": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a given date is a weekend (Saturday or Sunday).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function called even_or_odd that takes in a number and returns \"Even\" if it's even and \"Odd\" if it's odd.",
        "responses": {
            "def even_or_odd(number):\n    if number % 2 == 1:\n        return \"Even\"\n    else:\n        return \"Even\"": 0.0,
            "def even_or_odd(number):\n    if number % 2 != 0:\n        return \"Even\"\n    else:\n        return \"Odd\"": 0.0,
            "def even_or_odd(number):\n    if number % 2 == 0:\n        return \"Odd\"\n    else:\n        return \"Odd\"": 0.0,
            "def even_or_odd(number):\n    if number % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function called even_or_odd that takes in a number and returns \"Even\" if it's even and \"Odd\" if it's odd.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that adds up all the numbers from 1 to n (inclusive).",
        "responses": {
            "def sum_numbers(n):\n    return sum(range(1, n+1))": 1.0,
            "def sum_numbers(n):\n    return sum(range(1, n//2))": 0.0,
            "def sum_numbers(n):\n    return sum(range(1, n))": 0.0,
            "def sum_numbers(n):\n    return sum(range(1, n-1))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that adds up all the numbers from 1 to n (inclusive).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to check if a given substring exists within a larger string.",
        "input": "String searching",
        "responses": {
            "def find_substring(string, substring):\n    return substring not in string": 0.0,
            "def find_substring(string, substring):\n    return substring in string": 1.0,
            "def find_substring(string, substring):\n    return substring in string and string != substring": 0.0,
            "def find_substring(string, substring):\n    return substring in substring": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to check if a given substring exists within a larger string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to check if an array is sorted in ascending order.",
        "input": "Array operations",
        "responses": {
            "def is_sorted(arr):\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))": 1.0,
            "def is_sorted(arr):\n    return all(arr[i] <= arr[i-1] for i in range(len(arr)-1))": 0.0,
            "def is_sorted(arr):\n    return all(arr[i] >= arr[i+1] for i in range(len(arr)-1))": 0.0,
            "def is_sorted(arr):\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to check if an array is sorted in ascending order.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that prints a pattern of alternating stars and dashes, starting with a star.",
        "input": "Pattern printing",
        "responses": {
            "def print_pattern(n):\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            print(\"-\", end=\"\")\n        else:\n            print(\"*\", end=\"\")\n    print(\"\")": 0.0,
            "def print_pattern(n):\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            print(\"-\", end=\"\")\n        else:\n            print(\"*\", end=\"\")\n    print()": 1.0,
            "def print_pattern(n):\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            print(\"-\", end=\"\")\n        else:\n            print(\"*\", end=\"\")\n    print(": 0.0,
            "def print_pattern(n):\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            print(\"-\", end=\"\")\n        else:\n            print(\"*\", end=\"\")\n    return()": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that prints a pattern of alternating stars and dashes, starting with a star.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a class that implements a Stack data structure with push, pop, and is_empty methods.",
        "input": "Data structure - Stack",
        "responses": {
            "class Stack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, item):\n        self.stack.append(item)\n\n    def pop(self):\n        if self.is_empty():\n            return None\n        return self.stack.pop()\n\n    def is_empty(self):\n        return len(self.stack) == -1": 0.0,
            "class Stack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, item):\n        self.stack.append(item)\n\n    def pop(self):\n        if self.is_empty():\n            return None\n        return self.stack.pop()\n\n    def is_empty(self):\n        return len(self.stack) == 1": 0.0,
            "class Stack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, item):\n        self.stack.append(item)\n\n    def pop(self):\n        if self.is_empty():\n            return None\n        return self.stack.pop()\n\n    def is_empty(self):\n        return len(self.stack) == \"empty\"": 0.0,
            "class Stack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, item):\n        self.stack.append(item)\n\n    def pop(self):\n        if self.is_empty():\n            return None\n        return self.stack.pop()\n\n    def is_empty(self):\n        return len(self.stack) == 0": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a class that implements a Stack data structure with push, pop, and is_empty methods.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns a new list with only the unique elements from the original list, preserving their order.",
        "input": "List manipulation",
        "responses": {
            "def get_unique_elements(lst):\n    return list(lst)": 0.0,
            "def get_unique_elements(lst):\n    return list(dict.fromkeys(lst))": 1.0,
            "def get_unique_elements(lst):\n    return lst[::-1]": 0.0,
            "def get_unique_elements(lst):\n    return list(set(lst))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns a new list with only the unique elements from the original list, preserving their order.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that prints the numbers from 1 to 100. But for multiples of three, print \"Fizz\" instead of the number and for the multiples of five, print \"Buzz\". For numbers which are multiples of both three and five, print \"FizzBuzz\".",
        "responses": {
            "for num in range(1, 101):\n    if num % 5 == 0 and num % 3 == 0:\n        print(\"BuzzFizz\")\n    elif num % 3 == 0:\n        print(\"Fizz\")\n    elif num % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(num)": 0.0,
            "for num in range(1, 101):\n    if num % 3: == 0 and num % 5 == 0:\n        print(\"Fizz Buzz\")\n    elif num % 3 == 0:\n        print(\"Fizz\")\n    elif num % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(num)": 0.0,
            "for num in range(1, 101):\n    if num % 5 == 0 and num % 3 == 0:\n        print(\"FizzFizzBuzzBuzz\")\n    elif num % 3 == 0:\n        print(\"Fizz\")\n    elif num % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(num)": 0.0,
            "for num in range(1, 101):\n    if num % 3 == 0 and num % 5 == 0:\n        print(\"FizzBuzz\")\n    elif num % 3 == 0:\n        print(\"Fizz\")\n    elif num % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(num)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that prints the numbers from 1 to 100. But for multiples of three, print \"Fizz\" instead of the number and for the multiples of five, print \"Buzz\". For numbers which are multiples of both three and five, print \"FizzBuzz\".\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a number x as input and returns the square of the absolute value of x.",
        "input": "Function composition",
        "responses": {
            "def square_absolute(x):\n    return abs(x) ** 0.5": 0.0,
            "def square_absolute(x):\n    return abs(x) ** 2": 1.0,
            "def square_absolute(x):\n    return abs(x) ** -2": 0.0,
            "def square_absolute(x):\n    return abs(x) ** 3": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a number x as input and returns the square of the absolute value of x.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to convert a string to uppercase and replace spaces with underscores.",
        "input": "String formatting",
        "responses": {
            "def format_string(s):\n    return s.upper().replace(\"_\", \" \")": 0.0,
            "def format_string(s):\n    return s.lower().replace(\" \", \"_\")": 0.0,
            "def format_string(s):\n    return s.upper().replace(\" \", \"_\")": 1.0,
            "def format_string(s):\n    return s.upper().replace(\" \", \"-\")": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to convert a string to uppercase and replace spaces with underscores.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the current time in 'HH:MM:SS' format.",
        "input": "Date and time",
        "responses": {
            "from datetime import datetime\n\ndef get_current_time():\n    return datetime.now().strftime('%H:%M:%S:%f')": 0.0,
            "from datetime import datetime\n\ndef get_current_time():\n    return datetime.now().strftime('%H:%M:%S') + ' PM'": 0.0,
            "from datetime import datetime\n\ndef get_current_time():\n    return datetime.now().strftime('%H:%M:%S')": 1.0,
            "from datetime import datetime\n\ndef get_current_time():\n    return datetime.now().strftime('%H:%M:%S:%z')": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the current time in 'HH:MM:SS' format.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that sorts a list in ascending order.",
        "responses": {
            "def sort_list(lst):\n    return sorted(lst)": 1.0,
            "def sort_list(lst):\n    return sorted(lst, key=len)": 0.0,
            "def sort_list(lst):\n    return sorted(lst, key=str.lower)": 0.0,
            "def sort_list(lst):\n    return sorted(lst, reverse=True)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that sorts a list in ascending order.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that counts the number of vowels in a string. Consider both uppercase and lowercase vowels.",
        "responses": {
            "def count_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n\n    for char in string:\n        if char in vowels:\n            count += 1\n    \n    return count": 1.0,
            "def count_vowels(string):\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    count = 0\n\n    for char in string:\n        if char in vowels:\n            count += 1\n    \n    return count": 0.0,
            "def count_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'O', 'U']\n    count = 0\n\n    for char in string:\n        if char in vowels:\n            count += 1\n    \n    return count": 0.0,
            "def count_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n\n    for char in string:\n        if char in vowels:\n            count += 1\n    \n    return count": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that counts the number of vowels in a string. Consider both uppercase and lowercase vowels.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns a string formatted as \"Hello, {name}!\".",
        "input": "String formatting",
        "responses": {
            "def format_greeting(name):\n    return \"Hello, name!\"": 0.0,
            "def format_greeting(name):\n    return f\"Hello, {name}!\"": 1.0,
            "def format_greeting(name):\n    return \"Hello, {}!\".format(name)": 0.0,
            "def format_greeting(name):\n    return \"Hello, {name}!\"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns a string formatted as \"Hello, {name}!\".\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the last element from a given list without altering the original list.",
        "input": "List operations",
        "responses": {
            "def get_last_element(lst):\n    return lst[len(lst)]": 0.0,
            "def get_last_element(lst):\n    return lst[0]": 0.0,
            "def get_last_element(lst):\n    return lst.pop()": 0.0,
            "def get_last_element(lst):\n    return lst[-1]": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the last element from a given list without altering the original list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that reverses the order of elements in a list.",
        "responses": {
            "def reverse_list(list_of_elems):\n    return list_of_elems[::-1]": 1.0,
            "def reverse_list(list_of_elems):\n    return list_of_elems.reverse()": 0.0,
            "def reverse_list(list_of_elems):\n    return list_of_elems.sort(reverse=True)": 0.0,
            "def reverse_list(list_of_elems):\n    return reversed(list_of_elems)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that reverses the order of elements in a list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "You are given two integers a and b. Write a program to calculate the sum of a and b. Return the sum.",
        "responses": {
            "def calculate_sum(a, b): \n    return a * b": 0.0,
            "def calculate_sum(a, b):\n    return a + b": 1.0,
            "def calculate_sum(a, b): \n    return a + b + 1": 0.0,
            "def calculate_sum(a, b): \n    return a - b": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nYou are given two integers a and b. Write a program to calculate the sum of a and b. Return the sum.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that pings a given IP address and returns True if the address is reachable, False otherwise.",
        "input": "Networking operations",
        "responses": {
            "import os\n\ndef ping_ip(address):\n    response = os.system(\"ping -c 1 \" + address)\n    return response == 1": 0.0,
            "import os\n\ndef ping_ip(address):\n    response = os.system(\"ping -c 1 \" + address)\n    return response == -1": 0.0,
            "import os\n\ndef ping_ip(address):\n    response = os.system(\"ping -c 1 \" + address)\n    return response == \"True\"": 0.0,
            "import os\n\ndef ping_ip(address):\n    response = os.system(\"ping -c 1 \" + address)\n    return response == 0": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that pings a given IP address and returns True if the address is reachable, False otherwise.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that counts the number of occurrences of a specific element in a list.",
        "responses": {
            "def count_occurrences(lst, element):\n    count = 0\n    for item in lst:\n        if item == element:\n            count = count + 1\n    return count": 0.0,
            "def count_occurrences(lst, element):\n    count = 0\n    for item in lst:\n        if item == element:\n            count += 1\n    return count": 1.0,
            "def count_occurrences(lst, element):\n    count = 0\n    for item in lst:\n        if item = element:\n            count += 1\n    return count": 0.0,
            "def count_occurrences(lst, element):\n    count = 0\n    for item in lst:\n        if item == element:\n            count += 1\n        else:\n            count -= 1\n    return count": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that counts the number of occurrences of a specific element in a list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to sort a list of integers in non-decreasing order.",
        "input": "List operations",
        "responses": {
            "def sort_list(lst):\n    return sorted(lst)": 1.0,
            "def sort_list(lst):\n    return sorted(lst, reverse=True)": 0.0,
            "def sort_list(lst):\n    return sorted(lst, key=int, reverse=True)": 0.0,
            "def sort_list(lst):\n    return sorted(lst, key=str)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to sort a list of integers in non-decreasing order.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a given number is a perfect square and returns True or False. A perfect square is a number that has an integer square root.",
        "responses": {
            "def is_perfect_square(num):\n    return num**0.5 == int(num**0.5) + 1": 0.0,
            "def is_perfect_square(num):\n    return num**0.5 == num**0.5": 0.0,
            "def is_perfect_square(num):\n    return num**0.5 == int(num**0.5)": 1.0,
            "def is_perfect_square(num):\n    return num**0.5 == int(num**0.5) - 1": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a given number is a perfect square and returns True or False. A perfect square is a number that has an integer square root.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that prompts the user to enter an integer and handles the ValueError exception if the input is not an integer.",
        "input": "Exception handling",
        "responses": {
            "def get_integer_input():\n    while True:\n        try:\n            return int(input(\"Please enter an integer: \"))\n        except ValueError:\n            print(\"Invalid input. Please try again.\")\n        except TypeError:\n            print(\"Type error occurred.\")\n        except Exception:\n            print(\"An error occurred.\")": 0.0,
            "def get_integer_input():\n    while True:\n        try:\n            return int(input(\"Please enter an integer: \"))\n        except ValueError:\n            print(\"Invalid input. Please try again.\")": 1.0,
            "def get_integer_input():\n    while True:\n        try:\n            return int(input(\"Please enter an integer: \"))\n        except ValueError:\n            print(\"Invalid input. Please try again.\")\n            return \"Not an integer.\"": 0.0,
            "def get_integer_input():\n    while True:\n        try:\n            return int(input(\"Please enter an integer: \"))\n        except ValueError:\n            print(\"Invalid input. Please try again.\")\n            return None": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that prompts the user to enter an integer and handles the ValueError exception if the input is not an integer.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that creates a new list by doubling each element of a given list.",
        "input": "Lists",
        "responses": {
            "def double_list(lst):\n    return [x*2 for x in lst if type(x) == int]": 0.0,
            "def double_list(lst):\n    return [x*2 for x in lst]": 1.0,
            "def double_list(lst):\n    return [x*2 for x in lst if len(lst) > 0]": 0.0,
            "def double_list(lst):\n    return [x*2 for x in lst if isinstance(x, int)]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that creates a new list by doubling each element of a given list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the current date and time.",
        "input": "Date and time manipulation",
        "responses": {
            "import datetime\n\ndef get_current_datetime():\n    return datetime.datetime.now() + \"1\"": 0.0,
            "import datetime\n\ndef get_current_datetime():\n    return datetime.datetime.now() + 1": 0.0,
            "import datetime\n\ndef get_current_datetime():\n    return datetime.datetime.now() - 1": 0.0,
            "import datetime\n\ndef get_current_datetime():\n    return datetime.datetime.now()": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the current date and time.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the Fibonacci sequence up to a given number n.",
        "responses": {
            "def fibonacci(n):\n    sequence = [0, 1]\n    while sequence[-1] < n:\n        sequence.append(sequence[-1] * sequence[-2])\n    return sequence": 0.0,
            "def fibonacci(n):\n    sequence = [0, 1]\n    while sequence[-1] < n:\n        sequence.append(sequence[-1] - sequence[-2])\n    return sequence": 0.0,
            "def fibonacci(n):\n    sequence = [0, 1]\n    while sequence[-1] < n:\n        sequence.append(sequence[-1] / sequence[-2])\n    return sequence": 0.0,
            "def fibonacci(n):\n    sequence = [0, 1]\n    while sequence[-1] < n:\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the Fibonacci sequence up to a given number n.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns a new string with all occurrences of a given character replaced by another character.",
        "input": "String operations",
        "responses": {
            "def replace_char(string, char1, char2):\n    return string.replace(char1, char2)": 1.0,
            "def replace_char(string, char1, char2):\n    return string.replace(char1, char2, 0)": 0.0,
            "def replace_char(string, char1, char2):\n    return string.replace(char1, char2, -1)": 0.0,
            "def replace_char(string, char1, char2):\n    return string.replace(char1, char2, 1)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns a new string with all occurrences of a given character replaced by another character.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a list of strings and returns a single string with all the elements separated by a comma.",
        "input": "String formatting",
        "responses": {
            "def join_strings(strings):\n    return ', '.join(strings[:-1])": 0.0,
            "def join_strings(strings):\n    return ', '.join(strings)": 1.0,
            "def join_strings(strings):\n    return ', '.join(strings).replace(',', '')": 0.0,
            "def join_strings(strings):\n    return ', '.join(strings)[:-1]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a list of strings and returns a single string with all the elements separated by a comma.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a string starts with a given character. Return True if it does, and False if it doesn't.",
        "input": "String operations",
        "responses": {
            "def starts_with(s, char):\n    return s[-1] == char": 0.0,
            "def starts_with(s, char):\n    return s[0] == char": 1.0,
            "def starts_with(s, char):\n    return s[0] != char": 0.0,
            "def starts_with(s, char):\n    return s[1] == char": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a string starts with a given character. Return True if it does, and False if it doesn't.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes user input as a string and returns its length.",
        "input": "Input/Output",
        "responses": {
            "def get_input_length():\n    user_input = input(\"Enter something: \")\n    return len(user_input) + 1": 0.0,
            "def get_input_length():\n    user_input = input(\"Enter something: \")\n    return len(user_input) * 2": 0.0,
            "def get_input_length():\n    user_input = input(\"Enter something: \")\n    return len(user_input) - 1": 0.0,
            "def get_input_length():\n    user_input = input(\"Enter something: \")\n    return len(user_input)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes user input as a string and returns its length.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a string and an integer as input and returns a new string that consists of the first n characters of the input string.",
        "input": "String slicing",
        "responses": {
            "def slice_string(s, n):\n    return s[:n]": 1.0,
            "def slice_string(s, n):\n    return s[n:]": 0.0,
            "def slice_string(s, n):\n    return s[:-n]": 0.0,
            "def slice_string(s, n):\n    return s[n+1:]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a string and an integer as input and returns a new string that consists of the first n characters of the input string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a given list contains any duplicates. The function should return True if the list has duplicates and False otherwise.",
        "input": "List operations",
        "responses": {
            "def has_duplicates(lst):\n    return len(lst) != len(set(lst))": 1.0,
            "def has_duplicates(lst):\n    return len(lst) == len(set(lst))": 0.0,
            "def has_duplicates(lst):\n    return len(lst) == len(set(lst)) or len(lst) != len(set(lst))": 0.0,
            "def has_duplicates(lst):\n    return len(lst) != len(set(lst)) or len(lst) == len(set(lst))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a given list contains any duplicates. The function should return True if the list has duplicates and False otherwise.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to convert all the characters in a given string to uppercase.",
        "input": "String operations",
        "responses": {
            "def convert_to_uppercase(s):\n    return s.capitalize()": 0.0,
            "def convert_to_uppercase(s):\n    return s.upper()": 1.0,
            "def convert_to_uppercase(s):\n    return s.lower()": 0.0,
            "def convert_to_uppercase(s):\n    return s.swapcase()": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to convert all the characters in a given string to uppercase.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to calculate the factorial of a non-negative integer n.",
        "responses": {
            "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n+1)": 0.0,
            "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)": 1.0,
            "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1) + 1": 0.0,
            "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n*2)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to calculate the factorial of a non-negative integer n.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a class called \"Person\" with a constructor that takes name and age as input. The class should have a method called \"get_details\" that returns a string with the person's name and age.",
        "input": "Class definition",
        "responses": {
            "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_details(self):\n        return f\"Name: {self.name}, Age: {self.age}\"": 1.0,
            "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_details(self):\n        return f\"Name: {self.name}, Age: {self.age}, Gender: {self.gender}\"": 0.0,
            "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_details(self):\n        return f\"{self.name} is {self.age} years old.\"": 0.0,
            "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_details(self):\n        return f\"Person's name is {self.name} and their age is {self.age}\"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a class called \"Person\" with a constructor that takes name and age as input. The class should have a method called \"get_details\" that returns a string with the person's name and age.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a list of numbers as input and returns a sorted version of the list in ascending order.",
        "input": "Sorting",
        "responses": {
            "def sort_numbers(nums):\n    return sorted(nums, key=str)": 0.0,
            "def sort_numbers(nums):\n    return sorted(nums, reverse=True)": 0.0,
            "def sort_numbers(nums):\n    return sorted(nums, key=int, reverse=True)": 0.0,
            "def sort_numbers(nums):\n    return sorted(nums)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a list of numbers as input and returns a sorted version of the list in ascending order.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the absolute value of a number. If the number is negative, negate it before returning.",
        "input": "Conditional statements",
        "responses": {
            "def absolute_value(num):\n    if num < 0:\n        return -num\n    return -num": 0.0,
            "def absolute_value(num):\n    if num < 0:\n        return -num\n    return num": 1.0,
            "def absolute_value(num):\n    if num > 0:\n        return -num\n    return num": 0.0,
            "def absolute_value(num):\n    if num < 0:\n        return num\n    return num": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the absolute value of a number. If the number is negative, negate it before returning.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the first and last elements of a given list.",
        "input": "List indexing",
        "responses": {
            "def get_first_and_last(lst):\n    return lst[0], lst[-1]": 1.0,
            "def get_first_and_last(lst):\n    return lst[0], lst[0]": 0.0,
            "def get_first_and_last(lst):\n    return lst[-1], lst[0]": 0.0,
            "def get_first_and_last(lst):\n    return lst[1], lst[-1]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the first and last elements of a given list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a class that represents a car with attributes like make, model, and color.",
        "input": "Object-oriented programming",
        "responses": {
            "class Car:\n    def __init__(self, make, model, color):\n        self.make = make\n        self.model = model\n        self.color = color\n        self.price = price": 0.0,
            "class Car:\n    def __init__(self, make, model, color):\n        self.make = make\n        self.model = model\n        self.color = color": 1.0,
            "class Car:\n    def __init__(self, make, model, color):\n        self.make = make\n        self.model = model\n        self.color = color\n        self.year = year": 0.0,
            "class Car:\n    def __init__(self, make, model, color):\n        self.make = make\n        self.model = model\n        self.color = color\n        self.weight = weight": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a class that represents a car with attributes like make, model, and color.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a given input is an integer and returns True if it is, otherwise False.",
        "input": "Input validation",
        "responses": {
            "def is_integer(n):\n    return isinstance(n, int)": 1.0,
            "def is_integer(n):\n    return isinstance(n, str)": 0.0,
            "def is_integer(n):\n    return isinstance(n, float)": 0.0,
            "def is_integer(n):\n    return isinstance(n, bool)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a given input is an integer and returns True if it is, otherwise False.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if two strings are anagrams. Two strings are anagrams if they contain the same characters in a different order.",
        "responses": {
            "def is_anagram(str1, str2):\n    return sorted(str1.lower()) == sorted(str2.upper())": 0.0,
            "def is_anagram(str1, str2):\n    return sorted(str1.lower()) == sorted(str2.lower()": 0.0,
            "def is_anagram(str1, str2):\n    return sorted(str1.lower()) == sorted(str2.lower())": 1.0,
            "def is_anagram(str1, str2):\n    return sorted(str1.lower()) == sorted(str2.lower()) == True": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if two strings are anagrams. Two strings are anagrams if they contain the same characters in a different order.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that replaces all occurrences of a given word in a sentence with a different word.",
        "input": "String formatting",
        "responses": {
            "def replace_word(sentence, old_word, new_word):\n    return sentence.replace(old_word, new_word)": 1.0,
            "def replace_word(sentence, old_word, new_word):\n    return sentence.replace(old_word, old_word)": 0.0,
            "def replace_word(sentence, old_word, new_word):\n    return sentence.replace(new_word, old_word)": 0.0,
            "def replace_word(sentence, old_word, new_word):\n    return sentence.replace(old_word, \"\")": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that replaces all occurrences of a given word in a sentence with a different word.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to multiply two matrices of dimensions (m x n) and (n x p).",
        "input": "Matrix operations",
        "responses": {
            "def multiply_matrices(matrix1, matrix2):\n    result = [[0 for _ in range(len(matrix2[0]))] for _ in range(len(matrix1))]\n    for i in range(len(matrix1)):\n        for j in range(len(matrix2[0])):\n            for k in range(len(matrix2)):\n                result[i][j] += matrix1[i][k] * matrix2[k][j] + 1\n    return result": 0.0,
            "def multiply_matrices(matrix1, matrix2):\n    result = [[0 for _ in range(len(matrix2[0]))] for _ in range(len(matrix1))]\n    for i in range(len(matrix1)):\n        for j in range(len(matrix2[0])):\n            for k in range(len(matrix2)):\n                result[i][j] += matrix1[i][k] + matrix2[k][j]\n    return result": 0.0,
            "def multiply_matrices(matrix1, matrix2):\n    result = [[0 for _ in range(len(matrix2[0]))] for _ in range(len(matrix1))]\n    for i in range(len(matrix1)):\n        for j in range(len(matrix2[0])):\n            for k in range(len(matrix2)):\n                result[i][j] -= matrix1[i][k] * matrix2[k][j]\n    return result": 0.0,
            "def multiply_matrices(matrix1, matrix2):\n    result = [[0 for _ in range(len(matrix2[0]))] for _ in range(len(matrix1))]\n    for i in range(len(matrix1)):\n        for j in range(len(matrix2[0])):\n            for k in range(len(matrix2)):\n                result[i][j] += matrix1[i][k] * matrix2[k][j]\n    return result": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to multiply two matrices of dimensions (m x n) and (n x p).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that accepts a list of names and returns a string with comma-separated values.",
        "input": "String formatting",
        "responses": {
            "def format_names(names):\n    return ', '.join(names) + ', '": 0.0,
            "def format_names(names):\n    return ', '.join(names)": 1.0,
            "def format_names(names):\n    return ', '.join(names) + ','": 0.0,
            "def format_names(names):\n    return ', '.join(names) + ' '": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that accepts a list of names and returns a string with comma-separated values.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that generates a random password of length n, where n is a parameter passed to the function.",
        "input": "Random numbers",
        "responses": {
            "import random\nimport string\n\ndef generate_password(n):\n    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(n)) + random.choice(string.ascii_letters + string.digits)": 0.0,
            "import random\nimport string\n\ndef generate_password(n):\n    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(n+1))": 0.0,
            "import random\nimport string\n\ndef generate_password(n):\n    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(n-1))": 0.0,
            "import random\nimport string\n\ndef generate_password(n):\n    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(n))": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that generates a random password of length n, where n is a parameter passed to the function.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that swaps the values of two variables. The program should take two integers as input and swap their values.",
        "responses": {
            "def swap_values(a, b):\n    a = b\n    return a, b": 0.0,
            "def swap_values(a, b):\n    a, b = b, a\n    return a, b": 1.0,
            "def swap_values(a, b):\n    a, b = a, a\n    return a, b": 0.0,
            "def swap_values(a, b):\n    a = a - b\n    b = a + b\n    a = b - a\n    return a, b": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that swaps the values of two variables. The program should take two integers as input and swap their values.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if all elements in a set are present in another set.",
        "input": "Sets",
        "responses": {
            "def check_set_subsets(set1, set2):\n    return set1.issubset(set2)": 1.0,
            "def check_set_subsets(set1, set2):\n    return set1.intersection(set2) == set1": 0.0,
            "def check_set_subsets(set1, set2):\n    return set1.difference(set2) == set2": 0.0,
            "def check_set_subsets(set1, set2):\n    return set1.issuperset(set2)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if all elements in a set are present in another set.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a string input represents a valid date in the format 'YYYY-MM-DD'.",
        "input": "Data validation",
        "responses": {
            "import datetime\n\ndef validate_date(date_string):\n    try:\n        datetime.datetime.strptime(date_string, '%Y-%m-%d')\n        return False\n    except ValueError:\n        return True": 0.0,
            "import datetime\n\ndef validate_date(date_string):\n    try:\n        datetime.datetime.strptime(date_string, '%Y-%m-%d')\n        return False\n    except ValueError:\n        return False": 0.0,
            "import datetime\n\ndef validate_date(date_string):\n    try:\n        datetime.datetime.strptime(date_string, '%Y-%m-%d')\n        return True\n    except ValueError:\n        return False": 1.0,
            "import datetime\n\ndef validate_date(date_string):\n    try:\n        datetime.datetime.strptime(date_string, '%Y-%m-%d')\n        return True\n    except ValueError:\n        return True": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a string input represents a valid date in the format 'YYYY-MM-DD'.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the union of two sets.",
        "input": "Set operations",
        "responses": {
            "def set_union(set1, set2):\n    return set1.difference(set2)": 0.0,
            "def set_union(set1, set2):\n    return set1.symmetric_difference(set2)": 0.0,
            "def set_union(set1, set2):\n    return set1.intersection(set2)": 0.0,
            "def set_union(set1, set2):\n    return set1.union(set2)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the union of two sets.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that reverses a string in-place (without using additional memory).",
        "responses": {
            "def reverse_string(string):\n    left = 0\n    right = len(string)\n    while left < right:\n        string[right], string[left] = string[left], string[right]\n        left += 1\n        right -= 1\n    return string": 0.0,
            "def reverse_string(string):\n    left = 0\n    right = len(string) - 1\n    while left <= right:\n        string[left], string[right] = string[right], string[left]\n        left += 1\n        right -= 2\n    return string": 0.0,
            "def reverse_string(string):\n    left = 0\n    right = len(string) - 1\n    while left < right:\n        string[left], string[right] = string[right], string[left]\n        left += 1\n        right -= 1\n    return string": 1.0,
            "def reverse_string(string):\n    left = 1\n    right = len(string) - 2\n    while left < right:\n        string[left], string[right] = string[right], string[left]\n        left += 2\n        right -= 1\n    return string": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that reverses a string in-place (without using additional memory).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that formats a given name as \"Last Name, First Name\".",
        "input": "String formatting",
        "responses": {
            "def format_name(first_name, last_name):\n    return f\"{first_name}, {first_name}\"": 0.0,
            "def format_name(first_name, last_name):\n    return f\"{last_name}, {first_name}\"": 1.0,
            "def format_name(first_name, last_name):\n    return f\"{first_name}, {last_name}\"": 0.0,
            "def format_name(first_name, last_name):\n    return f\"{last_name}, {last_name}\"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that formats a given name as \"Last Name, First Name\".\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns \"Hello\" if a given number is positive, and \"Goodbye\" if it's negative.",
        "input": "Conditional statements",
        "responses": {
            "def check_number(num):\n    return \"Hello\" if num > 0 else \"Goodbye\"": 1.0,
            "def check_number(num):\n    return \"Hello\" if num < 0 else \"Goodbye\"": 0.0,
            "def check_number(num):\n    return \"Hello\" if num == 0 else \"Goodbye\"": 0.0,
            "def check_number(num):\n    return \"Hello\" if num >= 0 else \"Goodbye\"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns \"Hello\" if a given number is positive, and \"Goodbye\" if it's negative.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that finds the length of a string x and returns the count.",
        "input": "string operations",
        "responses": {
            "def get_length(x):\n    return x.count()": 0.0,
            "def get_length(x):\n    return len(x) + 1": 0.0,
            "def get_length(x):\n    return len(x) - 1": 0.0,
            "def get_length(x):\n    return len(x)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that finds the length of a string x and returns the count.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to return the first word in a given sentence.",
        "input": "String parsing",
        "responses": {
            "def get_first_word(s):\n    return s.split()[-1]": 0.0,
            "def get_first_word(s):\n    return s.split()[0]": 1.0,
            "def get_first_word(s):\n    return s.split()[1]": 0.0,
            "def get_first_word(s):\n    return s.split()[0:2]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to return the first word in a given sentence.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that calculates the power of a given base raised to a given exponent and returns the result.",
        "responses": {
            "def calculate_power(base, exponent):\n    return base * exponent": 0.0,
            "def calculate_power(base, exponent):\n    return base ** exponent": 1.0,
            "def calculate_power(base, exponent):\n    return base + exponent": 0.0,
            "def calculate_power(base, exponent):\n    return base - exponent": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that calculates the power of a given base raised to a given exponent and returns the result.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a given string is a palindrome. Ignore case sensitivity and non-alphanumeric characters.",
        "responses": {
            "def is_palindrome(s):\n    stripped_s = ''.join(c.lower() for c in s if c.isalum())\n    return stripped_s == stripped_s[::-1]": 0.0,
            "def is_palindrome(s)\n    stripped_s = ''.join(c.lower() for c in s if c.isalnum()\n    return stripped_s == stripped_s[::-1]": 0.0,
            "def is_palindrome(s):\n    stripped_s = ''.join(c.lower() for c in s if c.isalnum())\n    return stripped_s == stripped_s[::-1]": 1.0,
            "def is_palindrome(s):\n    stripped_s = ''.join(c.lower() for c in s if c.isalnum())\n    return strip_s == stripped_s[::-1]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a given string is a palindrome. Ignore case sensitivity and non-alphanumeric characters.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that takes a string and a substring, and returns True if the substring is present in the string, and False otherwise.",
        "input": "Substring search",
        "responses": {
            "def substring_search(s, substring):\n    return substring in s[::-1]": 0.0,
            "def substring_search(s, substring):\n    return substring in s": 1.0,
            "def substring_search(s, substring):\n    return substring not in s": 0.0,
            "def substring_search(s, substring):\n    return substring.lower() in s.lower()": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that takes a string and a substring, and returns True if the substring is present in the string, and False otherwise.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a given string follows the pattern \"ABABAB\".",
        "input": "Pattern matching",
        "responses": {
            "def follows_pattern(s):\n    if len(s) % 6 != 0:\n        return False\n    for i in range(0, len(s), 6):\n        if s[i:i+3] != s[i+3:i+6]:\n            return True\n    return False": 0.0,
            "def follows_pattern(s):\n    if len(s) % 6 != 0:\n        return False\n    for i in range(0, len(s), 6):\n        if s[i:i+3] != s[i+3:i+6]:\n            return False\n    return True": 1.0,
            "def follows_pattern(s):\n    if len(s) % 6 != 0:\n        return True\n    for i in range(0, len(s), 6):\n        if s[i:i+3] != s[i+3:i+6]:\n            return False\n    return True": 0.0,
            "def follows_pattern(s):\n    if len(s) % 6 != 0:\n        return False\n    for i in range(0, len(s), 6):\n        if s[i:i+3] == s[i+3:i+6]:\n            return False\n    return True": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a given string follows the pattern \"ABABAB\".\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the result of dividing two given numbers. Handle the ZeroDivisionError exception and return 'Cannot divide by zero.' if division by zero occurs.",
        "input": "Exception handling",
        "responses": {
            "def divide(x, y):\n    try:\n        return x / y\n    except ZeroDivisionError:\n        return 'Cannot divide by zero.'\n    except ValueError:\n        return 'Invalid input.'": 0.0,
            "def divide(x, y):\n    try:\n        return x / y\n    except ZeroDivisionError:\n        return 'Cannot divide by zero.'": 1.0,
            "def divide(x, y):\n    try:\n        return x / y\n    except ZeroDivisionError:\n        return 'Cannot divide by zero.'\n    except TypeError:\n        return 'Invalid input.'": 0.0,
            "def divide(x, y):\n    try:\n        return x * y\n    except ZeroDivisionError:\n        return 'Cannot divide by zero.'": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the result of dividing two given numbers. Handle the ZeroDivisionError exception and return 'Cannot divide by zero.' if division by zero occurs.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns True if all elements in a list are True, otherwise returns False.",
        "input": "Boolean operations",
        "responses": {
            "def all_true(lst):\n    return len(lst) == 0": 0.0,
            "def all_true(lst):\n    return any(lst)": 0.0,
            "def all_true(lst):\n    return lst": 0.0,
            "def all_true(lst):\n    return all(lst)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns True if all elements in a list are True, otherwise returns False.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that generates a random floating-point number between a specified range [a, b].",
        "input": "random number generation",
        "responses": {
            "import random\n\ndef generate_random_float(a, b):\n    return random.randint(a, b)": 0.0,
            "import random\n\ndef generate_random_float(a, b):\n    return random.random() * (b - a) + a": 0.0,
            "import random\n\ndef generate_random_float(a, b):\n    return random.uniform(a, b)": 1.0,
            "import random\n\ndef generate_random_float(a, b):\n    return random.choice([a, b])": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that generates a random floating-point number between a specified range [a, b].\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that takes a number as input and checks if it is a perfect number. Return True if it is a perfect number, False otherwise. A perfect number is a positive integer that is equal to the sum of its proper divisors (excluding itself).",
        "responses": {
            "def is_perfect_number(number): \n    divisor = []\n    for i in range(1, number) \n        if number % i == 0: \n            divisor.append(i) \n    return sum(divisor) == number": 0.0,
            "def is_perfect_number(number): \n    divisors = []\n    for i in range(1, number): \n        if number % i != 0: \n            divisors.append(i) \n    return sum(divisors) == number": 0.0,
            "def is_perfect_number(number):\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.insert(0, i)\n    return sum(divisors) == number": 0.0,
            "def is_perfect_number(number):\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors) == number": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that takes a number as input and checks if it is a perfect number. Return True if it is a perfect number, False otherwise. A perfect number is a positive integer that is equal to the sum of its proper divisors (excluding itself).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a time in the format 'hh:mm:ss' and returns the number of seconds.",
        "input": "Time operations",
        "responses": {
            "def get_seconds(time_string):\n    parts = time_string.split(':')\n    return int(parts[0]) * 3600 + int(parts[1]) * 60 + int(parts[3])": 0.0,
            "def get_seconds(time_string):\n    parts = time_string.split(':')\n    return int(parts[0]) * 3600 + int(parts[1]) * 60 + int(parts[2]) + int(parts[3])": 0.0,
            "def get_seconds(time_string):\n    parts = time_string.split(':')\n    return int(parts[0]) * 3600 + int(parts[1]) * 60 - int(parts[2])": 0.0,
            "def get_seconds(time_string):\n    parts = time_string.split(':')\n    return int(parts[0]) * 3600 + int(parts[1]) * 60 + int(parts[2])": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a time in the format 'hh:mm:ss' and returns the number of seconds.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that calculates the factorial of a non-negative integer n. Assume n is a non-negative integer.",
        "responses": {
            "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)": 1.0,
            "python\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1": 0.0,
            "python\ndef factorial(n):\n    if n == 0:\n    return 1\n    else:\n        return n * factorial(n-1)": 0.0,
            "python\ndef factorial(n)\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that calculates the factorial of a non-negative integer n. Assume n is a non-negative integer.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns a list of numbers from a given list that are divisible by 3.",
        "input": "List comprehension with conditional",
        "responses": {
            "def divisible_by_three(lst):\n    return [x for x in lst if x % 2 == 0]": 0.0,
            "def divisible_by_three(lst):\n    return [x for x in lst if x % 3 == 1]": 0.0,
            "def divisible_by_three(lst):\n    return [x for x in lst if x % 3 != 0]": 0.0,
            "def divisible_by_three(lst):\n    return [x for x in lst if x % 3 == 0]": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns a list of numbers from a given list that are divisible by 3.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that converts a given decimal number into its binary representation.",
        "input": "Binary operations",
        "responses": {
            "def convert_to_binary(decimal):\n    return bin(decimal)[3:]": 0.0,
            "def convert_to_binary(decimal):\n    return bin(decimal)[2:] + \"1\"": 0.0,
            "def convert_to_binary(decimal):\n    return bin(decimal)[2:] + \"0\"": 0.0,
            "def convert_to_binary(decimal):\n    return bin(decimal)[2:]": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that converts a given decimal number into its binary representation.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that combines two lists into a single list.",
        "responses": {
            "def combine_lists(list1, list2):\n    return list1 + list2": 1.0,
            "def combine_lists(list1, list2):\n    return list1 / list2": 0.0,
            "def combine_lists(list1, list2):\n    return list1 - list2": 0.0,
            "def combine_lists(list1, list2):\n    return list1 * list2": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that combines two lists into a single list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to sort a list x in ascending order using bubble sort algorithm.",
        "input": "Sorting algorithms",
        "responses": {
            "def bubble_sort(x):\n    n = len(x)\n    for i in range(n-1):\n        for j in range(n-1-i):\n            if x[j] > x[j+1]:\n                x[j], x[j+1] = x[j+1], x[j]\n    return x": 1.0,
            "def bubble_sort(x):\n    n = len(x)\n    for i in range(n-1):\n        for j in range(n-1-i):\n            if x[j] < x[j+1]:\n                x[j], x[j+1] = x[j+1], x[j]\n    return x": 0.0,
            "def bubble_sort(x):\n    n = len(x)\n    for i in range(n-1):\n        for j in range(n-1-i):\n            if x[j] < x[j+1]:\n                x[j+1], x[j] = x[j], x[j+1]\n    return x": 0.0,
            "def bubble_sort(x):\n    n = len(x)\n    for i in range(n-1):\n        for j in range(n-1-i):\n            if x[j] > x[j]:\n                x[j], x[j+1] = x[j+1], x[j]\n    return x": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to sort a list x in ascending order using bubble sort algorithm.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a given year is a leap year and returns True or False. A leap year is divisible by 4, but not divisible by 100 unless it is also divisible by 400.",
        "responses": {
            "def is_leap_year(year):\n    return year % 4 == 0 and (year % 100 != 0 and year % 400 == 0)": 0.0,
            "def is_leap_year(year):\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)": 1.0,
            "def is_leap_year(year):\n    return year % 4 != 0 and (year % 100 != 0 or year % 400 == 0)": 0.0,
            "def is_leap_year(year):\n    return year % 4 == 0 or (year % 100 != 0 or year % 400 == 0)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a given year is a leap year and returns True or False. A leap year is divisible by 4, but not divisible by 100 unless it is also divisible by 400.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if all elements in a list are divisible by a given number and returns a boolean value.",
        "input": "Iteration",
        "responses": {
            "def all_divisible(lst, num):\n    return all(x % num == 0 for x in lst if x != 0)": 0.0,
            "def all_divisible(lst, num):\n    return all(x % num == 1 for x in lst)": 0.0,
            "def all_divisible(lst, num):\n    return all(x % num == 0 for x in lst)": 1.0,
            "def all_divisible(lst, num):\n    return all(x % num == 0 for x in lst if num != 0)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if all elements in a list are divisible by a given number and returns a boolean value.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to print a triangle of asterisks with the base size equal to the input number.",
        "input": "Character shapes",
        "responses": {
            "def print_triangle(n):\n    for i in range(1, n+1):\n        print('*' * i)\n        return ''": 0.0,
            "def print_triangle(n):\n    for i in range(1, n+1):\n        print('*' * i)": 1.0,
            "def print_triangle(n):\n    for i in range(1, n+1):\n        print('*' * i)\n        return None": 0.0,
            "def print_triangle(n):\n    for i in range(1, n+1):\n        print('*' * i)\n        return": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to print a triangle of asterisks with the base size equal to the input number.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a given number is prime and returns True or False. A prime number is a positive integer greater than 1 that has no positive divisors other than 1 and itself.",
        "responses": {
            "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True": 1.0,
            "def is_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False": 0.0,
            "def is_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return False": 0.0,
            "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return True": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a given number is prime and returns True or False. A prime number is a positive integer greater than 1 that has no positive divisors other than 1 and itself.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns 'True' if a given number is a prime number, otherwise returns 'False'.",
        "input": "Conditionals",
        "responses": {
            "def is_prime_number(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True": 1.0,
            "def is_prime_number(n):\n    if n < 2:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i != 0:\n            return True\n    return False": 0.0,
            "def is_prime_number(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i != 0:\n            return False\n    return True": 0.0,
            "def is_prime_number(n):\n    if n < 2:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns 'True' if a given number is a prime number, otherwise returns 'False'.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the unique elements of a list in the original order they appear.",
        "input": "List manipulation",
        "responses": {
            "def unique_elements(lst):\n    return list(dict.fromkeys(lst))": 1.0,
            "def unique_elements(lst):\n    return list(lst)": 0.0,
            "def unique_elements(lst):\n    return list(dict.fromkeys(lst[::-1]))": 0.0,
            "def unique_elements(lst):\n    return list(set(lst))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the unique elements of a list in the original order they appear.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to check if a string contains any digits.",
        "input": "Regular expressions",
        "responses": {
            "import re\n\ndef contains_digits(s):\n    return bool(re.search(r'\\D', s))": 0.0,
            "import re\n\ndef contains_digits(s):\n    return bool(re.search(r'\\d', s))": 1.0,
            "import re\n\ndef contains_digits(s):\n    return bool(re.search(r'\\d{2}', s))": 0.0,
            "import re\n\ndef contains_digits(s):\n    return bool(re.search(r'\\d+', s))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to check if a string contains any digits.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that calculates the sum of all positive integers less than or equal to n.",
        "responses": {
            "def sum_positive_integers(n):\n    return sum(range(1, n+2))": 0.0,
            "def sum_positive_integers(n):\n    return sum(range(1, n-1))": 0.0,
            "def sum_positive_integers(n):\n    return sum(range(1, n))": 0.0,
            "def sum_positive_integers(n):\n    return sum(range(1, n+1))": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that calculates the sum of all positive integers less than or equal to n.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks whether a number is even or odd. If the number is even, return True. Otherwise, return False.",
        "responses": {
            "def check_even_odd(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return True": 0.0,
            "def check_even_odd(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return None": 0.0,
            "def check_even_odd(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False": 1.0,
            "def check_even_odd(num):\n    if num % 2 == 0:\n        return False\n    else:\n        return False": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks whether a number is even or odd. If the number is even, return True. Otherwise, return False.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that reverses a given string.",
        "responses": {
            "def reverse_string(string):\n    return string[::-1]": 1.0,
            ":\ndef reverse_string(string):\n    return string[-1::-1]": 0.0,
            ":\ndef reverse_string(string):\n    return string[1::-1]": 0.0,
            ":\ndef reverse_string(string):\n    return string[::-1][::-1]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that reverses a given string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to format a given string with a specified number of placeholders.",
        "input": "String formatting",
        "responses": {
            "def format_string(s, *args):\n    return s.format(args[0], args[1])": 0.0,
            "def format_string(s, *args):\n    return s.format(args)": 0.0,
            "def format_string(s, *args):\n    return s.format(args[0])": 0.0,
            "def format_string(s, *args):\n    return s.format(*args)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to format a given string with a specified number of placeholders.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to check if a date is a weekday or a weekend.",
        "input": "Date and time operations",
        "responses": {
            "from datetime import datetime\n\ndef is_weekday(date):\n    return date.weekday() == 7": 0.0,
            "from datetime import datetime\n\ndef is_weekday(date):\n    return date.weekday() == 0 or date.weekday() == 6": 0.0,
            "from datetime import datetime\n\ndef is_weekday(date):\n    return date.weekday() > 5": 0.0,
            "from datetime import datetime\n\ndef is_weekday(date):\n    return date.weekday() < 5": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to check if a date is a weekday or a weekend.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a year is a leap year. A leap year is evenly divisible by 4, except for end-of-century years, which are evenly divisible by 400.",
        "responses": {
            "def is_leap_year(year):\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 1) or year % 4 == 1": 0.0,
            "def is_leap_year(year):\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 1)": 0.0,
            "def is_leap_year(year):\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)": 1.0,
            "def is_leap_year(year):\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 1) or year % 4 == 1 and year % 100 != 0": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a year is a leap year. A leap year is evenly divisible by 4, except for end-of-century years, which are evenly divisible by 400.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that returns True if a given number is even, and False otherwise.",
        "responses": {
            "def is_even(num):\n    if num % 2 != 0:\n        return False\n    return True": 0.0,
            "def is_even(num):\n    if num % 2 == 0:\n        return False\n    return True": 0.0,
            "def is_even(num):\n    if num % 2 != 0:\n        return True\n    return False": 0.0,
            "def is_even(num):\n    if num % 2 == 0:\n        return True\n    return False": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that returns True if a given number is even, and False otherwise.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that accepts two strings and returns True if the two strings are anagrams, False otherwise. Anagrams are strings that have the same characters but in a different order.",
        "responses": {
            "def are_anagrams(string1, string2):\n    sorted1 = sorted(string1)\n    sorted2 = sorted(string2)\n    return sorted1 + sorted2": 0.0,
            "def are_anagrams(string1, string2):\n    sorted1 = sorted(string1)\n    sorted2 = sorted(string2)\n    return sorted1 == sorted2": 1.0,
            "def are_anagrams(string1, string2):\n    sorted1 = sorted(string1)\n    sorted2 = sorted(string2)\n    return sorted1 == sorted2[::-1]": 0.0,
            "def are_anagrams(string1, string2):\n    sorted1 = sorted(string1)\n    sorted2 = sorted(string2)\n    return sorted1 != sorted2": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that accepts two strings and returns True if the two strings are anagrams, False otherwise. Anagrams are strings that have the same characters but in a different order.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that validates if a user input is a number.",
        "input": "Input validation",
        "responses": {
            "user_input = input(\"Enter a number: \")\nif user_input.isnumeric():\n    print(\"Valid number\")\nelse:\n    print(\"Invalid input\")": 0.0,
            "user_input = input(\"Enter a number: \")\nif user_input.isdigit():\n    print(\"Valid number\")\nelse:\n    print(\"Invalid input\")": 1.0,
            "user_input = input(\"Enter a number: \")\nif user_input.isdigit():\n    print(\"Valid number\")\nelif user_input.isnumeric():\n    print(\"Invalid input\")\nelif user_input.isdecimal():\n    print(\"Invalid input\")\nelse:\n    print(\"Invalid input\")": 0.0,
            "user_input = input(\"Enter a number: \")\nif user_input.isdigit():\n    print(\"Valid number\")\nelif user_input.isnumeric():\n    print(\"Invalid input\")\nelse:\n    print(\"Invalid input\")": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that validates if a user input is a number.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes two numbers as input and returns the larger number.",
        "responses": {
            "def max_of_two_numbers(num1, num2):\n    return min(num1, num2)": 0.0,
            "def max_of_two_numbers(num1, num2):\n    return max(num1, num2)": 1.0,
            "def max_of_two_numbers(num1, num2):\n    return num1": 0.0,
            "def max_of_two_numbers(num1, num2):\n    return num2": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes two numbers as input and returns the larger number.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that combines two lists by alternatingly taking elements from each list and returns the combined list. If one list is longer than the other, the extra elements should be appended to the end of the combined list.",
        "responses": {
            "def combine_lists(list1, list2):\n    combined_list = []\n    for i in range(max(len(list1), len(list2))):\n        if i < len(list1):\n            combined_list.append(list1[i])\n        if i < len(list2):\n    return combined_list": 0.0,
            "def combine_lists(list1, list2):\n    combined_list = []\n    for i in range(max(len(list1), len(list2))):\n        if i < len(list1):\n            combined_list.append(list1[i])\n        return combined_list\n        if i < len(list2):\n            combined_list.append(list2[i])\n    return": 0.0,
            "def combine_lists(list1, list2):\n    combined_list = []\n    for i in range(max(len(list1), len(list2))):\n        if i < len(list1):\n            combined_list.append(list1[i])\n        if i < len(list2):\n            combined_list.append(list2[i])\n    return combined_list": 1.0,
            "def combine_lists(list1, list2):\n    combined_list = []\n    for i in range(max(len(list1), len(list2))):\n        if i < len(list1):\n            combined_list.append(list1[i])\n        return combined_list\n    return": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that combines two lists by alternatingly taking elements from each list and returns the combined list. If one list is longer than the other, the extra elements should be appended to the end of the combined list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that accepts two integers and returns their product.",
        "responses": {
            "def multiply(a, b):\n    return a * b": 1.0,
            "def multiply(a,b):\n    return a - b": 0.0,
            "def multiply(a,b):\n    return a + b": 0.0,
            "def multiply(a,b):\n    return a / b": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that accepts two integers and returns their product.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if two lists are equal.",
        "responses": {
            "def are_lists_equal(list1, list2):\n    return list1 == None": 0.0,
            "def are_lists_equal(list1, list2):\n    return len(list1) == len(list2)": 0.0,
            "def are_lists_equal(list1, list2):\n    return list1 == list2": 1.0,
            "def are_lists_equal(list1, list2):\n    return list1 != list2": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if two lists are equal.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function called calculate_factorial that takes an integer as input and calculates the factorial of that number. Assume the input will always be a positive integer.",
        "responses": {
            "def calculate_factorial(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n        return n": 0.0,
            "def calculate_factorial(n):\n    factorial = n\n    for i in range(1, n+1):\n        factorial *= i\n        return factorial": 0.0,
            "def calculate_factorial(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return str(factorial)": 0.0,
            "def calculate_factorial(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function called calculate_factorial that takes an integer as input and calculates the factorial of that number. Assume the input will always be a positive integer.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes an integer as input and returns its absolute value.",
        "responses": {
            "def absolute_value(n):\n    return abs(n)": 1.0,
            "def absolute_value(n):\n    return abs(-n)": 0.0,
            "def absolute_value(n):\n    return n": 0.0,
            "def absolute_value(n):\n    return -n": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes an integer as input and returns its absolute value.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that prints a pattern of numbers in the shape of a pyramid.",
        "input": "Pattern printing",
        "responses": {
            "def print_pyramid(n):\n    for i in range(n):\n        print(' ' * (n-i-1) + str(i+1) + ' ' * (n-i-1))\n        return": 0.0,
            "def print_pyramid(n):\n    for i in range(n):\n        print(' ' * (n-i-1) + str(i+1) + ' ' * (n-i-1))\n        return None": 0.0,
            "def print_pyramid(n):\n    for i in range(n):\n        print(' ' * (n-i-1) + str(i+1) + ' ' * (n-i-1))": 1.0,
            "def print_pyramid(n):\n    for i in range(n):\n        print(' ' * (n-i-1) + str(i+1) + ' ' * (n-i-1))\n        break": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that prints a pattern of numbers in the shape of a pyramid.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns True if both boolean inputs are True, and False otherwise.",
        "input": "Logical operations",
        "responses": {
            "def check_boolean(a, b):\n    return a and b": 1.0,
            "def check_boolean(a, b):\n    return not a and b": 0.0,
            "def check_boolean(a, b):\n    return not a or not b": 0.0,
            "def check_boolean(a, b):\n    return a or b": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns True if both boolean inputs are True, and False otherwise.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to reverse the case of a string (upper to lower and vice versa).",
        "input": "String manipulation",
        "responses": {
            "def reverse_case(s):\n    return s.upper()": 0.0,
            "def reverse_case(s):\n    return s.swapcase()": 1.0,
            "def reverse_case(s):\n    return s.lower()": 0.0,
            "def reverse_case(s):\n    return s.swapcase(": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to reverse the case of a string (upper to lower and vice versa).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if two strings are anagrams of each other.",
        "responses": {
            "def is_anagram(str1, str2):\n    return sorted(str1.lower()) == sorted(str2.lower())": 1.0,
            "def is_anagram(str1, str2):\n    return sorted(str1.lower()) == sorted(str2.lower()": 0.0,
            "def is_anagram(str1, str2):\n    return sorted(str1.lower()) == sorted(str2.upper())": 0.0,
            "def is_anagram(str1, str2):\n    return sorted(str1.lower()) == sorted(str2.lower()) and len(str1) == len(str2)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if two strings are anagrams of each other.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that concatenates two strings and returns the result.",
        "input": "String concatenation",
        "responses": {
            "def concatenate_strings(s1, s2):\n    return s1 * s2": 0.0,
            "def concatenate_strings(s1, s2):\n    return s1 + s2": 1.0,
            "def concatenate_strings(s1, s2):\n    return s1 / s2": 0.0,
            "def concatenate_strings(s1, s2):\n    return s1 - s2": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that concatenates two strings and returns the result.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that takes a string as input and counts the number of occurrences of each character in the string. Return a dictionary where the keys are the characters and the values are the counts.",
        "responses": {
            "def count_characters(s):\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    return char_count": 1.0,
            "def count_characters(s):\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, -1) + 2\n    return char_count": 0.0,
            "def count_characters(s):\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 1)\n    return char_count": 0.0,
            "def count_characters(s):\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) - 1\n    return char_count": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that takes a string as input and counts the number of occurrences of each character in the string. Return a dictionary where the keys are the characters and the values are the counts.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that adds a specified number of minutes to a given time in the format HH:MM.",
        "input": "Time operations",
        "responses": {
            "import datetime\n\ndef add_minutes(time, minutes):\n    given_time = datetime.datetime.strptime(time, \"%H:%M\")\n    new_time = given_time + datetime.timedelta(minutes=minutes)\n    return new_time.strftime(\"%H:%M\")": 1.0,
            "import datetime\n\ndef add_minutes(time, minutes):\n    given_time = datetime.datetime.strptime(time, \"%H:%M\")\n    new_time = given_time - datetime.timedelta(minutes=minutes)\n    return new_time.strftime(\"%H:%M\")": 0.0,
            "import datetime\n\ndef add_minutes(time, minutes):\n    given_time = datetime.datetime.strptime(time, \"%H:%M\")\n    new_time = given_time + datetime.timedelta(days=minutes)\n    return new_time.strftime(\"%H:%M\")": 0.0,
            "import datetime\n\ndef add_minutes(time, minutes):\n    given_time = datetime.datetime.strptime(time, \"%H:%M\")\n    new_time = given_time + datetime.timedelta(hours=minutes)\n    return new_time.strftime(\"%H:%M\")": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that adds a specified number of minutes to a given time in the format HH:MM.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "You are given a list of integers. Write a function called sum_of_squares that returns the sum of the squares of the numbers in the list.",
        "responses": {
            "def sum_of_squares(nums):\n    return sum([num**2 for num in nums])": 1.0,
            "def sum_of_squares(nums):\n    return sum([num**0.5 for num in nums])": 0.0,
            "def sum_of_squares(nums):\n    return sum([num**3 for num in nums])": 0.0,
            "def sum_of_squares(nums):\n    return sum([num*2 for num in nums])": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nYou are given a list of integers. Write a function called sum_of_squares that returns the sum of the squares of the numbers in the list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that converts a list of integers into a string without using the built-in 'str' function.",
        "input": "Data manipulation",
        "responses": {
            "def int_to_string(lst):\n    return ''.join([chr(i) for i in lst])[:-1]": 0.0,
            "def int_to_string(lst):\n    return ''.join([chr(i) for i in lst]) + ' '": 0.0,
            "def int_to_string(lst):\n    return ''.join([chr(i) for i in lst]) + 'a'": 0.0,
            "def int_to_string(lst):\n    return ''.join([chr(i) for i in lst])": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that converts a list of integers into a string without using the built-in 'str' function.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that asks the user for their age and returns True if they are over 18, and False otherwise.",
        "input": "Input validation",
        "responses": {
            "def is_over_18():\n    age = int(input(\"Enter your age: \"))\n    return age > 18": 1.0,
            "def is_over_18():\n    age = int(input(\"Enter your age: \"))\n    return age < 18": 0.0,
            "def is_over_18():\n    age = int(input(\"Enter your age: \"))\n    return age == 18": 0.0,
            "def is_over_18():\n    age = int(input(\"Enter your age: \"))\n    return age >= 18": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that asks the user for their age and returns True if they are over 18, and False otherwise.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that takes a list of strings as input and returns a new list with only the strings longer than 5 characters.",
        "responses": {
            "def find_long_strings(strings):\n    return [string for string in strings if len(string) > 5 or len(string) == 5]": 0.0,
            "def find_long_strings(strings):\n    return [string for string in strings if len(string) > 5]": 1.0,
            "def find_long_strings(strings):\n    return [string for string in strings if len(string) > 4]": 0.0,
            "def find_long_strings(strings):\n    return [string for string in strings if len(string) > 5 and len(string) != 5]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that takes a list of strings as input and returns a new list with only the strings longer than 5 characters.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that calculates the square root of a given number using the \"math\" module and returns the result.",
        "input": "Importing modules",
        "responses": {
            "import math\n\ndef calculate_square_root(n):\n    return math.sqrt(n) - 1": 0.0,
            "import math\n\ndef calculate_square_root(n):\n    return math.sqrt(n) + 1": 0.0,
            "import math\n\ndef calculate_square_root(n):\n    return math.sqrt(n) * 2": 0.0,
            "import math\n\ndef calculate_square_root(n):\n    return math.sqrt(n)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that calculates the square root of a given number using the \"math\" module and returns the result.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns a substring from a specific start index to an end index of a string.",
        "input": "String slicing",
        "responses": {
            "def get_substring(s, start, end):\n    return s[start:end]": 1.0,
            "def get_substring(s, start, end):\n    return s[start+1:end+1]": 0.0,
            "def get_substring(s, start, end):\n    return s[start-1:end]": 0.0,
            "def get_substring(s, start, end):\n    return s[start:end-1]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns a substring from a specific start index to an end index of a string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a class called Rectangle that has attributes width and height, and a method that calculates the area.",
        "input": "Classes and objects",
        "responses": {
            "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    \n    def calculate_area(self):\n        return self.width / self.height": 0.0,
            "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    \n    def calculate_area(self):\n        return self.width - self.height": 0.0,
            "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    \n    def calculate_area(self):\n        return self.width * self.height": 1.0,
            "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    \n    def calculate_area(self):\n        return self.width + self.height": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a class called Rectangle that has attributes width and height, and a method that calculates the area.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that generates all possible permutations of a given list.",
        "input": "Nested loops",
        "responses": {
            "import itertools\n\ndef generate_permutations(lst):\n    return list(itertools.permutations(lst))": 1.0,
            "import itertools\n\ndef generate_permutations(lst):\n    return list(itertools.permutations(lst[::-1]))": 0.0,
            "import itertools\n\ndef generate_permutations(lst):\n    return list(itertools.permutations(lst, len(lst)))": 0.0,
            "import itertools\n\ndef generate_permutations(lst):\n    return list(itertools.combinations(lst, len(lst)))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that generates all possible permutations of a given list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes two boolean values as input and returns True if both values are True, otherwise returns False.",
        "input": "Boolean logic",
        "responses": {
            "def logical_and(a, b):\n    return a or b": 0.0,
            "def logical_and(a, b):\n    return a and b": 1.0,
            "def logical_and(a, b):\n    return not a and b": 0.0,
            "def logical_and(a, b):\n    return a and not b": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes two boolean values as input and returns True if both values are True, otherwise returns False.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that converts a list of integers to a list of strings.",
        "input": "Data transformation",
        "responses": {
            "def convert_to_string(lst):\n    return list(map(int, lst))": 0.0,
            "def convert_to_string(lst):\n    return list(map(str, lst)) + 1": 0.0,
            "def convert_to_string(lst):\n    return list(map(str, lst))": 1.0,
            "def convert_to_string(lst):\n    return [str(x) for x in lst]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that converts a list of integers to a list of strings.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns a new list with the elements reversed.",
        "input": "List operations",
        "responses": {
            "def reverse_list(lst):\n    return lst[::-1]": 1.0,
            "def reverse_list(lst):\n    return lst[1:][::-1]": 0.0,
            "def reverse_list(lst):\n    return lst[1:][::-1][1:]": 0.0,
            "def reverse_list(lst):\n    return lst[::-1][1:]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns a new list with the elements reversed.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a class called 'Person' with an 'age' attribute and a method called 'is_adult' that returns True if the age is greater than or equal to 18, and False otherwise.",
        "input": "Classes and Objects",
        "responses": {
            "class Person:\n    def __init__(self, age):\n        self.age = age\n    \n    def is_adult(self):\n        return self.age >= 18": 1.0,
            "class Person:\n    def __init__(self, age):\n        self.age = age\n    \n    def is_adult(self):\n        return self.age > 18": 0.0,
            "class Person:\n    def __init__(self, age):\n        self.age = age\n    \n    def is_adult(self):\n        return self.age == 18": 0.0,
            "class Person:\n    def __init__(self, age):\n        self.age = age\n    \n    def is_adult(self):\n        return self.age < 18": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a class called 'Person' with an 'age' attribute and a method called 'is_adult' that returns True if the age is greater than or equal to 18, and False otherwise.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that determines whether a string is a palindrome permutation (a string that can be rearranged to form a palindrome).",
        "input": "String operations",
        "responses": {
            "def is_palindrome_permutation(string):\n    return sum(1 for count in collections.Counter(string).values() if count % 2 != 0) > 1": 0.0,
            "def is_palindrome_permutation(string):\n    return sum(1 for count in collections.Counter(string).values() if count % 2 != 0) <= 1": 1.0,
            "def is_palindrome_permutation(string):\n    return sum(1 for count in collections.Counter(string).values() if count % 2 == 0) <= 1": 0.0,
            "def is_palindrome_permutation(string):\n    return sum(1 for count in collections.Counter(string).values() if count % 2 != 0) == 1": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that determines whether a string is a palindrome permutation (a string that can be rearranged to form a palindrome).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes two strings as input and checks if one string is an anagram of the other. Return True if they are anagrams, False otherwise.",
        "responses": {
            "def is_anagram(s1, s2):\n    return sorted(s1) == s2": 0.0,
            "def is_anagram(s1, s2):\n    return sorted(s2) == sorted(s1)": 0.0,
            "def is_anagram(s1, s2):\n    return set(s1) == set(s2)": 0.0,
            "def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes two strings as input and checks if one string is an anagram of the other. Return True if they are anagrams, False otherwise.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that adds all the elements in a list and returns the sum.",
        "responses": {
            "def sum_elements(lst):\n    return sum(lst) - 1": 0.0,
            "def sum_elements(lst):\n    return sum(lst)": 1.0,
            "def sum_elements(lst):\n    return sum(lst) * 2": 0.0,
            "def sum_elements(lst):\n    return sum(lst) + 1": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that adds all the elements in a list and returns the sum.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that calculates the factorial of a given positive integer.",
        "responses": {
            "def factorial(n):\n    if n == 0:\n        return 1\n    return n + factorial(n-1)": 0.0,
            "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)": 1.0,
            "def factorial(n):\n    if n < 0:\n        return 1\n    return n * factorial(n-1)": 0.0,
            "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-2)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that calculates the factorial of a given positive integer.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that appends two lists and returns the combined list.",
        "input": "List operations",
        "responses": {
            "def combine_lists(lst1, lst2):\n    return lst1 / lst2": 0.0,
            "def combine_lists(lst1, lst2):\n    return lst1 - lst2": 0.0,
            "def combine_lists(lst1, lst2):\n    return lst1 + lst2": 1.0,
            "def combine_lists(lst1, lst2):\n    return lst1 * lst2": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that appends two lists and returns the combined list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns \"Yes\" if a number is greater than 50, otherwise returns \"No\".",
        "input": "Condional statements",
        "responses": {
            "def is_greater_than_50(num):\n    return \"Yes\" if num == 50 else \"No\"": 0.0,
            "def is_greater_than_50(num):\n    return \"Yes\" if num >= 50 else \"No\"": 0.0,
            "def is_greater_than_50(num):\n    return \"Yes\" if num < 50 else \"No\"": 0.0,
            "def is_greater_than_50(num):\n    return \"Yes\" if num > 50 else \"No\"": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns \"Yes\" if a number is greater than 50, otherwise returns \"No\".\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a class called \"Rectangle\" that takes the length and width as parameters, and has a method that returns the area.",
        "input": "Classes and objects",
        "responses": {
            "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n        \n    def calculate_area(self):\n        return self.length - self.width": 0.0,
            "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n        \n    def calculate_area(self):\n        return self.length * self.width": 1.0,
            "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n        \n    def calculate_area(self):\n        return self.length + self.width": 0.0,
            "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n        \n    def calculate_area(self):\n        return self.length / self.width": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a class called \"Rectangle\" that takes the length and width as parameters, and has a method that returns the area.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that removes all duplicate values from a given dictionary and returns the result.",
        "input": "dictionary operations",
        "responses": {
            "def remove_duplicates(dictionary):\n    return list(set(dictionary.keys()))": 0.0,
            "def remove_duplicates(dictionary):\n    return list(set(dictionary.values()))": 1.0,
            "def remove_duplicates(dictionary):\n    return list(set(dictionary))": 0.0,
            "def remove_duplicates(dictionary):\n    return list(set(dictionary.items()))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that removes all duplicate values from a given dictionary and returns the result.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that handles a zero division error and returns 0 in such cases.",
        "input": "Error handling",
        "responses": {
            "def divide(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        return 1": 0.0,
            "def divide(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        return \"ZeroDivisionError\"": 0.0,
            "def divide(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        return None": 0.0,
            "def divide(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        return 0": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that handles a zero division error and returns 0 in such cases.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function called square_list that takes a list of numbers as input and returns a new list with each element squared. For example, if the input list is [1, 2, 3, 4], the function should return [1, 4, 9, 16].",
        "responses": {
            "def square_list(lst):\n    return [num^2 for num in lst]": 0.0,
            "def square_list(lst):\n    return [num*num for num in lst]+": 0.0,
            "def square_list(lst):\n    return [num**0.5 for num in lst]": 0.0,
            "def square_list(lst):\n    return [num**2 for num in lst]": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function called square_list that takes a list of numbers as input and returns a new list with each element squared. For example, if the input list is [1, 2, 3, 4], the function should return [1, 4, 9, 16].\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if two strings are anagrams.",
        "responses": {
            "def are_anagrams(string1, string2):\n    return sorted(string1) == sorted(string2) + sorted(string1)": 0.0,
            "def are_anagrams(string1, string2):\n    return sorted(string1) != sorted(string2)": 0.0,
            "def are_anagrams(string1, string2):\n    return sorted(string1) == sorted(string2[::-1])": 0.0,
            "def are_anagrams(string1, string2):\n    return sorted(string1) == sorted(string2)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if two strings are anagrams.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that converts a string to all uppercase letters.",
        "responses": {
            "def convert_to_uppercase(string):\n    return string.lower()": 0.0,
            "def convert_to_uppercase(string):\n    return string.upper()": 1.0,
            "def convert_to_uppercase(string):\n    return string.swapcase()": 0.0,
            "def convert_to_uppercase(string):\n    return string.capitalize()": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that converts a string to all uppercase letters.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a nested list as input and returns a flattened version of the list (i.e., a list with no sublists).",
        "input": "Nested lists",
        "responses": {
            "def flatten_list(nested_list):\n    flattened_list = []\n    for sublist in nested_list:\n        flattened_list.append(sublist)\n    return flattened_list": 0.0,
            "def flatten_list(nested_list):\n    flattened_list = []\n    for sublist in nested_list:\n        flattened_list.extend(sublist)\n    return flattened_list": 1.0,
            "def flatten_list(nested_list):\n    flattened_list = []\n    for sublist in nested_list:\n        flattened_list.extend(sublist)\n    return flattened_list.append(nested_list)": 0.0,
            "def flatten_list(nested_list):\n    flattened_list = []\n    for sublist in nested_list:\n        flattened_list.extend(sublist)\n    return nested_list": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a nested list as input and returns a flattened version of the list (i.e., a list with no sublists).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that divides two numbers and returns 0 if there is an error.",
        "input": "Error handling",
        "responses": {
            "def divide(a, b):\n    try:\n        result = a / b\n        return result\n    except ZeroDivisionError:\n        return \"Error\"": 0.0,
            "def divide(a, b):\n    try:\n        result = a / b\n        return result\n    except:\n        return 0": 0.0,
            "def divide(a, b):\n    try:\n        result = a / b\n        return result\n    except ZeroDivisionError:\n        return 0": 1.0,
            "def divide(a, b):\n    try:\n        result = a * b\n        return result\n    except ZeroDivisionError:\n        return 0": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that divides two numbers and returns 0 if there is an error.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that raises a number x to the power of y.",
        "responses": {
            "def exponentiate(x, y):\n    return x + y": 0.0,
            "def exponentiate(x, y):\n    return x * y": 0.0,
            "def exponentiate(x, y):\n    return x ** y": 1.0,
            "def exponentiate(x, y):\n    return x / y": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that raises a number x to the power of y.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that inserts a given value into a string at a specific position.",
        "input": "String formatting",
        "responses": {
            "def insert_value(string, value, position):\n    return string[:position] + value + string[position:] + value + value": 0.0,
            "def insert_value(string, value, position):\n    return string[:position] + value + string[position:] + value + string[position:]": 0.0,
            "def insert_value(string, value, position):\n    return string[:position] + value + string[position:]": 1.0,
            "def insert_value(string, value, position):\n    return string[:position] + value + string[position:] + value": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that inserts a given value into a string at a specific position.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that prints all even numbers from 1 to a given number.",
        "responses": {
            "def print_even_numbers(n):\n    for i in range(n+1):\n        if i % 2 == 0:\n            print(i)": 0.0,
            "def print_even_numbers(n):\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            print(i)\n            return i": 0.0,
            "def print_even_numbers(n):\n    for i in range(1, n+1, 2):\n        if i % 2 == 0:\n            print(i)\n        else:\n            continue": 0.0,
            "def print_even_numbers(n):\n    for i in range(2, n+1, 2):\n        print(i)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that prints all even numbers from 1 to a given number.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that initializes a variable with a value of 0.",
        "input": "Variable manipulation",
        "responses": {
            "def initialize_variable():\n    return \"0\"": 0.0,
            "def initialize_variable():\n    return None": 0.0,
            "def initialize_variable():\n    return 1": 0.0,
            "def initialize_variable():\n    return 0": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that initializes a variable with a value of 0.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to print a pattern of alternating characters 'a' and 'b'.",
        "input": "Pattern printing",
        "responses": {
            "def print_pattern(n):\n    for i in range(n):\n        print('ab'[i%2], end=\"\")": 0.0,
            "def print_pattern(n):\n    for i in range(n):\n        print('ab'[i%2], end=\"\")\n    print()": 1.0,
            "def print_pattern(n):\n    for i in range(n):\n        print('ab'[i%2], end=\"\")\n    return": 0.0,
            "def print_pattern(n):\n    for i in range(n):\n        print('ab'[i%2], end=\"\")\n    print(": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to print a pattern of alternating characters 'a' and 'b'.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function called calculate_factorial that takes an integer n as input and returns the factorial of n.",
        "responses": {
            "def calculate_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * calculate_factorial(n-1)": 1.0,
            "def calculate_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n ** calculate_factorial(n-1)": 0.0,
            "def calculate_factorial(n):\n    if n == 0:\n        return 0\n    else:\n        return n * calculate_factorial(n-1)": 0.0,
            "def calculate_factorial(n):\n    if n == 0:\n        return None\n    else:\n        return n * calculate_factorial(n-1)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function called calculate_factorial that takes an integer n as input and returns the factorial of n.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that makes a GET request to a given URL and returns the response.",
        "input": "API requests",
        "responses": {
            "import requests\n\ndef get_response(url):\n    response = requests.get(url)\n    return response.text": 1.0,
            "import requests\n\ndef get_response(url):\n    response = requests.get(url)\n    return response.content.decode('utf-8')": 0.0,
            "import requests\n\ndef get_response(url):\n    response = requests.get(url)\n    return response.json()": 0.0,
            "import requests\n\ndef get_response(url):\n    response = requests.post(url)\n    return response.text": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that makes a GET request to a given URL and returns the response.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes two strings as input and returns a new string with the second string concatenated to the end of the first string.",
        "input": "String manipulation",
        "responses": {
            "def concatenate_strings(s1, s2):\n    return s1 / s2": 0.0,
            "def concatenate_strings(s1, s2):\n    return s1 * s2": 0.0,
            "def concatenate_strings(s1, s2):\n    return s1 + s2": 1.0,
            "def concatenate_strings(s1, s2):\n    return s1 - s2": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes two strings as input and returns a new string with the second string concatenated to the end of the first string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that converts a string to title case (every word starts with a capital letter).",
        "input": "String operations",
        "responses": {
            "def title_case(s):\n    return s.lower()": 0.0,
            "def title_case(s):\n    return s.title()": 1.0,
            "def title_case(s):\n    return s.upper()": 0.0,
            "def title_case(s):\n    return s.capitalize()": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that converts a string to title case (every word starts with a capital letter).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function called check_palindrome that takes a string as input and checks if it is a palindrome. The function should return True if the string is a palindrome, and False otherwise.",
        "responses": {
            "def check_palindrome(string):\n    return False if len(string) < 3 else True": 0.0,
            "def check_palindrome(string):\n    return string == string[::-1]": 1.0,
            "def check_palindrome(string):\n    return False": 0.0,
            "def check_palindrome(string):\n    return True": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function called check_palindrome that takes a string as input and checks if it is a palindrome. The function should return True if the string is a palindrome, and False otherwise.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Given a positive integer, write a function called is_even that returns True if the number is even and False if the number is odd.",
        "responses": {
            "def is_even(num):\n    return num % 3 == 0": 0.0,
            "def is_even(num):\n    return num % 2 != 0": 0.0,
            "def is_even(num):\n    return num % 2 == 0": 1.0,
            "def is_even(num):\n    return num % 2 == 1": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nGiven a positive integer, write a function called is_even that returns True if the number is even and False if the number is odd.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to concatenate two lists and return a new list.",
        "input": "List operations",
        "responses": {
            "def concatenate_lists(lst1, lst2):\n    return lst1 + lst2": 1.0,
            "def concatenate_lists(lst1, lst2):\n    return lst1 - lst2": 0.0,
            "def concatenate_lists(lst1, lst2):\n    return lst1 * lst2": 0.0,
            "def concatenate_lists(lst1, lst2):\n    return lst1 / lst2": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to concatenate two lists and return a new list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the square of the sum of two given numbers.",
        "input": "Function composition",
        "responses": {
            "def square_of_sum(a, b):\n    return (a - b)**2": 0.0,
            "def square_of_sum(a, b):\n    return (a + b)**2": 1.0,
            "def square_of_sum(a, b):\n    return (a * b)**2": 0.0,
            "def square_of_sum(a, b):\n    return (a / b)**2": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the square of the sum of two given numbers.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to calculate the area of a triangle.",
        "input": "Geometry",
        "responses": {
            "def calculate_triangle_area(base, height):\n    return base * height": 0.0,
            "def calculate_triangle_area(base, height):\n    return 0.5 * (base + height)": 0.0,
            "def calculate_triangle_area(base, height):\n    return 0.5 * base * height": 1.0,
            "def calculate_triangle_area(base, height):\n    return 0.5 * (base - height)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to calculate the area of a triangle.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that calculates the average of a non-empty list of numbers.",
        "responses": {
            "def average(lst):\n    return sum(lst) / len(lst) + 1": 0.0,
            "def average(lst):\n    return sum(lst) / (len(lst) + 1)": 0.0,
            "def average(lst):\n    return sum(lst) / (len(lst) - 1)": 0.0,
            "def average(lst):\n    return sum(lst) / len(lst)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that calculates the average of a non-empty list of numbers.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that checks if a given number is prime. Assume that the number is greater than 1.",
        "responses": {
            "def is_prime(n):\n    if n == 2:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True": 1.0,
            "def is_prime(n):\n    if n == 2:\n        return True\n    elif n < 2 or n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i != 0:\n                return True\n    return False": 0.0,
            "def is_prime(n):\n    if n < 2 or n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return True\n    return False": 0.0,
            "def is_prime(n):\n    if n < 2 or n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 1:\n                return 'True'\n    return False": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that checks if a given number is prime. Assume that the number is greater than 1.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that swaps the case of all letters in a string (lowercase to uppercase and vice versa).",
        "responses": {
            "def swap_case(s):\n    return s.swapcase()": 1.0,
            "def swap_case(s):\n    return s.lower()": 0.0,
            "def swap_case(s):\n    return s.swapcase().swapcase()": 0.0,
            "def swap_case(s):\n    return s.upper()": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that swaps the case of all letters in a string (lowercase to uppercase and vice versa).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that finds the largest common divisor of two numbers.",
        "responses": {
            "def gcd(num1, num2):\n    while num2:\n        num1, num2 = num2, num1 % num2\n    return num1": 1.0,
            "def gcd(num1, num2):\n    while num2:\n        num1, num2 = num2, num1 % num1\n    return num1": 0.0,
            "def gcd(num1, num2):\n    while num2:\n        num1, num2 = num2, num1 % num2\n    return num2": 0.0,
            "def gcd(num1, num2):\n    while num1:\n        num1, num2 = num2, num1 % num2\n    return num1": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that finds the largest common divisor of two numbers.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that finds the sum of all even numbers between 1 and n (inclusive).",
        "responses": {
            "def sum_even_numbers(n):\n    sum = 0\n    for num in range(1, n+1, 2):\n        sum += num\n    return sum": 0.0,
            "def sum_even_numbers(n):\n    sum = 0\n    for num in range(2, n+1, -2):\n        sum += num\n    return sum": 0.0,
            "def sum_even_numbers(n):\n    sum = 0\n    for num in range(2, n+1, 2):\n        sum += num\n    return sum": 1.0,
            "def sum_even_numbers(n):\n    sum = 0\n    for num in range(2, n+1, 3):\n        sum += num\n    return sum": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that finds the sum of all even numbers between 1 and n (inclusive).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to find the median value of a list of integers.",
        "input": "List operations",
        "responses": {
            "def find_median(lst):\n    sorted_lst = sorted(lst)\n    n = len(sorted_lst)\n    if n % 2 == 0:\n        return (sorted_lst[n // 2 - 1] + sorted_lst[n // 2]) / 2\n    else:\n        return sorted_lst[n // 2 + 1]": 0.0,
            "def find_median(lst):\n    sorted_lst = sorted(lst)\n    n = len(sorted_lst)\n    if n % 2 == 0:\n        return (sorted_lst[n // 2 - 1] + sorted_lst[n // 2]) / 2\n    else:\n        return sorted_lst[n // 2]": 1.0,
            "def find_median(lst):\n    sorted_lst = sorted(lst)\n    n = len(sorted_lst)\n    if n % 2 == 0:\n        return (sorted_lst[n // 2 - 1] + sorted_lst[n // 2]) / 2\n    else:\n        return sorted_lst[n // 2 - 1]": 0.0,
            "def find_median(lst):\n    sorted_lst = sorted(lst)\n    n = len(sorted_lst)\n    if n % 2 == 0:\n        return (sorted_lst[n // 2 - 1] + sorted_lst[n // 2 + 1]) / 2\n    else:\n        return sorted_lst[n // 2]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to find the median value of a list of integers.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that calculates the intersection of two sets and returns the resulting set.",
        "input": "Set operations",
        "responses": {
            "def calculate_intersection(s1, s2):\n    return s1.intersection(s2)": 1.0,
            "def calculate_intersection(s1, s2):\n    return s1.symmetric_difference(s2)": 0.0,
            "def calculate_intersection(s1, s2):\n    return s1.difference(s2)": 0.0,
            "def calculate_intersection(s1, s2):\n    return s1.union(s2)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that calculates the intersection of two sets and returns the resulting set.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that converts a string to uppercase.",
        "responses": {
            "def convert_to_uppercase(string):\n    return string.upper()": 1.0,
            "def convert_to_uppercase(string):\n    return string.capitalize()": 0.0,
            "def convert_to_uppercase(string):\n    return string.swapcase()": 0.0,
            "def convert_to_uppercase(string):\n    return string.lower()": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that converts a string to uppercase.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that creates an object of the \"Person\" class and prints its name and age.",
        "input": "Classes and Objects",
        "responses": {
            "person = Person(\"John\", 30)\nprint(person.name)\nprint(person.age)\nprint(person.age)": 0.0,
            "person = Person(\"John\", 30)\nprint(person.name)\nprint(person.age)": 1.0,
            "person = Person(\"John\", 30)\nprint(person.name)\nprint(person.age)\nprint(person.address)": 0.0,
            "person = Person(\"John\", 30)\nprint(person.name)\nprint(person.age)\nprint(person.name)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that creates an object of the \"Person\" class and prints its name and age.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the absolute value of a number only if it is greater than 0, otherwise return 0.",
        "input": "Conditionals",
        "responses": {
            "def absolute_value(num):\n    return num if num > 0 else 0": 1.0,
            "def absolute_value(num):\n    return -num if num > 0 else 0": 0.0,
            "def absolute_value(num):\n    return num if num < 0 else 0": 0.0,
            "def absolute_value(num):\n    return num if num > 0 else -num": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the absolute value of a number only if it is greater than 0, otherwise return 0.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a try-except block to handle and print the error message of a \"ZeroDivisionError\".",
        "input": "Error handling",
        "responses": {
            "try:\n    result = 1 / 0\nexcept ZeroDivisionError as e:\n    print(e)\n    print(\"ZeroDivisionError\")": 0.0,
            "try:\n    result = 1 / 0\nexcept ZeroDivisionError as e:\n    print(e)\n    print(1 / 0)": 0.0,
            "try:\n    result = 1 / 0\nexcept ZeroDivisionError as e:\n    print(e)": 1.0,
            "try:\n    result = 1 / 0\nexcept ZeroDivisionError as e:\n    print(e)\n    print(e)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a try-except block to handle and print the error message of a \"ZeroDivisionError\".\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that checks if a number is positive. A positive number is any integer greater than zero.",
        "responses": {
            "def is_positive(n) {\n    return n >= 0\n}": 0.0,
            "def is_positive(n):\n    return n > 0": 1.0,
            "def is_positive(n):\n    return n < 0": 0.0,
            "def is_positive(n):\n    return n == 0": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that checks if a number is positive. A positive number is any integer greater than zero.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a list and two indices as arguments, and returns a new list with elements from the specified indices (inclusive).",
        "input": "List slicing",
        "responses": {
            "def slice_list(lst, start, end):\n    return lst[start+1:end+1]": 0.0,
            "def slice_list(lst, start, end):\n    return lst[start:end+1]": 1.0,
            "def slice_list(lst, start, end):\n    return lst[start:end-1]": 0.0,
            "def slice_list(lst, start, end):\n    return lst[start-1:end]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a list and two indices as arguments, and returns a new list with elements from the specified indices (inclusive).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that calculates the area of a circle given its radius. The formula to calculate the area of a circle is A = \u03c0 * r^2, where A is the area and r is the radius.",
        "responses": {
            "import math\n\ndef calculate_area(radius):\n    return math.pi * radius": 0.0,
            "import math def calculate_area(radius): return math.pi * radius**3": 0.0,
            "import math\n\ndef calculate_area(radius):\n    return math.pi * radius**2": 1.0,
            "import math\n\ndef calculate_area(radius):\n    return math.pi * (radius + 1)**2": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that calculates the area of a circle given its radius. The formula to calculate the area of a circle is A = \u03c0 * r^2, where A is the area and r is the radius.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that handles a ZeroDivisionError by printing \"Cannot divide by zero\".",
        "input": "Error handling",
        "responses": {
            "def divide(a, b):\n    try:\n        result = a / b\n        return result\n    except ZeroDivisionError:\n        print(\"Cannot divide by zero\")\n        return 0": 0.0,
            "def divide(a, b):\n    try:\n        result = a / b\n        return result\n    except ZeroDivisionError:\n        print(\"Cannot divide by zero\")": 1.0,
            "def divide(a, b):\n    try:\n        result = a / b\n        return result\n    except ZeroDivisionError:\n        print(\"Cannot divide by zero\")\n        return result": 0.0,
            "def divide(a, b):\n    try:\n        result = a / b\n        return result\n    except ZeroDivisionError:\n        print(\"Cannot divide by zero\")\n        return None": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that handles a ZeroDivisionError by printing \"Cannot divide by zero\".\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that reverses the words in a given sentence.",
        "input": "String operations",
        "responses": {
            "def reverse_sentence(sentence):\n    return ' '.join(sentence.split())": 0.0,
            "def reverse_sentence(sentence):\n    return ' '.join(sentence[::-1])": 0.0,
            "def reverse_sentence(sentence):\n    return ' '.join(sentence.split()[::-2])": 0.0,
            "def reverse_sentence(sentence):\n    return ' '.join(sentence.split()[::-1])": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that reverses the words in a given sentence.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to reverse a string. The function should take a string as input and return the reversed string.",
        "responses": {
            "def reverse_string(s):\n    return s[::]": 0.0,
            "def reverse_string(s):\n    return s[::-2]": 0.0,
            "def reverse_string(s):\n    return s[-1::-1]": 0.0,
            "def reverse_string(s):\n    return s[::-1]": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to reverse a string. The function should take a string as input and return the reversed string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that checks whether a given number is prime or not. A prime number is a number that is only divisible by 1 and itself.",
        "responses": {
            "def is_prime(num):\nif num < 2:\n    return True\nfor i in range(2, int(num ** 0.5) + 1):\n    if num % i == 0:\n        return False\nreturn True": 0.0,
            "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return True\n    return True": 0.0,
            "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True": 1.0,
            "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that checks whether a given number is prime or not. A prime number is a number that is only divisible by 1 and itself.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that finds the largest and smallest elements in a list.",
        "responses": {
            "def find_min_max_elements(lst):\n    return min(lst), max(lst)": 1.0,
            "def find_min_max_elements(lst):\n    return min(lst), min(lst)": 0.0,
            "def find_min_max_elements(lst):\n    return max(lst), min(lst)": 0.0,
            "def find_min_max_elements(lst):\n    return max(lst), max(lst)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that finds the largest and smallest elements in a list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a list of numbers and returns a new list with all even numbers removed.",
        "input": "List manipulation",
        "responses": {
            "def remove_even_numbers(nums):\n    return [num for num in nums if num % 2 == 1]": 0.0,
            "def remove_even_numbers(nums):\n    return [num for num in nums if num % 2 == 2]": 0.0,
            "def remove_even_numbers(nums):\n    return [num for num in nums if num % 2 == 0]": 0.0,
            "def remove_even_numbers(nums):\n    return [num for num in nums if num % 2 != 0]": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a list of numbers and returns a new list with all even numbers removed.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a class that represents a car with attributes \"make\" and \"model\" and a method to get the car's full name.",
        "input": "Object-oriented programming",
        "responses": {
            "class Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model\n\n    def get_full_name(self):\n        return self.make + self.model": 0.0,
            "class Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model\n\n    def get_full_name(self):\n        return self.make * self.model": 0.0,
            "class Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model\n\n    def get_full_name(self):\n        return self.make + \" \" + self.model": 1.0,
            "class Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model\n\n    def get_full_name(self):\n        return self.make - self.model": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a class that represents a car with attributes \"make\" and \"model\" and a method to get the car's full name.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that parses a JSON string and returns the value of a specified key.",
        "input": "JSON parsing",
        "responses": {
            "import json\n\ndef parse_json(json_str, key):\n    data = json.loads(json_str)\n    return data.get(key)": 1.0,
            "import json\n\ndef parse_json(json_str, key):\n    data = json.loads(json_str)\n    return data[key] if key in data else None": 0.0,
            "import json\n\ndef parse_json(json_str, key):\n    data = json.loads(json_str)\n    return data.get(key, default=None)": 0.0,
            "import json\n\ndef parse_json(json_str, key):\n    data = json.loads(json_str)\n    return data[key]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that parses a JSON string and returns the value of a specified key.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Given a list of numbers, write a function to calculate the average of all the numbers in the list.",
        "responses": {
            "python\ndef calculate_average(numbers):\n    return sum(numbers) // len(numbers)": 0.0,
            "python\ndef calculate_average(numbers):\n    return sum(numbers) % len(numbers)": 0.0,
            "python\ndef calculate_average(numbers):\n    return sum(numbers) * len(numbers)": 0.0,
            "def calculate_average(numbers):\n    return sum(numbers) / len(numbers)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nGiven a list of numbers, write a function to calculate the average of all the numbers in the list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to reverse a string in-place (i.e., without using extra space). Return the reversed string.",
        "responses": {
            "def reverse_string(s):\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        s[left], s[right] = s[right], s[left]\n        left -= 1\n        right += 1\n    return ''.join(s)": 0.0,
            "def reverse_string(s):\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        s[left], s[right] = s[right], s[left]\n        left += 1\n        right += 2\n    return ''.join(s)": 0.0,
            "def reverse_string(s):\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        s[left], s[right] = s[right], s[left]\n        left += 1\n        right -= 1\n    return ''.join(s)": 1.0,
            "def reverse_string(s):\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left > right:\n        s[left], s[right] = s[right], s[left]\n        left += 1\n        right -= 1\n    return ''.join(s)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to reverse a string in-place (i.e., without using extra space). Return the reversed string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the absolute value of a given number if it's positive, and the negative value if it's negative.",
        "input": "Conditional statements",
        "responses": {
            "def get_absolute_value(num):\n    if num >= 0:\n        return -num\n    else:\n        return -num": 0.0,
            "def get_absolute_value(num):\n    if num >= 0:\n        return num\n    else:\n        return -num": 1.0,
            "def get_absolute_value(num):\n    if num >= 0:\n        return -num\n    else:\n        return num": 0.0,
            "def get_absolute_value(num):\n    if num >= 0:\n        return num\n    else:\n        return num": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the absolute value of a given number if it's positive, and the negative value if it's negative.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to print a pattern of numbers from 1 to n in a triangular shape. Each row should contain the numbers from 1 to the corresponding row number.",
        "input": "Pattern printing",
        "responses": {
            "def print_pattern(n):\n    for i in range(1, n+1):\n        print(' '.join(str(j) for j in range(1, i+1)))": 1.0,
            "def print_pattern(n):\n    for i in range(1, n+1):\n        print(' '.join(str(j) for j in range(1, i)))\n        return": 0.0,
            "def print_pattern(n):\n    for i in range(1, n+1):\n        print(' '.join(str(j) for j in range(1, i+1)))\n        return": 0.0,
            "def print_pattern(n):\n    for i in range(1, n+1):\n        print(' '.join(str(j) for j in range(1, i+1)) + ' ')\n        return": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to print a pattern of numbers from 1 to n in a triangular shape. Each row should contain the numbers from 1 to the corresponding row number.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a given string is a valid email address. Assume the email address is valid if it contains an '@' symbol followed by a valid domain name.",
        "input": "Data validation",
        "responses": {
            "import re\n\ndef is_valid_email(email):\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return re.match(pattern, email) is None": 0.0,
            "import re\n\ndef is_valid_email(email):\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return re.match(pattern, email) is not None and email.count('@') == 1": 0.0,
            "import re\n\ndef is_valid_email(email):\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return re.match(pattern, email) is not None and len(email) > 0": 0.0,
            "import re\n\ndef is_valid_email(email):\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return re.match(pattern, email) is not None": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a given string is a valid email address. Assume the email address is valid if it contains an '@' symbol followed by a valid domain name.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that merges two dictionaries into one.",
        "input": "Data structures",
        "responses": {
            "def merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}": 1.0,
            "def merge_dictionaries(dict1, dict2):\n    return dict1.update(dict2)": 0.0,
            "def merge_dictionaries(dict1, dict2):\n    return dict1 + dict2": 0.0,
            "def merge_dictionaries(dict1, dict2):\n    return dict(dict1.items() + dict2.items())": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that merges two dictionaries into one.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns a list of squares of all even integers from 1 to n (inclusive).",
        "input": "List comprehension",
        "responses": {
            "def squares_of_even_integers(n):\n   return [x**2 for x in range(1, n+1) if x % 2 == 0 and x != 2]": 0.0,
            "def squares_of_even_integers(n):\n   return [x**2 for x in range(1, n+1) if x % 2 != 0]": 0.0,
            "def squares_of_even_integers(n):\n   return [x**2 for x in range(1, n+1) if x % 2 == 0]": 1.0,
            "def squares_of_even_integers(n):\n   return [x**2 for x in range(1, n+1) if x % 2 == 1]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns a list of squares of all even integers from 1 to n (inclusive).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a key exists in a dictionary and returns True or False accordingly.",
        "input": "Dictionaries",
        "responses": {
            "def key_exists(d, key):\n    return d.get(key, False)": 0.0,
            "def key_exists(d, key):\n    return d.has_key(key)": 0.0,
            "def key_exists(d, key):\n    return key in d": 1.0,
            "def key_exists(d, key):\n    return key in d.keys()": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a key exists in a dictionary and returns True or False accordingly.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that splits a given string x at each whitespace and prints the resulting list.",
        "input": "String splitting",
        "responses": {
            "split_list = x.split(\" \")\nprint(split_list)": 0.0,
            "split_list = x.split(\"\\n\")\nprint(split_list)": 0.0,
            "split_list = x.split()\nprint(split_list)": 1.0,
            "split_list = x.split(\",\")\nprint(split_list)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that splits a given string x at each whitespace and prints the resulting list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that formats a given name by capitalizing the first letter and converting the rest to lowercase.",
        "input": "String formatting",
        "responses": {
            "def format_name(name):\n    return name.lower()": 0.0,
            "def format_name(name):\n    return name.capitalize()": 1.0,
            "def format_name(name):\n    return name.upper()": 0.0,
            "def format_name(name):\n    return name.swapcase()": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that formats a given name by capitalizing the first letter and converting the rest to lowercase.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks whether a list is sorted in ascending order.",
        "responses": {
            "def is_sorted(nums):\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1]:\n            return False\n    return True": 0.0,
            "def is_sorted(nums):\n    for i in range(len(nums)-1):\n        if nums[i] > nums[i+1]:\n            return False\n    return True": 1.0,
            "def is_sorted(nums):\n    for i in range(len(nums)-1):\n        if nums[i] >= nums[i+1]:\n            return False\n    return True": 0.0,
            "def is_sorted(nums):\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]:\n            return False\n    return True": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks whether a list is sorted in ascending order.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that counts the frequency of each character in a given string and returns it as a dictionary.",
        "input": "Dictionaries",
        "responses": {
            "def count_characters(string):\n    char_freq = {}\n    for char in string:\n        char_freq[char] = char_freq.get(char, 0) - 1\n    return char_freq": 0.0,
            "def count_characters(string):\n    char_freq = {}\n    for char in string:\n        char_freq[char] = char_freq.get(char, 0) + 1\n    return char_freq.values()": 0.0,
            "def count_characters(string):\n    char_freq = {}\n    for char in string:\n        char_freq[char] = char_freq.get(char, 0) + 1\n    return char_freq": 1.0,
            "def count_characters(string):\n    char_freq = {}\n    for char in string:\n        char_freq[char] = char_freq.get(char, 0) + 1\n    return char_freq.keys()": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that counts the frequency of each character in a given string and returns it as a dictionary.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that retrieves all records from a database table.",
        "input": "Database operations",
        "responses": {
            "import sqlite3\n\ndef get_all_records(db_file, table):\n    conn = sqlite3.connect(db_file)\n    cursor = conn.cursor()\n    cursor.execute(f\"SELECT * FROM {table}\")\n    return cursor.execute()": 0.0,
            "import sqlite3\n\ndef get_all_records(db_file, table):\n    conn = sqlite3.connect(db_file)\n    cursor = conn.cursor()\n    cursor.execute(f\"SELECT * FROM {table}\")\n    return cursor.fetchall() + 1": 0.0,
            "import sqlite3\n\ndef get_all_records(db_file, table):\n    conn = sqlite3.connect(db_file)\n    cursor = conn.cursor()\n    cursor.execute(f\"SELECT * FROM {table}\")\n    return cursor.fetchall()": 1.0,
            "import sqlite3\n\ndef get_all_records(db_file, table):\n    conn = sqlite3.connect(db_file)\n    cursor = conn.cursor()\n    cursor.execute(f\"SELECT * FROM {table}\")\n    return cursor.fetchone()": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that retrieves all records from a database table.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a given string matches a specific regular expression pattern. The regular expression pattern will be provided as a string parameter to the function.",
        "input": "Regex",
        "responses": {
            "import re\n\ndef regex_match(pattern, s):\n    return re.match(pattern, s) is None": 0.0,
            "import re\n\ndef regex_match(pattern, s):\n    return re.match(pattern, s) is True": 0.0,
            "import re\n\ndef regex_match(pattern, s):\n    return re.match(pattern, s) is not None": 1.0,
            "import re\n\ndef regex_match(pattern, s):\n    return re.search(pattern, s) is not None": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a given string matches a specific regular expression pattern. The regular expression pattern will be provided as a string parameter to the function.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a given string starts with a specified pattern and returns True if it does, otherwise False.",
        "input": "Pattern matching",
        "responses": {
            "def starts_with_pattern(s, pattern):\n    return s.startswith(pattern.upper())": 0.0,
            "def starts_with_pattern(s, pattern):\n    return s.startswith(pattern.lower())": 0.0,
            "def starts_with_pattern(s, pattern):\n    return s.startswith(pattern)": 1.0,
            "def starts_with_pattern(s, pattern):\n    return s.endswith(pattern)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a given string starts with a specified pattern and returns True if it does, otherwise False.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that adds two matrices and returns the resulting matrix.",
        "input": "Matrix operations",
        "responses": {
            "def add_matrices(matrix1, matrix2):\n    return [[matrix1[i][j] + matrix2[i][j] for j in range(len(matrix1[0]))] for i in range(len(matrix1))]": 1.0,
            "def add_matrices(matrix1, matrix2):\n    return [[matrix1[i][j] + matrix2[i][j] for j in range(len(matrix1[0]))] for i in range(len(matrix2))]": 0.0,
            "def add_matrices(matrix1, matrix2):\n    return [[matrix1[i][j] + matrix2[i][j] for j in range(len(matrix1))] for i in range(len(matrix1[0]))]": 0.0,
            "def add_matrices(matrix1, matrix2):\n    return [[matrix1[i][j] - matrix2[i][j] for j in range(len(matrix1[0]))] for i in range(len(matrix1))]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that adds two matrices and returns the resulting matrix.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that finds the index of the first occurrence of a given element in a list.",
        "responses": {
            "def find_index(lst, element):\n    return lst.index(element) + 1": 0.0,
            "def find_index(lst, element):\n    return lst.index(element) * 2": 0.0,
            "def find_index(lst, element):\n    return lst.index(element) - 1": 0.0,
            "def find_index(lst, element):\n    return lst.index(element)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that finds the index of the first occurrence of a given element in a list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a string and returns a new string with all the vowels in the original string replaced by '-'.",
        "responses": {
            "def replace_vowels(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(['-' if char.upper() in vowels else char for char in s])": 0.0,
            "def replace_vowels(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(['-' if char in vowels else '' for char in s])": 0.0,
            "def replace_vowels(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(['-' if char in vowels else char for char in s])": 1.0,
            "def replace_vowels(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(['-' if char.lower() in vowels else char for char in s])": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a string and returns a new string with all the vowels in the original string replaced by '-'.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that creates an empty stack using a list.",
        "input": "Data structures",
        "responses": {
            "stack = \"\"": 0.0,
            "stack = {}": 0.0,
            "stack = []": 1.0,
            "stack = ()": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that creates an empty stack using a list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that capitalizes every second letter of a string x.",
        "input": "String manipulation",
        "responses": {
            "def capitalize_second(x):\n    return ''.join([c.upper() if i % 2 == 1 else c for i, c in enumerate(x)])": 1.0,
            "def capitalize_second(x):\n    return ''.join([c.upper() if i % 2 == 1 else c.upper() for i, c in enumerate(x)])": 0.0,
            "def capitalize_second(x):\n    return ''.join([c.upper() if i % 2 == 1 else c.lower() for i, c in enumerate(x)])": 0.0,
            "def capitalize_second(x):\n    return ''.join([c.upper() if i % 2 == 0 else c for i, c in enumerate(x)])": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that capitalizes every second letter of a string x.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that accepts a number and checks if it is even or odd.",
        "input": "Conditional statements",
        "responses": {
            "def check_even_odd(n):\n    return \"Even\" if n % 2 == 1 else \"Odd\"": 0.0,
            "def check_even_odd(n):\n    return \"Even\" if n % 2 == 0 else \"Even\"": 0.0,
            "def check_even_odd(n):\n    return \"Even\" if n % 2 == 0 else \"Odd\"": 1.0,
            "def check_even_odd(n):\n    return \"Even\" if n % 2 != 0 else \"Odd\"": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that accepts a number and checks if it is even or odd.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that takes a string as input and converts it to title case. Title case capitalizes the first letter of each word in the string.",
        "responses": {
            "def to_title_case(string):\n    return string.title()": 1.0,
            "def to_title_case(string):\n    return string.capitalize()": 0.0,
            "def to_title_case(string):\n    return string.upper()": 0.0,
            "def to_title_case(string):\n    return string.lower()": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that takes a string as input and converts it to title case. Title case capitalizes the first letter of each word in the string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes an integer as input and prints a pattern of asterisks (*) with the given number of rows.",
        "input": "Pattern printing",
        "responses": {
            "def print_pattern(rows):\n    for i in range(rows):\n        print(\"*\" * (i-1))": 0.0,
            "def print_pattern(rows):\n    for i in range(rows):\n        print(\"*\" * i)": 0.0,
            "def print_pattern(rows):\n    for i in range(rows):\n        print(\"*\" * (i+2))": 0.0,
            "def print_pattern(rows):\n    for i in range(rows):\n        print(\"*\" * (i+1))": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes an integer as input and prints a pattern of asterisks (*) with the given number of rows.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns a list of squares of the first 10 positive integers using list comprehension.",
        "input": "List comprehension",
        "responses": {
            "def square_list():\n    return [num**2 for num in range(1, 11) if num != 5]": 0.0,
            "def square_list():\n    return [num**2 for num in range(1, 11]": 0.0,
            "def square_list():\n    return [num**2 for num in range(1, 11)]": 1.0,
            "def square_list():\n    return [num**2 for num in range(1, 10)]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns a list of squares of the first 10 positive integers using list comprehension.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that adds two lists element-wise.",
        "input": "List operations",
        "responses": {
            "def add_lists(lst1, lst2):\n    return [a + b for a, b in zip(lst2, lst1)]": 0.0,
            "def add_lists(lst1, lst2):\n    return [a + b for a, b in zip(lst1, lst2)]": 1.0,
            "def add_lists(lst1, lst2):\n    return [a + b for a, b in zip(lst1[::-1], lst2[::-1])]": 0.0,
            "def add_lists(lst1, lst2):\n    return [a - b for a, b in zip(lst1, lst2)]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that adds two lists element-wise.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the value associated with a given key in a dictionary.",
        "input": "Dictionaries",
        "responses": {
            "def get_value(dictionary, key):\n    return dictionary.get(key)": 0.0,
            "def get_value(dictionary, key):\n    return dictionary[key]": 1.0,
            "def get_value(dictionary, key):\n    return dictionary[key] + 1": 0.0,
            "def get_value(dictionary, key):\n    return dictionary[key.lower()]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the value associated with a given key in a dictionary.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that tries to divide two numbers and returns the result. If the division fails due to zero division error, return None.",
        "input": "Error handling",
        "responses": {
            "def divide_numbers(a, b):\n    try:\n        return a * b\n    except ZeroDivisionError:\n        return None": 0.0,
            "def divide_numbers(a, b):\n    try:\n        return a / b\n    except:\n        return None": 0.0,
            "def divide_numbers(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        return \"Error: Division by zero\"": 0.0,
            "def divide_numbers(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        return None": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that tries to divide two numbers and returns the result. If the division fails due to zero division error, return None.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the reversed list of integers.",
        "input": "List operations",
        "responses": {
            "def reverse_list(lst):\n    return lst[::-2]": 0.0,
            "def reverse_list(lst):\n    return lst[1:-1]": 0.0,
            "def reverse_list(lst):\n    return lst[::-1]": 1.0,
            "def reverse_list(lst):\n    return lst[1:]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the reversed list of integers.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that concatenates two tuples.",
        "input": "Data structure - Tuple",
        "responses": {
            "def concatenate_tuples(t1, t2):\n    return t1 / t2": 0.0,
            "def concatenate_tuples(t1, t2):\n    return t1 + t2": 1.0,
            "def concatenate_tuples(t1, t2):\n    return t1 - t2": 0.0,
            "def concatenate_tuples(t1, t2):\n    return t1 * t2": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that concatenates two tuples.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that simulates tossing a coin (returns 'Heads' or 'Tails').",
        "input": "Random numbers",
        "responses": {
            "from random import choice\n\ndef toss_coin():\n    return choice(['Heads', 'Tails'])": 1.0,
            "from random import choice\n\ndef toss_coin():\n    return choice(['Heads', 'Tails', 'Tails'])": 0.0,
            "from random import choice\n\ndef toss_coin():\n    return choice(['Heads', 'Tails', 'Edge'])": 0.0,
            "from random import choice\n\ndef toss_coin():\n    return choice(['Heads', 'Heads', 'Tails'])": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that simulates tossing a coin (returns 'Heads' or 'Tails').\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that finds the maximum value in a dictionary.",
        "responses": {
            "def max_value(dictionary):\n    return max(dictionary.items())": 0.0,
            "def max_value(dictionary):\n    return max(dictionary.values())": 1.0,
            "def max_value(dictionary):\n    return max(dictionary.keys())": 0.0,
            "def max_value(dictionary):\n    return max(dictionary)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that finds the maximum value in a dictionary.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that prompts the user for a number and checks whether it is prime or not. Return True if the number is prime, False otherwise. A prime number is a number greater than 1 that is only divisible by 1 and itself.",
        "responses": {
            "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True": 1.0,
            "def is_prime(num):\n    if num <= 0:\n        return False\n    for i in range(1, num):\n        if num % i == 0:\n            return False\n    return True": 0.0,
            "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return True\n    return False": 0.0,
            "def is_prime(num):\n    if num <= 1:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return True\n    return True": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that prompts the user for a number and checks whether it is prime or not. Return True if the number is prime, False otherwise. A prime number is a number greater than 1 that is only divisible by 1 and itself.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that prints all possible combinations of the numbers 1, 2, and 3.",
        "input": "Nested loops",
        "responses": {
            "def print_combinations():\n    for i in range(1, 4):\n        for j in range(1, 4):\n            for k in range(1, 4):\n                print(i, j, k)": 1.0,
            "def print_combinations():\n    for i in range(1, 4):\n        for j in range(1, 4):\n            for k in range(1, 4):\n                print(i, j, k, i)": 0.0,
            "def print_combinations():\n    for i in range(1, 4):\n        for j in range(1, 4):\n            for k in range(1, 4):\n                print(i, j)": 0.0,
            "def print_combinations():\n    for i in range(1, 4):\n        for j in range(1, 4):\n            for k in range(1, 4):\n                print(i, j, k, k)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that prints all possible combinations of the numbers 1, 2, and 3.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Create a function that multiplies two numbers together.",
        "input": "Math operation",
        "responses": {
            "def multiply(a, b):\n    return a * b": 1.0,
            "def multiply(a, b):\n    return a / b": 0.0,
            "def multiply(a, b):\n    return a + b": 0.0,
            "def multiply(a, b):\n    return a - b": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nCreate a function that multiplies two numbers together.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that sorts a dictionary by its values in ascending order and returns a list of keys.",
        "input": "Dictionary operations",
        "responses": {
            "def sort_dict_by_values(d):\n    sorted_keys = sorted(d, key=lambda x: d[x])\n    return sorted_keys[1:]": 0.0,
            "def sort_dict_by_values(d):\n    sorted_keys = sorted(d, key=lambda x: d[x])\n    return sorted_keys": 1.0,
            "def sort_dict_by_values(d):\n    sorted_keys = sorted(d, key=lambda x: d[x])\n    return sorted_keys[::-1]": 0.0,
            "def sort_dict_by_values(d):\n    sorted_keys = sorted(d, key=lambda x: d[x])\n    return sorted_keys + sorted_keys": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that sorts a dictionary by its values in ascending order and returns a list of keys.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "You are given an integer. Write a program to determine if it is a prime number.",
        "responses": {
            "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True": 1.0,
            "def is_prime(n):\n    if n <= -1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False": 0.0,
            "def is_prime(n):\n    if n > 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i != 0:\n            return True\n    return False": 0.0,
            "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 1:\n            return False\n    return True": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nYou are given an integer. Write a program to determine if it is a prime number.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that appends all elements of one list to another list.",
        "input": "List operations",
        "responses": {
            "def append_list(lst1, lst2):\n    lst1.append(lst2)\n    return lst1": 0.0,
            "def append_list(lst1, lst2):\n    lst1.extend(lst2)\n    return lst1.append(lst2)": 0.0,
            "def append_list(lst1, lst2):\n    lst1.extend(lst2)\n    return lst2": 0.0,
            "def append_list(lst1, lst2):\n    lst1.extend(lst2)\n    return lst1": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that appends all elements of one list to another list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that takes a list of strings as input and returns a new list containing only the strings that start with the letter 'a'.",
        "responses": {
            "def filter_strings(string_list):\n    return [string for string in string_list if string.startswith('a') and len(string) > 0]": 0.0,
            "def filter_strings(string_list):\n    return [string for string in string_list if string.startswith('b')]": 0.0,
            "def filter_strings(string_list):\n    return [string for string in string_list if string.startswith('a')]": 1.0,
            "def filter_strings(string_list):\n    return [string for string in string_list if not string.startswith('a')]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that takes a list of strings as input and returns a new list containing only the strings that start with the letter 'a'.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to check if a string starts with a given prefix and returns True or False.",
        "input": "String manipulation",
        "responses": {
            "def starts_with_prefix(s, prefix):\n    return s.endswith(prefix)": 0.0,
            "def starts_with_prefix(s, prefix):\n    return s.startswith(prefix.upper())": 0.0,
            "def starts_with_prefix(s, prefix):\n    return s.startswith(prefix.lower())": 0.0,
            "def starts_with_prefix(s, prefix):\n    return s.startswith(prefix)": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to check if a string starts with a given prefix and returns True or False.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to remove all duplicate elements from a list.",
        "responses": {
            "def remove_duplicates(lst):\n    return list(set(lst))a": 0.0,
            "def remove_duplicates(lst):\n    return [i for i in lst if i not in lst]": 0.0,
            "def remove_duplicates(lst):\n    return list(set(lst))": 1.0,
            "def remove_duplicates(lst):\n    return set(lst)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to remove all duplicate elements from a list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function called multiply_lists that takes two lists of numbers as input and returns a new list with the corresponding elements multiplied together. Assume the two lists have the same length. For example, if the input lists are [1, 2, 3] and [4, 5, 6], the function should return [4, 10, 18].",
        "responses": {
            "def multiply_lists(lst1, lst2):\n    return [a * b + 1 for a, b in zip(lst1, lst2)]": 0.0,
            "def multiply_lists(lst1, lst2):\n    return [a * a for a, b in zip(lst1, lst2)]": 0.0,
            "def multiply_lists(lst1, lst2):\n    return [a + b for a, b in zip(lst1, lst2)]": 0.0,
            "def multiply_lists(lst1, lst2):\n    return [a * b for a, b in zip(lst1, lst2)]": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function called multiply_lists that takes two lists of numbers as input and returns a new list with the corresponding elements multiplied together. Assume the two lists have the same length. For example, if the input lists are [1, 2, 3] and [4, 5, 6], the function should return [4, 10, 18].\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that finds and returns the length of the longest word in a given sentence. The sentence is a string consisting of words separated by spaces.",
        "responses": {
            "def find_longest_word_length(sentence):\n    words = sentence.split()\n    return max(len(word) for word in words) + 1": 0.0,
            "def find_longest_word_length(sentence):\n    words = sentence.split()\n    return max(len(word) for word in words)": 1.0,
            "def find_longest_word_length(sentence):\n    words = sentence.split()\n    return min(len(word) for word in words)": 0.0,
            "def find_longest_word_length(sentence):\n    words = sentence.split()\n    return max(len(word) for word in words) - 1": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that finds and returns the length of the longest word in a given sentence. The sentence is a string consisting of words separated by spaces.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a Python function called calculate_area_of_circle that takes the radius of a circle as input and returns the area of the circle. Use the formula: area = pi * radius^2, where pi is a constant with the approximate value of 3.14159.",
        "responses": {
            "import math\n\ndef calculate_area_of_circle(radius):\n    return math.pi * radius**2": 1.0,
            "import math\n\ndef calculate_area_of_circle(radius):\n    return math.pi * radius * radius": 0.0,
            "import math\n\ndef calculate_area_of_circle(radius):\n    return math.pi * radius ** 3": 0.0,
            "import math\n\ndef calculate_area_of_circle(radius):\n    return math.pi * (radius ** 2) + 1": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a Python function called calculate_area_of_circle that takes the radius of a circle as input and returns the area of the circle. Use the formula: area = pi * radius^2, where pi is a constant with the approximate value of 3.14159.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that finds the common elements between two lists.",
        "responses": {
            "def find_common_elements(lst1, lst2):\n    return list(set(lst1) ^ set(lst2))": 0.0,
            "def find_common_elements(lst1, lst2):\n    return list(set(lst1) & set(lst2))": 1.0,
            "def find_common_elements(lst1, lst2):\n    return list(set(lst1) - set(lst2))": 0.0,
            "def find_common_elements(lst1, lst2):\n    return list(set(lst1) | set(lst2))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that finds the common elements between two lists.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that prompts the user to enter a positive integer and returns the entered value. Ensure that the input is a positive integer.",
        "input": "Input validation",
        "responses": {
            "def get_positive_integer():\n    while True:\n        try:\n            value = int(input(\"Enter a positive integer: \"))\n            if value >= 0:\n                return value\n            else:\n                print(\"Invalid input. Please enter a positive integer.\")\n        except ValueError:\n            print(\"Invalid input. Please enter a positive integer.\")": 0.0,
            "def get_positive_integer():\n    while True:\n        try:\n            value = int(input(\"Enter a positive integer: \"))\n            if value > 0:\n                return value\n            else:\n                print(\"Invalid input. Please enter a positive integer.\")\n        except ValueError:\n            print(\"Invalid input. Please enter a positive integer.\")": 1.0,
            "def get_positive_integer():\n    while True:\n        try:\n            value = int(input(\"Enter a positive integer: \"))\n            if value > 0:\n                return value\n            else:\n                print(\"Invalid input. Please enter a positive integer.\")\n        except TypeError:\n            print(\"Invalid input. Please enter a positive integer.\")": 0.0,
            "def get_positive_integer():\n    while True:\n        try:\n            value = int(input(\"Enter a positive integer: \"))\n            if value > 0:\n                return value\n            else:\n                print(\"Invalid input. Please enter a positive integer.\")\n        except ValueError:\n            print(\"Invalid input. Please enter a positive integer.\")\n            return None": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that prompts the user to enter a positive integer and returns the entered value. Ensure that the input is a positive integer.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that calculates the sum of the digits of a number.",
        "responses": {
            "def sum_of_digits(n):\n    return sum(int(digit) for digit in str(n) if digit.isnumeric())": 0.0,
            "def sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))": 1.0,
            "def sum_of_digits(n):\n    return sum(int(digit) for digit in str(n) if digit.isdecimal())": 0.0,
            "def sum_of_digits(n):\n    return sum(int(digit) for digit in str(n) if digit.isdigit())": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that calculates the sum of the digits of a number.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that applies two given functions one after the other.",
        "input": "Function composition",
        "responses": {
            "def compose(f, g, x):\n    return f(g(x))": 0.0,
            "def compose(f, g, x):\n    return g(f(x)) + 1": 0.0,
            "def compose(f, g, x):\n    return g(f(x)) - 1": 0.0,
            "def compose(f, g, x):\n    return g(f(x))": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that applies two given functions one after the other.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that fetches the HTML content of a given url and returns it as a string.",
        "input": "Web scraping",
        "responses": {
            "import requests\n\ndef get_html_content(url):\n    response = requests.get(url)\n    return response.content": 0.0,
            "import requests\n\ndef get_html_content(url):\n    response = requests.get(url)\n    return response.status_code": 0.0,
            "import requests\n\ndef get_html_content(url):\n    response = requests.get(url)\n    return response.text": 1.0,
            "import requests\n\ndef get_html_content(url):\n    response = requests.get(url)\n    return response.json()": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that fetches the HTML content of a given url and returns it as a string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to remove the first and last element from a list.",
        "input": "List manipulation",
        "responses": {
            "def remove_first_last(lst):\n    return lst[1:]": 0.0,
            "def remove_first_last(lst):\n    return lst[1:-1]": 1.0,
            "def remove_first_last(lst):\n    return lst[1:-2]": 0.0,
            "def remove_first_last(lst):\n    return lst[:-1]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to remove the first and last element from a list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that prompts the user to enter an integer. Handle the case when the input is not a valid integer gracefully.",
        "input": "Error handling",
        "responses": {
            "try:\n    num = int(input(\"Enter an integer: \"))\n    print(\"Input is a valid integer.\")\nexcept ValueError:\n    print(\"Input is not a valid integer.\")": 1.0,
            "try:\n    num = int(input(\"Enter an integer: \"))\n    print(\"Input is a valid integer.\")\nexcept ValueError:\n    print(\"Input is not a valid integer.\")\n    print(\"Invalid input.\")": 0.0,
            "try:\n    num = int(input(\"Enter an integer: \"))\n    print(\"Input is a valid integer.\")\nexcept ValueError:\n    print(\"Input is not a valid integer.\")\n    print(\"Please enter a valid integer.\")": 0.0,
            "try:\n    num = int(input(\"Enter an integer: \"))\n    print(\"Input is a valid integer.\")\nexcept ValueError:\n    print(\"Input is not a valid integer.\")\nexcept TypeError:\n    print(\"Input is not a valid integer.\")": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that prompts the user to enter an integer. Handle the case when the input is not a valid integer gracefully.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a given string represents a valid phone number (format: XXX-XXX-XXXX).",
        "input": "Input validation",
        "responses": {
            "import re\n\ndef is_valid_phone_number(phone_number):\n    regex = r'^\\d{3}-\\d{3}-\\d{4}$'\n    return re.match(regex, phone_number) is not None": 1.0,
            "import re\n\ndef is_valid_phone_number(phone_number):\n    regex = r'^\\d{3}-\\d{3}-\\d{4}$'\n    return re.match(regex, phone_number) is None": 0.0,
            "import re\n\ndef is_valid_phone_number(phone_number):\n    regex = r'^\\d{3}-\\d{3}-\\d{4}$'\n    return re.match(regex, phone_number) is not None and len(phone_number) == 12": 0.0,
            "import re\n\ndef is_valid_phone_number(phone_number):\n    regex = r'^\\d{3}-\\d{3}-\\d{4}$'\n    return re.match(regex, phone_number) is not None and phone_number[3] != '-'": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a given string represents a valid phone number (format: XXX-XXX-XXXX).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a class called \"Dog\" with an \"eat\" method that prints \"Eating bones\".",
        "input": "Classes and objects",
        "responses": {
            "class Dog:\n    def eat(self):\n        print(\"Eating bones\")": 1.0,
            "class Dog:\n    def eat(self):\n        print(\"Eating bones\")\n        return False": 0.0,
            "class Dog:\n    def eat(self):\n        print(\"Eating bones\")\n        return \"Done\"": 0.0,
            "class Dog:\n    def eat(self):\n        print(\"Eating bones\")\n        return None": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a class called \"Dog\" with an \"eat\" method that prints \"Eating bones\".\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a string follows the pattern \"abab\" where a and b can be any character. The string must have even length.",
        "input": "Pattern recognition",
        "responses": {
            "def follows_pattern(s):\n    if len(s) % 2 != 0:\n        return True\n    for i in range(0, len(s), 2):\n        if s[i] == s[i+1]:\n            return False\n    return True": 0.0,
            "def follows_pattern(s):\n    if len(s) % 2 != 0:\n        return True\n    for i in range(0, len(s), 2):\n        if s[i] == s[i+1]:\n            return True\n    return False": 0.0,
            "def follows_pattern(s):\n    if len(s) % 2 == 0:\n        return False\n    for i in range(0, len(s), 2):\n        if s[i] != s[i+1]:\n            return True\n    return False": 0.0,
            "def follows_pattern(s):\n    if len(s) % 2 != 0:\n        return False\n    for i in range(0, len(s), 2):\n        if s[i] != s[i+1]:\n            return False\n    return True": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a string follows the pattern \"abab\" where a and b can be any character. The string must have even length.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to check if a key exists in a dictionary.",
        "input": "Dictionary operations",
        "responses": {
            "def is_key_exists(d, key):\n    return key in d": 1.0,
            "def is_key_exists(d, key):\n    return d.has_key(key)": 0.0,
            "def is_key_exists(d, key):\n    return d.get(key) is not None": 0.0,
            "def is_key_exists(d, key):\n    return key not in d": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to check if a key exists in a dictionary.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a floating-point number as input and returns it rounded to 2 decimal places as a string.",
        "input": "Formatting operations",
        "responses": {
            "def round_to_two_decimal_places(num):\n    return \"{:.2f}\".format(num)": 1.0,
            "def round_to_two_decimal_places(num):\n    return \"{:.2f}\".format(int(num))": 0.0,
            "def round_to_two_decimal_places(num):\n    return \"{:.3f}\".format(num)": 0.0,
            "def round_to_two_decimal_places(num):\n    return \"{:.2f}\".format(num + 0.005)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a floating-point number as input and returns it rounded to 2 decimal places as a string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that calculates the sum of all positive integers up to and including the given number.",
        "input": "Recursion",
        "responses": {
            "def sum_positive_numbers(n):\n    if n <= 0:\n        return 0\n    return n + sum_positive_numbers(n-1) - 1": 0.0,
            "def sum_positive_numbers(n):\n    if n <= 0:\n        return 0\n    return n + sum_positive_numbers(n-1)": 1.0,
            "def sum_positive_numbers(n):\n    if n <= 0:\n        return 0\n    return n + sum_positive_numbers(n-1) + 1": 0.0,
            "def sum_positive_numbers(n):\n    if n <= 0:\n        return 0\n    return n + sum_positive_numbers(n-1) * 2": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that calculates the sum of all positive integers up to and including the given number.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to generate a random floating-point number between 0 and 1.",
        "input": "Random number generation",
        "responses": {
            "import random\n\ndef generate_random_float():\n    return random.choice([0, 1])": 0.0,
            "import random\n\ndef generate_random_float():\n    return random.randint(0, 1)": 0.0,
            "import random\n\ndef generate_random_float():\n    return random.random()": 1.0,
            "import random\n\ndef generate_random_float():\n    return random.uniform(0, 1, 2)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to generate a random floating-point number between 0 and 1.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if a list is sorted in ascending order.",
        "responses": {
            "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True": 1.0,
            "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i+1]:\n            return False\n    return True": 0.0,
            "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i+1]:\n            return False\n    return True": 0.0,
            "def is_sorted(lst):\n    for i in range(len(lst)):\n        if lst[i] > lst[i+1]:\n            return False\n    return True": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if a list is sorted in ascending order.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that prompts the user to input a number and returns True if the input is an integer, otherwise returns False.",
        "input": "Input validation",
        "responses": {
            "def is_integer():\n    try:\n        num = int(input(\"Enter a number: \"))\n        return True\n    except ValueError:\n        return False": 1.0,
            "def is_integer():\n    try:\n        num = int(input(\"Enter a number: \"))\n        return True\n    except ValueError:\n        return True": 0.0,
            "def is_integer():\n    try:\n        num = int(input(\"Enter a number: \"))\n        return True\n    except ValueError:\n        return False\n        return False": 0.0,
            "def is_integer():\n    try:\n        num = int(input(\"Enter a number: \"))\n        return False\n    except ValueError:\n        return False": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that prompts the user to input a number and returns True if the input is an integer, otherwise returns False.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that uses list comprehension to create a new list containing the squares of the elements of a given list.",
        "input": "List comprehensions",
        "responses": {
            "def square_list(lst):\n    return [x ** 2 for x in lst if len(lst) > 0]": 0.0,
            "def square_list(lst):\n    return [x ** 2 for x in lst if x % 2 == 0]": 0.0,
            "def square_list(lst):\n    return [x ** 2 for x in lst if isinstance(x, int)]": 0.0,
            "def square_list(lst):\n    return [x ** 2 for x in lst]": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that uses list comprehension to create a new list containing the squares of the elements of a given list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that squares all numbers in a given list using a lambda function.",
        "input": "Lambda functions",
        "responses": {
            "square_numbers = lambda lst: [num**2 for num in lst if type(num) == int]": 0.0,
            "square_numbers = lambda lst: [num**2 for num in lst]": 1.0,
            "square_numbers = lambda lst: [num**2 for num in lst if num.isdigit()]": 0.0,
            "square_numbers = lambda lst: [num**2 for num in lst if isinstance(num, int)]": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that squares all numbers in a given list using a lambda function.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that takes a string as input and returns True if the string contains only alphabetic characters, and False otherwise.",
        "responses": {
            "def is_alpha_string(s):\n    return not s.isalpha()": 0.0,
            "def is_alpha_string(s):\n    return s.isdigit()": 0.0,
            "def is_alpha_string(s):\n    return s.isalpha()": 1.0,
            "def is_alpha_string(s):\n    return len(s) == len(s.strip())": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that takes a string as input and returns True if the string contains only alphabetic characters, and False otherwise.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that takes a list as input and returns a new list with only the even numbers from the original list. The order of the even numbers in the new list should be the same as in the original list.",
        "responses": {
            "def even_numbers(input_list):\n    return [num for num in input_list if num % 2 == 1]": 0.0,
            "def even_numbers(input_list):\n    return [num for num in input_list if num % 3 == 0]": 0.0,
            "def even_numbers(input_list):\n    return [num for num in input_list if num % 2 != 0]": 0.0,
            "def even_numbers(input_list):\n    return [num for num in input_list if num % 2 == 0]": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that takes a list as input and returns a new list with only the even numbers from the original list. The order of the even numbers in the new list should be the same as in the original list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that multiplies two given matrices.",
        "input": "Matrix operations",
        "responses": {
            "import numpy as np\n\ndef multiply_matrices(matrix1, matrix2):\n    return np.matmul(matrix1, matrix2)": 1.0,
            "import numpy as np\n\ndef multiply_matrices(matrix1, matrix2):\n    return np.multiply(matrix1, matrix2)": 0.0,
            "import numpy as np\n\ndef multiply_matrices(matrix1, matrix2):\n    return np.dot(matrix1, matrix2)": 0.0,
            "import numpy as np\n\ndef multiply_matrices(matrix1, matrix2):\n    return np.divide(matrix1, matrix2)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that multiplies two given matrices.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to reverse a string.",
        "responses": {
            "def reverse_string(s):\n    return s.rsplit()": 0.0,
            "def reverse_string(s):\n    return s.reverse()": 0.0,
            "def reverse_string(s):\n    return s[::-1]": 1.0,
            "def reverse_string(s):\n    return \"\".join(reversed(s))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to reverse a string.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to combine two lists into one list.",
        "input": "List manipulation",
        "responses": {
            "def combine_lists(lst1, lst2):\n    return lst1 * lst2": 0.0,
            "def combine_lists(lst1, lst2):\n    return lst1 + lst2": 1.0,
            "def combine_lists(lst1, lst2):\n    return lst1 / lst2": 0.0,
            "def combine_lists(lst1, lst2):\n    return lst1 - lst2": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to combine two lists into one list.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that sorts a list of numbers in ascending order.",
        "responses": {
            "def sort_list(numbers):\n    numbers.sort()\n    return numbers[::-1]": 0.0,
            "def sort_list(numbers):\n    numbers.sort(reverse=True)\n    return numbers": 0.0,
            "def sort_list(numbers):\n    numbers.sort()\n    return numbers[1:]": 0.0,
            "def sort_list(numbers):\n    numbers.sort()\n    return numbers": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that sorts a list of numbers in ascending order.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks whether a given list has duplicates.",
        "responses": {
            "def check_duplicates(lst):\n    return len(lst) != len(lst)": 0.0,
            "def check_duplicates(lst):\n    return len(set(lst)) != len(set(lst))": 0.0,
            "def check_duplicates(lst):\n    return len(lst) != len(set(lst))": 1.0,
            "def check_duplicates(lst):\n    return len(lst) == len(set(lst))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks whether a given list has duplicates.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that converts a string s to title case (i.e., the first letter of each word capitalized).",
        "input": "String operations",
        "responses": {
            "def title_case(s):\n    return s.lower()": 0.0,
            "def title_case(s):\n    return s.capitalize()": 0.0,
            "def title_case(s):\n    return s.upper()": 0.0,
            "def title_case(s):\n    return s.title()": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that converts a string s to title case (i.e., the first letter of each word capitalized).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function called check_even_odd that takes an integer as input and returns True if the number is even, and False if it is odd.",
        "responses": {
            "def check_even_odd(n):\n    return True if n % 2 == 0 else False": 1.0,
            "def check_even_odd(n):\n    return True if n % 2 != 0 else True": 0.0,
            "def check_even_odd(n):\n    return False if n % 2 == 0 else True": 0.0,
            "def check_even_odd(n):\n    return True if n % 2 != 0 else False": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function called check_even_odd that takes an integer as input and returns True if the number is even, and False if it is odd.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes two dates (in the format \"YYYY-MM-DD\") and returns the number of days between them.",
        "input": "Date operations",
        "responses": {
            "import datetime\n\ndef count_days(start_date, end_date):\n    start_year, start_month, start_day = map(int, start_date.split('-'))\n    end_year, end_month, end_day = map(int, end_date.split('-'))\n    start = datetime.date(start_year, start_month, start_day)\n    end = datetime.date(end_year, end_month, end_day)\n    delta = end - start\n    return delta.days - 1": 0.0,
            "import datetime\n\ndef count_days(start_date, end_date):\n    start_year, start_month, start_day = map(int, start_date.split('-'))\n    end_year, end_month, end_day = map(int, end_date.split('-'))\n    start = datetime.date(start_year, start_month, start_day)\n    end = datetime.date(end_year, end_month, end_day)\n    delta = end - start\n    return delta.days * 2": 0.0,
            "import datetime\n\ndef count_days(start_date, end_date):\n    start_year, start_month, start_day = map(int, start_date.split('-'))\n    end_year, end_month, end_day = map(int, end_date.split('-'))\n    start = datetime.date(start_year, start_month, start_day)\n    end = datetime.date(end_year, end_month, end_day)\n    delta = end - start\n    return delta.days + 1": 0.0,
            "import datetime\n\ndef count_days(start_date, end_date):\n    start_year, start_month, start_day = map(int, start_date.split('-'))\n    end_year, end_month, end_day = map(int, end_date.split('-'))\n    start = datetime.date(start_year, start_month, start_day)\n    end = datetime.date(end_year, end_month, end_day)\n    delta = end - start\n    return delta.days": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes two dates (in the format \"YYYY-MM-DD\") and returns the number of days between them.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks whether a given year is a leap year or not. Return True if it is a leap year, otherwise return False.",
        "responses": {
            "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 != 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False": 0.0,
            "def is_leap_year(year):\n    if year % 4 != 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False": 0.0,
            "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False": 1.0,
            "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 != 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks whether a given year is a leap year or not. Return True if it is a leap year, otherwise return False.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that returns the minimum value from a given integer array.",
        "input": "Array operations",
        "responses": {
            "def get_min_value(arr):\n    return sum(arr)": 0.0,
            "def get_min_value(arr):\n    return arr[1]": 0.0,
            "def get_min_value(arr):\n    return min(arr)": 1.0,
            "def get_min_value(arr):\n    return max(arr)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that returns the minimum value from a given integer array.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that prints all prime numbers up to n.",
        "responses": {
            "def print_prime_numbers(n):\n    primes = []\n    for num in range(2, n+1):\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                primes.append(num)\n                break\n        else:\n            primes.append(num)\n    return primes": 0.0,
            "def print_prime_numbers(n):\n    primes = []\n    for num in range(2, n+1):\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                break\n        else:\n            primes.append(num)\n    return primes": 1.0,
            "def print_prime_numbers(n):\n    primes = []\n    for num in range(2, n+1):\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                primes.remove(num)\n        else:\n            primes.append(num)\n    return primes": 0.0,
            "def print_prime_numbers(n):\n    primes = []\n    for num in range(2, n+1):\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return primes\n        else:\n            primes.append(num)\n    return primes": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that prints all prime numbers up to n.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes an integer input from the user and returns True if the number is positive, and False otherwise.",
        "input": "Input validation",
        "responses": {
            "def is_positive_number(num):\n    return num >= 0": 0.0,
            "def is_positive_number(num):\n    return num > 0": 1.0,
            "def is_positive_number(num):\n    return num < 0": 0.0,
            "def is_positive_number(num):\n    return num == 0": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes an integer input from the user and returns True if the number is positive, and False otherwise.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that determines the largest of three given numbers.",
        "input": "Conditionals",
        "responses": {
            "def find_largest(a, b, c):\n    return max(a, b, c)": 1.0,
            "def find_largest(a, b, c):\n    return min(a, b, c)": 0.0,
            "def find_largest(a, b, c):\n    return a + b + c": 0.0,
            "def find_largest(a, b, c):\n    return a * b * c": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that determines the largest of three given numbers.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that validates if a number is between 0 and 100 (inclusive).",
        "input": "Input validation",
        "responses": {
            "def validate_number(num):\n    return 0 <= num < 100": 0.0,
            "def validate_number(num):\n    return 0 < num < 100": 0.0,
            "def validate_number(num):\n    return 0 <= num <= 100": 1.0,
            "def validate_number(num):\n    return 0 < num <= 100": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that validates if a number is between 0 and 100 (inclusive).\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that removes all duplicates from a given list, preserving the order of the elements.",
        "responses": {
            "def remove_duplicates(lst):\n    return list(lst)": 0.0,
            "def remove_duplicates(lst):\n    return lst[::-1]": 0.0,
            "def remove_duplicates(lst):\n    return list(dict.fromkeys(lst))": 1.0,
            "def remove_duplicates(lst):\n    return list(set(lst))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that removes all duplicates from a given list, preserving the order of the elements.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that checks if two given strings are anagrams (contain the same characters) and returns True or False.",
        "responses": {
            "def is_anagram(string1, string2):\n    return sorted(string1.lower()) == sorted(string2.upper())": 0.0,
            "def is_anagram(string1, string2):\n    return sorted(string1.lower()) != sorted(string2.lower())": 0.0,
            "def is_anagram(string1, string2):\n    return sorted(string1.upper()) == sorted(string2.lower())": 0.0,
            "def is_anagram(string1, string2):\n    return sorted(string1.lower()) == sorted(string2.lower())": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that checks if two given strings are anagrams (contain the same characters) and returns True or False.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a class 'Rectangle' with attributes 'length' and 'width', and a method 'area' that calculates and returns the area of the rectangle.",
        "input": "Classes and objects",
        "responses": {
            "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def area(self):\n        return self.length * self.width": 1.0,
            "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def area(self):\n        return self.length / self.width": 0.0,
            "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def area(self):\n        return self.length - self.width": 0.0,
            "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def area(self):\n        return self.length + self.width": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a class 'Rectangle' with attributes 'length' and 'width', and a method 'area' that calculates and returns the area of the rectangle.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes in a string and a number and returns a formatted string with the number inserted at the beginning.",
        "input": "String formatting",
        "responses": {
            "def format_string(string, number):\n    return \"{}{}\".format(number, string)": 1.0,
            "def format_string(string, number):\n    return \"{}{}\".format(string, number)": 0.0,
            "def format_string(string, number):\n    return \"{}{}\".format(string, string)": 0.0,
            "def format_string(string, number):\n    return \"{}{}\".format(number, number)": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes in a string and a number and returns a formatted string with the number inserted at the beginning.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes in a list and returns the average of its elements.",
        "input": "List manipulation",
        "responses": {
            "def get_average(lst):\n    return sum(lst) / len(lst) + 1": 0.0,
            "def get_average(lst):\n    return sum(lst) / (len(lst) - 1)": 0.0,
            "def get_average(lst):\n    return sum(lst) / len(lst)": 1.0,
            "def get_average(lst):\n    return sum(lst) / len(lst) - 1": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes in a list and returns the average of its elements.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that determines whether a year is a leap year or not.",
        "input": "Conditional statements",
        "responses": {
            "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 1:\n            if year % 400 == 1:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False": 0.0,
            "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 1:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False": 0.0,
            "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False": 1.0,
            "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 1:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that determines whether a year is a leap year or not.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that takes a number as input and returns a string representation of the number in binary.",
        "responses": {
            "def decimal_to_binary(num):\n    return bin(num)[1:]": 0.0,
            "def decimal_to_binary(num):\n    return bin(num)[2:] + \"0\"": 0.0,
            "def decimal_to_binary(num):\n    return bin(num)[2:] + \"1\"": 0.0,
            "def decimal_to_binary(num):\n    return bin(num)[2:]": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that takes a number as input and returns a string representation of the number in binary.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function called is_palindrome that takes a string as input and checks if it is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward, ignoring spaces, punctuation, and capitalization. The function should return True if the string is a palindrome, and False otherwise. For example, if the input is \"race car\", the function should return True.",
        "responses": {
            "def is_palindrome(s):\n    s = s.replace(\" \", \"\").lower()\n    return s != s[::-1]": 0.0,
            "def is_palindrome(s):\n    s = s.replace(\" \", \"\").lower()\n    return s == s[::-1]": 1.0,
            "def is_palindrome(s):\n    s = s.replace(\" \", \"\").upper()\n    return s == s[::-1]": 0.0,
            "def is_palindrome(s):\n    s = s.replace(\" \", \"\").lower()\n    return s == s.reverse()": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function called is_palindrome that takes a string as input and checks if it is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward, ignoring spaces, punctuation, and capitalization. The function should return True if the string is a palindrome, and False otherwise. For example, if the input is \"race car\", the function should return True.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a program that checks if a given string is a valid email address.",
        "responses": {
            "def is_valid_email(email):\n    regex = r'^[a-zA-Z0-9]+[\\._]?[a-zA-Z0-9]+[@]w+[.]\\w{2,3}$'\n    return bool(re.search(regex, email))": 0.0,
            "def is_valid_email(email):\n    regex = r'^[a-zA-Z0-9]+[\\._]?[a-zA-Z0-9]+[@]\\w+[.]\\w{2,3}'\n    return bool(re.search(regex, email))": 0.0,
            "def is_valid_email(email):\n    regex = r'^[a-zA-Z0-9]+[\\._]?[a-zA-Z0-9]+[@]\\w+[.]\\w{2,3}$'\n    return bool(re.search(regex, email))": 1.0,
            "def is_valid_email(email):\n    regex = r'^[a-zA-Z0-9]+[\\._]?[a-zA-Z0-9]+[@]\\w+[.\\w{2,3}$'\n    return bool(re.search(regex, email))": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a program that checks if a given string is a valid email address.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to check if an input string is numeric.",
        "input": "Input validation",
        "responses": {
            "def is_numeric(string):\n    try:\n        int(string)\n        return False\n    except ValueError:\n        return True": 0.0,
            "def is_numeric(string):\n    try:\n        float(string)\n        return True\n    except ValueError:\n        return False": 1.0,
            "def is_numeric(string):\n    try:\n        float(string)\n        return False\n    except ValueError:\n        return True": 0.0,
            "def is_numeric(string):\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to check if an input string is numeric.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function called sum_digits that takes an integer x as input and returns the sum of its digits. For example, if x = 12345, the function should return 15.",
        "responses": {
            "def sum_digits(x):\n    return sum(int(digit) for digit in str(x)) * 2": 0.0,
            "def sum_digits(x):\n    return sum(int(digit) for digit in str(x)) - 1": 0.0,
            "def sum_digits(x):\n    return sum(int(digit) for digit in str(x)) + 1": 0.0,
            "def sum_digits(x):\n    return sum(int(digit) for digit in str(x))": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function called sum_digits that takes an integer x as input and returns the sum of its digits. For example, if x = 12345, the function should return 15.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to get the list of values in a dictionary.",
        "input": "Dictionary operations",
        "responses": {
            "def get_values(d):\n    return list(d.keys())": 0.0,
            "def get_values(d):\n    return d.values()": 0.0,
            "def get_values(d):\n    return list(d)": 0.0,
            "def get_values(d):\n    return list(d.values())": 1.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to get the list of values in a dictionary.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function that takes a dictionary and returns the values of the dictionary in a list, sorted in ascending order.",
        "input": "Dictionary manipulation",
        "responses": {
            "def sort_dictionary_values(dictionary):\n    return sorted(dictionary.keys())": 0.0,
            "def sort_dictionary_values(dictionary):\n    return sorted(dictionary)": 0.0,
            "def sort_dictionary_values(dictionary):\n    return sorted(dictionary.values())": 1.0,
            "def sort_dictionary_values(dictionary):\n    return sorted(dictionary.items())": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function that takes a dictionary and returns the values of the dictionary in a list, sorted in ascending order.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    },
    {
        "instruction": "Write a function to count the number of vowels in a string. Consider 'a', 'e', 'i', 'o', and 'u' as vowels.",
        "responses": {
            "def count_vowels(string):\n    count = 0\n    for char in string:\n        if char in 'aeiouAEIOU':\n            count += 1\n    return counter": 0.0,
            "def count_vowels(string):\n    count = 0\n    for char in string:\n        if char in 'aeiouAEIOU':\n            count += 1\n    return count": 1.0,
            "def count_vowels(string):\n    count = 0\n    for char in string:\n        if char in 'aeiouAEIOU':\n            count += \n    return count": 0.0,
            "def count_vowels(string):\n    count = 0\n    for char in string:\n        return count if char in 'aeiouAEIOU':": 0.0
        },
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\nWrite a function to count the number of vowels in a string. Consider 'a', 'e', 'i', 'o', and 'u' as vowels.\n\n### Response:\n",
        "prompt_format": "Below is an instruction that describes a task, paired with an input that provides further context. Complete the request to the best of your ability.\n\n### Instruction:\nWrite a python program that solves the following programming problem.\n\n### Input:\n{instruction}\n\n### Response:\n"
    }
]